// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: oidc/api/key/v1/key.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeyService_DeleteJsonWebKeySet_FullMethodName = "/oidc.api.key.KeyService/DeleteJsonWebKeySet"
	KeyService_GetJsonWebKeySet_FullMethodName    = "/oidc.api.key.KeyService/GetJsonWebKeySet"
	KeyService_CreateJsonWebKeySet_FullMethodName = "/oidc.api.key.KeyService/CreateJsonWebKeySet"
	KeyService_UpdateJsonWebKeySet_FullMethodName = "/oidc.api.key.KeyService/UpdateJsonWebKeySet"
	KeyService_DeleteJsonWebKey_FullMethodName    = "/oidc.api.key.KeyService/DeleteJsonWebKey"
	KeyService_GetJsonWebKey_FullMethodName       = "/oidc.api.key.KeyService/GetJsonWebKey"
	KeyService_UpdateJsonWebKey_FullMethodName    = "/oidc.api.key.KeyService/UpdateJsonWebKey"
)

// KeyServiceClient is the client API for KeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyServiceClient interface {
	DeleteJsonWebKeySet(ctx context.Context, in *DeleteJsonWebKeySetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetJsonWebKeySet(ctx context.Context, in *GetJsonWebKeySetRequest, opts ...grpc.CallOption) (*JsonWebKeySet, error)
	CreateJsonWebKeySet(ctx context.Context, in *CreateJsonWebKeySetRequest, opts ...grpc.CallOption) (*JsonWebKeySet, error)
	UpdateJsonWebKeySet(ctx context.Context, in *UpdateJsonWebKeySetRequest, opts ...grpc.CallOption) (*JsonWebKeySet, error)
	DeleteJsonWebKey(ctx context.Context, in *DeleteJsonWebKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetJsonWebKey(ctx context.Context, in *GetJsonWebKeyRequest, opts ...grpc.CallOption) (*JsonWebKeySet, error)
	UpdateJsonWebKey(ctx context.Context, in *UpdateJsonWebKeyRequest, opts ...grpc.CallOption) (*JsonWebKey, error)
}

type keyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyServiceClient(cc grpc.ClientConnInterface) KeyServiceClient {
	return &keyServiceClient{cc}
}

func (c *keyServiceClient) DeleteJsonWebKeySet(ctx context.Context, in *DeleteJsonWebKeySetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KeyService_DeleteJsonWebKeySet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) GetJsonWebKeySet(ctx context.Context, in *GetJsonWebKeySetRequest, opts ...grpc.CallOption) (*JsonWebKeySet, error) {
	out := new(JsonWebKeySet)
	err := c.cc.Invoke(ctx, KeyService_GetJsonWebKeySet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) CreateJsonWebKeySet(ctx context.Context, in *CreateJsonWebKeySetRequest, opts ...grpc.CallOption) (*JsonWebKeySet, error) {
	out := new(JsonWebKeySet)
	err := c.cc.Invoke(ctx, KeyService_CreateJsonWebKeySet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) UpdateJsonWebKeySet(ctx context.Context, in *UpdateJsonWebKeySetRequest, opts ...grpc.CallOption) (*JsonWebKeySet, error) {
	out := new(JsonWebKeySet)
	err := c.cc.Invoke(ctx, KeyService_UpdateJsonWebKeySet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) DeleteJsonWebKey(ctx context.Context, in *DeleteJsonWebKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, KeyService_DeleteJsonWebKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) GetJsonWebKey(ctx context.Context, in *GetJsonWebKeyRequest, opts ...grpc.CallOption) (*JsonWebKeySet, error) {
	out := new(JsonWebKeySet)
	err := c.cc.Invoke(ctx, KeyService_GetJsonWebKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyServiceClient) UpdateJsonWebKey(ctx context.Context, in *UpdateJsonWebKeyRequest, opts ...grpc.CallOption) (*JsonWebKey, error) {
	out := new(JsonWebKey)
	err := c.cc.Invoke(ctx, KeyService_UpdateJsonWebKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyServiceServer is the server API for KeyService service.
// All implementations should embed UnimplementedKeyServiceServer
// for forward compatibility
type KeyServiceServer interface {
	DeleteJsonWebKeySet(context.Context, *DeleteJsonWebKeySetRequest) (*emptypb.Empty, error)
	GetJsonWebKeySet(context.Context, *GetJsonWebKeySetRequest) (*JsonWebKeySet, error)
	CreateJsonWebKeySet(context.Context, *CreateJsonWebKeySetRequest) (*JsonWebKeySet, error)
	UpdateJsonWebKeySet(context.Context, *UpdateJsonWebKeySetRequest) (*JsonWebKeySet, error)
	DeleteJsonWebKey(context.Context, *DeleteJsonWebKeyRequest) (*emptypb.Empty, error)
	GetJsonWebKey(context.Context, *GetJsonWebKeyRequest) (*JsonWebKeySet, error)
	UpdateJsonWebKey(context.Context, *UpdateJsonWebKeyRequest) (*JsonWebKey, error)
}

// UnimplementedKeyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedKeyServiceServer struct {
}

func (UnimplementedKeyServiceServer) DeleteJsonWebKeySet(context.Context, *DeleteJsonWebKeySetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJsonWebKeySet not implemented")
}
func (UnimplementedKeyServiceServer) GetJsonWebKeySet(context.Context, *GetJsonWebKeySetRequest) (*JsonWebKeySet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJsonWebKeySet not implemented")
}
func (UnimplementedKeyServiceServer) CreateJsonWebKeySet(context.Context, *CreateJsonWebKeySetRequest) (*JsonWebKeySet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJsonWebKeySet not implemented")
}
func (UnimplementedKeyServiceServer) UpdateJsonWebKeySet(context.Context, *UpdateJsonWebKeySetRequest) (*JsonWebKeySet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJsonWebKeySet not implemented")
}
func (UnimplementedKeyServiceServer) DeleteJsonWebKey(context.Context, *DeleteJsonWebKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJsonWebKey not implemented")
}
func (UnimplementedKeyServiceServer) GetJsonWebKey(context.Context, *GetJsonWebKeyRequest) (*JsonWebKeySet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJsonWebKey not implemented")
}
func (UnimplementedKeyServiceServer) UpdateJsonWebKey(context.Context, *UpdateJsonWebKeyRequest) (*JsonWebKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJsonWebKey not implemented")
}

// UnsafeKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyServiceServer will
// result in compilation errors.
type UnsafeKeyServiceServer interface {
	mustEmbedUnimplementedKeyServiceServer()
}

func RegisterKeyServiceServer(s grpc.ServiceRegistrar, srv KeyServiceServer) {
	s.RegisterService(&KeyService_ServiceDesc, srv)
}

func _KeyService_DeleteJsonWebKeySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJsonWebKeySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).DeleteJsonWebKeySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyService_DeleteJsonWebKeySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).DeleteJsonWebKeySet(ctx, req.(*DeleteJsonWebKeySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_GetJsonWebKeySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJsonWebKeySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).GetJsonWebKeySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyService_GetJsonWebKeySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).GetJsonWebKeySet(ctx, req.(*GetJsonWebKeySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_CreateJsonWebKeySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJsonWebKeySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).CreateJsonWebKeySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyService_CreateJsonWebKeySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).CreateJsonWebKeySet(ctx, req.(*CreateJsonWebKeySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_UpdateJsonWebKeySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJsonWebKeySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).UpdateJsonWebKeySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyService_UpdateJsonWebKeySet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).UpdateJsonWebKeySet(ctx, req.(*UpdateJsonWebKeySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_DeleteJsonWebKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJsonWebKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).DeleteJsonWebKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyService_DeleteJsonWebKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).DeleteJsonWebKey(ctx, req.(*DeleteJsonWebKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_GetJsonWebKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJsonWebKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).GetJsonWebKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyService_GetJsonWebKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).GetJsonWebKey(ctx, req.(*GetJsonWebKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyService_UpdateJsonWebKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJsonWebKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServiceServer).UpdateJsonWebKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyService_UpdateJsonWebKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServiceServer).UpdateJsonWebKey(ctx, req.(*UpdateJsonWebKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyService_ServiceDesc is the grpc.ServiceDesc for KeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oidc.api.key.KeyService",
	HandlerType: (*KeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteJsonWebKeySet",
			Handler:    _KeyService_DeleteJsonWebKeySet_Handler,
		},
		{
			MethodName: "GetJsonWebKeySet",
			Handler:    _KeyService_GetJsonWebKeySet_Handler,
		},
		{
			MethodName: "CreateJsonWebKeySet",
			Handler:    _KeyService_CreateJsonWebKeySet_Handler,
		},
		{
			MethodName: "UpdateJsonWebKeySet",
			Handler:    _KeyService_UpdateJsonWebKeySet_Handler,
		},
		{
			MethodName: "DeleteJsonWebKey",
			Handler:    _KeyService_DeleteJsonWebKey_Handler,
		},
		{
			MethodName: "GetJsonWebKey",
			Handler:    _KeyService_GetJsonWebKey_Handler,
		},
		{
			MethodName: "UpdateJsonWebKey",
			Handler:    _KeyService_UpdateJsonWebKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oidc/api/key/v1/key.proto",
}
