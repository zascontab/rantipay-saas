// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/apikeys/v2/apikeys.proto

package apikeyspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateKeyRequestMultiError, or nil if none found.
func (m *CreateKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateKeyRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateKeyRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateKeyRequestValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for KeyId

	if len(errors) > 0 {
		return CreateKeyRequestMultiError(errors)
	}

	return nil
}

// CreateKeyRequestMultiError is an error wrapping multiple validation errors
// returned by CreateKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKeyRequestMultiError) AllErrors() []error { return m }

// CreateKeyRequestValidationError is the validation error returned by
// CreateKeyRequest.Validate if the designated constraints aren't met.
type CreateKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKeyRequestValidationError) ErrorName() string { return "CreateKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKeyRequestValidationError{}

// Validate checks the field values on ListKeysRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListKeysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKeysRequestMultiError, or nil if none found.
func (m *ListKeysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKeysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for ShowDeleted

	if len(errors) > 0 {
		return ListKeysRequestMultiError(errors)
	}

	return nil
}

// ListKeysRequestMultiError is an error wrapping multiple validation errors
// returned by ListKeysRequest.ValidateAll() if the designated constraints
// aren't met.
type ListKeysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKeysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKeysRequestMultiError) AllErrors() []error { return m }

// ListKeysRequestValidationError is the validation error returned by
// ListKeysRequest.Validate if the designated constraints aren't met.
type ListKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKeysRequestValidationError) ErrorName() string { return "ListKeysRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKeysRequestValidationError{}

// Validate checks the field values on ListKeysResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListKeysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListKeysResponseMultiError, or nil if none found.
func (m *ListKeysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListKeysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListKeysResponseValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListKeysResponseValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListKeysResponseValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListKeysResponseMultiError(errors)
	}

	return nil
}

// ListKeysResponseMultiError is an error wrapping multiple validation errors
// returned by ListKeysResponse.ValidateAll() if the designated constraints
// aren't met.
type ListKeysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListKeysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListKeysResponseMultiError) AllErrors() []error { return m }

// ListKeysResponseValidationError is the validation error returned by
// ListKeysResponse.Validate if the designated constraints aren't met.
type ListKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListKeysResponseValidationError) ErrorName() string { return "ListKeysResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListKeysResponseValidationError{}

// Validate checks the field values on GetKeyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetKeyRequestMultiError, or
// nil if none found.
func (m *GetKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetKeyRequestMultiError(errors)
	}

	return nil
}

// GetKeyRequestMultiError is an error wrapping multiple validation errors
// returned by GetKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKeyRequestMultiError) AllErrors() []error { return m }

// GetKeyRequestValidationError is the validation error returned by
// GetKeyRequest.Validate if the designated constraints aren't met.
type GetKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKeyRequestValidationError) ErrorName() string { return "GetKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKeyRequestValidationError{}

// Validate checks the field values on GetKeyStringRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKeyStringRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKeyStringRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKeyStringRequestMultiError, or nil if none found.
func (m *GetKeyStringRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKeyStringRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetKeyStringRequestMultiError(errors)
	}

	return nil
}

// GetKeyStringRequestMultiError is an error wrapping multiple validation
// errors returned by GetKeyStringRequest.ValidateAll() if the designated
// constraints aren't met.
type GetKeyStringRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKeyStringRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKeyStringRequestMultiError) AllErrors() []error { return m }

// GetKeyStringRequestValidationError is the validation error returned by
// GetKeyStringRequest.Validate if the designated constraints aren't met.
type GetKeyStringRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKeyStringRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKeyStringRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKeyStringRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKeyStringRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKeyStringRequestValidationError) ErrorName() string {
	return "GetKeyStringRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetKeyStringRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKeyStringRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKeyStringRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKeyStringRequestValidationError{}

// Validate checks the field values on GetKeyStringResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKeyStringResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKeyStringResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKeyStringResponseMultiError, or nil if none found.
func (m *GetKeyStringResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKeyStringResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyString

	if len(errors) > 0 {
		return GetKeyStringResponseMultiError(errors)
	}

	return nil
}

// GetKeyStringResponseMultiError is an error wrapping multiple validation
// errors returned by GetKeyStringResponse.ValidateAll() if the designated
// constraints aren't met.
type GetKeyStringResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKeyStringResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKeyStringResponseMultiError) AllErrors() []error { return m }

// GetKeyStringResponseValidationError is the validation error returned by
// GetKeyStringResponse.Validate if the designated constraints aren't met.
type GetKeyStringResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKeyStringResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKeyStringResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKeyStringResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKeyStringResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKeyStringResponseValidationError) ErrorName() string {
	return "GetKeyStringResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetKeyStringResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKeyStringResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKeyStringResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKeyStringResponseValidationError{}

// Validate checks the field values on UpdateKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateKeyRequestMultiError, or nil if none found.
func (m *UpdateKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateKeyRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateKeyRequestValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateKeyRequestValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateKeyRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateKeyRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateKeyRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateKeyRequestMultiError(errors)
	}

	return nil
}

// UpdateKeyRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateKeyRequestMultiError) AllErrors() []error { return m }

// UpdateKeyRequestValidationError is the validation error returned by
// UpdateKeyRequest.Validate if the designated constraints aren't met.
type UpdateKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateKeyRequestValidationError) ErrorName() string { return "UpdateKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateKeyRequestValidationError{}

// Validate checks the field values on DeleteKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteKeyRequestMultiError, or nil if none found.
func (m *DeleteKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Etag

	if len(errors) > 0 {
		return DeleteKeyRequestMultiError(errors)
	}

	return nil
}

// DeleteKeyRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteKeyRequestMultiError) AllErrors() []error { return m }

// DeleteKeyRequestValidationError is the validation error returned by
// DeleteKeyRequest.Validate if the designated constraints aren't met.
type DeleteKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteKeyRequestValidationError) ErrorName() string { return "DeleteKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteKeyRequestValidationError{}

// Validate checks the field values on UndeleteKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UndeleteKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UndeleteKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UndeleteKeyRequestMultiError, or nil if none found.
func (m *UndeleteKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UndeleteKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return UndeleteKeyRequestMultiError(errors)
	}

	return nil
}

// UndeleteKeyRequestMultiError is an error wrapping multiple validation errors
// returned by UndeleteKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type UndeleteKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndeleteKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndeleteKeyRequestMultiError) AllErrors() []error { return m }

// UndeleteKeyRequestValidationError is the validation error returned by
// UndeleteKeyRequest.Validate if the designated constraints aren't met.
type UndeleteKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndeleteKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndeleteKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndeleteKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndeleteKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndeleteKeyRequestValidationError) ErrorName() string {
	return "UndeleteKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UndeleteKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndeleteKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndeleteKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndeleteKeyRequestValidationError{}

// Validate checks the field values on LookupKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LookupKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookupKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookupKeyRequestMultiError, or nil if none found.
func (m *LookupKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LookupKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KeyString

	if len(errors) > 0 {
		return LookupKeyRequestMultiError(errors)
	}

	return nil
}

// LookupKeyRequestMultiError is an error wrapping multiple validation errors
// returned by LookupKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type LookupKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookupKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookupKeyRequestMultiError) AllErrors() []error { return m }

// LookupKeyRequestValidationError is the validation error returned by
// LookupKeyRequest.Validate if the designated constraints aren't met.
type LookupKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupKeyRequestValidationError) ErrorName() string { return "LookupKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e LookupKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookupKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupKeyRequestValidationError{}

// Validate checks the field values on LookupKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LookupKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookupKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookupKeyResponseMultiError, or nil if none found.
func (m *LookupKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LookupKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for Name

	if len(errors) > 0 {
		return LookupKeyResponseMultiError(errors)
	}

	return nil
}

// LookupKeyResponseMultiError is an error wrapping multiple validation errors
// returned by LookupKeyResponse.ValidateAll() if the designated constraints
// aren't met.
type LookupKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookupKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookupKeyResponseMultiError) AllErrors() []error { return m }

// LookupKeyResponseValidationError is the validation error returned by
// LookupKeyResponse.Validate if the designated constraints aren't met.
type LookupKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookupKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookupKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookupKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookupKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookupKeyResponseValidationError) ErrorName() string {
	return "LookupKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LookupKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookupKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookupKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookupKeyResponseValidationError{}
