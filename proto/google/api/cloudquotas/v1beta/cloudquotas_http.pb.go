// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: google/api/cloudquotas/v1beta/cloudquotas.proto

package cloudquotaspb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCloudQuotasCreateQuotaPreference = "/google.api.cloudquotas.v1beta.CloudQuotas/CreateQuotaPreference"
const OperationCloudQuotasGetQuotaInfo = "/google.api.cloudquotas.v1beta.CloudQuotas/GetQuotaInfo"
const OperationCloudQuotasGetQuotaPreference = "/google.api.cloudquotas.v1beta.CloudQuotas/GetQuotaPreference"
const OperationCloudQuotasListQuotaInfos = "/google.api.cloudquotas.v1beta.CloudQuotas/ListQuotaInfos"
const OperationCloudQuotasListQuotaPreferences = "/google.api.cloudquotas.v1beta.CloudQuotas/ListQuotaPreferences"
const OperationCloudQuotasUpdateQuotaPreference = "/google.api.cloudquotas.v1beta.CloudQuotas/UpdateQuotaPreference"

type CloudQuotasHTTPServer interface {
	// CreateQuotaPreference Creates a new QuotaPreference that declares the desired value for a quota.
	CreateQuotaPreference(context.Context, *CreateQuotaPreferenceRequest) (*QuotaPreference, error)
	// GetQuotaInfo Retrieve the QuotaInfo of a quota for a project, folder or organization.
	GetQuotaInfo(context.Context, *GetQuotaInfoRequest) (*QuotaInfo, error)
	// GetQuotaPreference Gets details of a single QuotaPreference.
	GetQuotaPreference(context.Context, *GetQuotaPreferenceRequest) (*QuotaPreference, error)
	// ListQuotaInfos Lists QuotaInfos of all quotas for a given project, folder or organization.
	ListQuotaInfos(context.Context, *ListQuotaInfosRequest) (*ListQuotaInfosResponse, error)
	// ListQuotaPreferences Lists QuotaPreferences in a given project, folder or organization.
	ListQuotaPreferences(context.Context, *ListQuotaPreferencesRequest) (*ListQuotaPreferencesResponse, error)
	// UpdateQuotaPreference Updates the parameters of a single QuotaPreference. It can updates the
	// config in any states, not just the ones pending approval.
	UpdateQuotaPreference(context.Context, *UpdateQuotaPreferenceRequest) (*QuotaPreference, error)
}

func RegisterCloudQuotasHTTPServer(s *http.Server, srv CloudQuotasHTTPServer) {
	r := s.Route("/")
	r.GET("/v1beta/{parent:organizations/.*/locations/.*/services/.*}/quotaInfos", _CloudQuotas_ListQuotaInfos0_HTTP_Handler(srv))
	r.GET("/v1beta/{parent:folders/.*/locations/.*/services/.*}/quotaInfos", _CloudQuotas_ListQuotaInfos1_HTTP_Handler(srv))
	r.GET("/v1beta/{parent:projects/.*/locations/.*/services/.*}/quotaInfos", _CloudQuotas_ListQuotaInfos2_HTTP_Handler(srv))
	r.GET("/v1beta/{name:organizations/.*/locations/.*/services/.*/quotaInfos/.*}", _CloudQuotas_GetQuotaInfo0_HTTP_Handler(srv))
	r.GET("/v1beta/{name:folders/.*/locations/.*/services/.*/quotaInfos/.*}", _CloudQuotas_GetQuotaInfo1_HTTP_Handler(srv))
	r.GET("/v1beta/{name:projects/.*/locations/.*/services/.*/quotaInfos/.*}", _CloudQuotas_GetQuotaInfo2_HTTP_Handler(srv))
	r.GET("/v1beta/{parent:folders/.*/locations/.*}/quotaPreferences", _CloudQuotas_ListQuotaPreferences0_HTTP_Handler(srv))
	r.GET("/v1beta/{parent:organizations/.*/locations/.*}/quotaPreferences", _CloudQuotas_ListQuotaPreferences1_HTTP_Handler(srv))
	r.GET("/v1beta/{parent:projects/.*/locations/.*}/quotaPreferences", _CloudQuotas_ListQuotaPreferences2_HTTP_Handler(srv))
	r.GET("/v1beta/{name:organizations/.*/locations/.*/quotaPreferences/.*}", _CloudQuotas_GetQuotaPreference0_HTTP_Handler(srv))
	r.GET("/v1beta/{name:folders/.*/locations/.*/quotaPreferences/.*}", _CloudQuotas_GetQuotaPreference1_HTTP_Handler(srv))
	r.GET("/v1beta/{name:projects/.*/locations/.*/quotaPreferences/.*}", _CloudQuotas_GetQuotaPreference2_HTTP_Handler(srv))
	r.POST("/v1beta/{parent:folders/.*/locations/.*}/quotaPreferences", _CloudQuotas_CreateQuotaPreference0_HTTP_Handler(srv))
	r.POST("/v1beta/{parent:organizations/.*/locations/.*}/quotaPreferences", _CloudQuotas_CreateQuotaPreference1_HTTP_Handler(srv))
	r.POST("/v1beta/{parent:projects/.*/locations/.*}/quotaPreferences", _CloudQuotas_CreateQuotaPreference2_HTTP_Handler(srv))
	r.PATCH("/v1beta/{quota_preference.name:folders/.*/locations/.*/quotaPreferences/.*}", _CloudQuotas_UpdateQuotaPreference0_HTTP_Handler(srv))
	r.PATCH("/v1beta/{quota_preference.name:organizations/.*/locations/.*/quotaPreferences/.*}", _CloudQuotas_UpdateQuotaPreference1_HTTP_Handler(srv))
	r.PATCH("/v1beta/{quota_preference.name:projects/.*/locations/.*/quotaPreferences/.*}", _CloudQuotas_UpdateQuotaPreference2_HTTP_Handler(srv))
}

func _CloudQuotas_ListQuotaInfos0_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQuotaInfosRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasListQuotaInfos)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQuotaInfos(ctx, req.(*ListQuotaInfosRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQuotaInfosResponse)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_ListQuotaInfos1_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQuotaInfosRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasListQuotaInfos)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQuotaInfos(ctx, req.(*ListQuotaInfosRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQuotaInfosResponse)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_ListQuotaInfos2_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQuotaInfosRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasListQuotaInfos)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQuotaInfos(ctx, req.(*ListQuotaInfosRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQuotaInfosResponse)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_GetQuotaInfo0_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQuotaInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasGetQuotaInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuotaInfo(ctx, req.(*GetQuotaInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaInfo)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_GetQuotaInfo1_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQuotaInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasGetQuotaInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuotaInfo(ctx, req.(*GetQuotaInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaInfo)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_GetQuotaInfo2_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQuotaInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasGetQuotaInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuotaInfo(ctx, req.(*GetQuotaInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaInfo)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_ListQuotaPreferences0_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQuotaPreferencesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasListQuotaPreferences)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQuotaPreferences(ctx, req.(*ListQuotaPreferencesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQuotaPreferencesResponse)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_ListQuotaPreferences1_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQuotaPreferencesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasListQuotaPreferences)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQuotaPreferences(ctx, req.(*ListQuotaPreferencesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQuotaPreferencesResponse)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_ListQuotaPreferences2_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQuotaPreferencesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasListQuotaPreferences)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQuotaPreferences(ctx, req.(*ListQuotaPreferencesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQuotaPreferencesResponse)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_GetQuotaPreference0_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQuotaPreferenceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasGetQuotaPreference)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuotaPreference(ctx, req.(*GetQuotaPreferenceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaPreference)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_GetQuotaPreference1_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQuotaPreferenceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasGetQuotaPreference)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuotaPreference(ctx, req.(*GetQuotaPreferenceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaPreference)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_GetQuotaPreference2_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQuotaPreferenceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasGetQuotaPreference)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuotaPreference(ctx, req.(*GetQuotaPreferenceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaPreference)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_CreateQuotaPreference0_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQuotaPreferenceRequest
		if err := ctx.Bind(&in.QuotaPreference); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasCreateQuotaPreference)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQuotaPreference(ctx, req.(*CreateQuotaPreferenceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaPreference)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_CreateQuotaPreference1_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQuotaPreferenceRequest
		if err := ctx.Bind(&in.QuotaPreference); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasCreateQuotaPreference)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQuotaPreference(ctx, req.(*CreateQuotaPreferenceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaPreference)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_CreateQuotaPreference2_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQuotaPreferenceRequest
		if err := ctx.Bind(&in.QuotaPreference); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasCreateQuotaPreference)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQuotaPreference(ctx, req.(*CreateQuotaPreferenceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaPreference)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_UpdateQuotaPreference0_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQuotaPreferenceRequest
		if err := ctx.Bind(&in.QuotaPreference); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasUpdateQuotaPreference)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuotaPreference(ctx, req.(*UpdateQuotaPreferenceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaPreference)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_UpdateQuotaPreference1_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQuotaPreferenceRequest
		if err := ctx.Bind(&in.QuotaPreference); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasUpdateQuotaPreference)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuotaPreference(ctx, req.(*UpdateQuotaPreferenceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaPreference)
		return ctx.Result(200, reply)
	}
}

func _CloudQuotas_UpdateQuotaPreference2_HTTP_Handler(srv CloudQuotasHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQuotaPreferenceRequest
		if err := ctx.Bind(&in.QuotaPreference); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloudQuotasUpdateQuotaPreference)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuotaPreference(ctx, req.(*UpdateQuotaPreferenceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaPreference)
		return ctx.Result(200, reply)
	}
}

type CloudQuotasHTTPClient interface {
	CreateQuotaPreference(ctx context.Context, req *CreateQuotaPreferenceRequest, opts ...http.CallOption) (rsp *QuotaPreference, err error)
	GetQuotaInfo(ctx context.Context, req *GetQuotaInfoRequest, opts ...http.CallOption) (rsp *QuotaInfo, err error)
	GetQuotaPreference(ctx context.Context, req *GetQuotaPreferenceRequest, opts ...http.CallOption) (rsp *QuotaPreference, err error)
	ListQuotaInfos(ctx context.Context, req *ListQuotaInfosRequest, opts ...http.CallOption) (rsp *ListQuotaInfosResponse, err error)
	ListQuotaPreferences(ctx context.Context, req *ListQuotaPreferencesRequest, opts ...http.CallOption) (rsp *ListQuotaPreferencesResponse, err error)
	UpdateQuotaPreference(ctx context.Context, req *UpdateQuotaPreferenceRequest, opts ...http.CallOption) (rsp *QuotaPreference, err error)
}

type CloudQuotasHTTPClientImpl struct {
	cc *http.Client
}

func NewCloudQuotasHTTPClient(client *http.Client) CloudQuotasHTTPClient {
	return &CloudQuotasHTTPClientImpl{client}
}

func (c *CloudQuotasHTTPClientImpl) CreateQuotaPreference(ctx context.Context, in *CreateQuotaPreferenceRequest, opts ...http.CallOption) (*QuotaPreference, error) {
	var out QuotaPreference
	pattern := "/v1beta/{parent:projects/.*/locations/.*}/quotaPreferences"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloudQuotasCreateQuotaPreference))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.QuotaPreference, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloudQuotasHTTPClientImpl) GetQuotaInfo(ctx context.Context, in *GetQuotaInfoRequest, opts ...http.CallOption) (*QuotaInfo, error) {
	var out QuotaInfo
	pattern := "/v1beta/{name:projects/.*/locations/.*/services/.*/quotaInfos/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCloudQuotasGetQuotaInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloudQuotasHTTPClientImpl) GetQuotaPreference(ctx context.Context, in *GetQuotaPreferenceRequest, opts ...http.CallOption) (*QuotaPreference, error) {
	var out QuotaPreference
	pattern := "/v1beta/{name:projects/.*/locations/.*/quotaPreferences/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCloudQuotasGetQuotaPreference))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloudQuotasHTTPClientImpl) ListQuotaInfos(ctx context.Context, in *ListQuotaInfosRequest, opts ...http.CallOption) (*ListQuotaInfosResponse, error) {
	var out ListQuotaInfosResponse
	pattern := "/v1beta/{parent:projects/.*/locations/.*/services/.*}/quotaInfos"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCloudQuotasListQuotaInfos))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloudQuotasHTTPClientImpl) ListQuotaPreferences(ctx context.Context, in *ListQuotaPreferencesRequest, opts ...http.CallOption) (*ListQuotaPreferencesResponse, error) {
	var out ListQuotaPreferencesResponse
	pattern := "/v1beta/{parent:projects/.*/locations/.*}/quotaPreferences"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCloudQuotasListQuotaPreferences))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CloudQuotasHTTPClientImpl) UpdateQuotaPreference(ctx context.Context, in *UpdateQuotaPreferenceRequest, opts ...http.CallOption) (*QuotaPreference, error) {
	var out QuotaPreference
	pattern := "/v1beta/{quota_preference.name:projects/.*/locations/.*/quotaPreferences/.*}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloudQuotasUpdateQuotaPreference))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in.QuotaPreference, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
