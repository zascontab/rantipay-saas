// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/cloudquotas/v1beta/cloudquotas.proto

package cloudquotaspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListQuotaInfosRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListQuotaInfosRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListQuotaInfosRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListQuotaInfosRequestMultiError, or nil if none found.
func (m *ListQuotaInfosRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListQuotaInfosRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListQuotaInfosRequestMultiError(errors)
	}

	return nil
}

// ListQuotaInfosRequestMultiError is an error wrapping multiple validation
// errors returned by ListQuotaInfosRequest.ValidateAll() if the designated
// constraints aren't met.
type ListQuotaInfosRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListQuotaInfosRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListQuotaInfosRequestMultiError) AllErrors() []error { return m }

// ListQuotaInfosRequestValidationError is the validation error returned by
// ListQuotaInfosRequest.Validate if the designated constraints aren't met.
type ListQuotaInfosRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListQuotaInfosRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListQuotaInfosRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListQuotaInfosRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListQuotaInfosRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListQuotaInfosRequestValidationError) ErrorName() string {
	return "ListQuotaInfosRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListQuotaInfosRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListQuotaInfosRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListQuotaInfosRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListQuotaInfosRequestValidationError{}

// Validate checks the field values on ListQuotaInfosResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListQuotaInfosResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListQuotaInfosResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListQuotaInfosResponseMultiError, or nil if none found.
func (m *ListQuotaInfosResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListQuotaInfosResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQuotaInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListQuotaInfosResponseValidationError{
						field:  fmt.Sprintf("QuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListQuotaInfosResponseValidationError{
						field:  fmt.Sprintf("QuotaInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListQuotaInfosResponseValidationError{
					field:  fmt.Sprintf("QuotaInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListQuotaInfosResponseMultiError(errors)
	}

	return nil
}

// ListQuotaInfosResponseMultiError is an error wrapping multiple validation
// errors returned by ListQuotaInfosResponse.ValidateAll() if the designated
// constraints aren't met.
type ListQuotaInfosResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListQuotaInfosResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListQuotaInfosResponseMultiError) AllErrors() []error { return m }

// ListQuotaInfosResponseValidationError is the validation error returned by
// ListQuotaInfosResponse.Validate if the designated constraints aren't met.
type ListQuotaInfosResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListQuotaInfosResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListQuotaInfosResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListQuotaInfosResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListQuotaInfosResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListQuotaInfosResponseValidationError) ErrorName() string {
	return "ListQuotaInfosResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListQuotaInfosResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListQuotaInfosResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListQuotaInfosResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListQuotaInfosResponseValidationError{}

// Validate checks the field values on GetQuotaInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuotaInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuotaInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuotaInfoRequestMultiError, or nil if none found.
func (m *GetQuotaInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuotaInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetQuotaInfoRequestMultiError(errors)
	}

	return nil
}

// GetQuotaInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetQuotaInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetQuotaInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuotaInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuotaInfoRequestMultiError) AllErrors() []error { return m }

// GetQuotaInfoRequestValidationError is the validation error returned by
// GetQuotaInfoRequest.Validate if the designated constraints aren't met.
type GetQuotaInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuotaInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuotaInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuotaInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuotaInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuotaInfoRequestValidationError) ErrorName() string {
	return "GetQuotaInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuotaInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuotaInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuotaInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuotaInfoRequestValidationError{}

// Validate checks the field values on ListQuotaPreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListQuotaPreferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListQuotaPreferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListQuotaPreferencesRequestMultiError, or nil if none found.
func (m *ListQuotaPreferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListQuotaPreferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for Filter

	// no validation rules for OrderBy

	if len(errors) > 0 {
		return ListQuotaPreferencesRequestMultiError(errors)
	}

	return nil
}

// ListQuotaPreferencesRequestMultiError is an error wrapping multiple
// validation errors returned by ListQuotaPreferencesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListQuotaPreferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListQuotaPreferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListQuotaPreferencesRequestMultiError) AllErrors() []error { return m }

// ListQuotaPreferencesRequestValidationError is the validation error returned
// by ListQuotaPreferencesRequest.Validate if the designated constraints
// aren't met.
type ListQuotaPreferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListQuotaPreferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListQuotaPreferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListQuotaPreferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListQuotaPreferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListQuotaPreferencesRequestValidationError) ErrorName() string {
	return "ListQuotaPreferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListQuotaPreferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListQuotaPreferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListQuotaPreferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListQuotaPreferencesRequestValidationError{}

// Validate checks the field values on ListQuotaPreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListQuotaPreferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListQuotaPreferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListQuotaPreferencesResponseMultiError, or nil if none found.
func (m *ListQuotaPreferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListQuotaPreferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQuotaPreferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListQuotaPreferencesResponseValidationError{
						field:  fmt.Sprintf("QuotaPreferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListQuotaPreferencesResponseValidationError{
						field:  fmt.Sprintf("QuotaPreferences[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListQuotaPreferencesResponseValidationError{
					field:  fmt.Sprintf("QuotaPreferences[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListQuotaPreferencesResponseMultiError(errors)
	}

	return nil
}

// ListQuotaPreferencesResponseMultiError is an error wrapping multiple
// validation errors returned by ListQuotaPreferencesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListQuotaPreferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListQuotaPreferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListQuotaPreferencesResponseMultiError) AllErrors() []error { return m }

// ListQuotaPreferencesResponseValidationError is the validation error returned
// by ListQuotaPreferencesResponse.Validate if the designated constraints
// aren't met.
type ListQuotaPreferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListQuotaPreferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListQuotaPreferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListQuotaPreferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListQuotaPreferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListQuotaPreferencesResponseValidationError) ErrorName() string {
	return "ListQuotaPreferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListQuotaPreferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListQuotaPreferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListQuotaPreferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListQuotaPreferencesResponseValidationError{}

// Validate checks the field values on GetQuotaPreferenceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetQuotaPreferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQuotaPreferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQuotaPreferenceRequestMultiError, or nil if none found.
func (m *GetQuotaPreferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQuotaPreferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetQuotaPreferenceRequestMultiError(errors)
	}

	return nil
}

// GetQuotaPreferenceRequestMultiError is an error wrapping multiple validation
// errors returned by GetQuotaPreferenceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetQuotaPreferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQuotaPreferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQuotaPreferenceRequestMultiError) AllErrors() []error { return m }

// GetQuotaPreferenceRequestValidationError is the validation error returned by
// GetQuotaPreferenceRequest.Validate if the designated constraints aren't met.
type GetQuotaPreferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuotaPreferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuotaPreferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuotaPreferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuotaPreferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuotaPreferenceRequestValidationError) ErrorName() string {
	return "GetQuotaPreferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuotaPreferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuotaPreferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuotaPreferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuotaPreferenceRequestValidationError{}

// Validate checks the field values on CreateQuotaPreferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateQuotaPreferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQuotaPreferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQuotaPreferenceRequestMultiError, or nil if none found.
func (m *CreateQuotaPreferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQuotaPreferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for QuotaPreferenceId

	if all {
		switch v := interface{}(m.GetQuotaPreference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateQuotaPreferenceRequestValidationError{
					field:  "QuotaPreference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateQuotaPreferenceRequestValidationError{
					field:  "QuotaPreference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotaPreference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateQuotaPreferenceRequestValidationError{
				field:  "QuotaPreference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateQuotaPreferenceRequestMultiError(errors)
	}

	return nil
}

// CreateQuotaPreferenceRequestMultiError is an error wrapping multiple
// validation errors returned by CreateQuotaPreferenceRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateQuotaPreferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQuotaPreferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQuotaPreferenceRequestMultiError) AllErrors() []error { return m }

// CreateQuotaPreferenceRequestValidationError is the validation error returned
// by CreateQuotaPreferenceRequest.Validate if the designated constraints
// aren't met.
type CreateQuotaPreferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuotaPreferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuotaPreferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuotaPreferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuotaPreferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuotaPreferenceRequestValidationError) ErrorName() string {
	return "CreateQuotaPreferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQuotaPreferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuotaPreferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuotaPreferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuotaPreferenceRequestValidationError{}

// Validate checks the field values on UpdateQuotaPreferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateQuotaPreferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateQuotaPreferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateQuotaPreferenceRequestMultiError, or nil if none found.
func (m *UpdateQuotaPreferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateQuotaPreferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateQuotaPreferenceRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateQuotaPreferenceRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateQuotaPreferenceRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuotaPreference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateQuotaPreferenceRequestValidationError{
					field:  "QuotaPreference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateQuotaPreferenceRequestValidationError{
					field:  "QuotaPreference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotaPreference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateQuotaPreferenceRequestValidationError{
				field:  "QuotaPreference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AllowMissing

	// no validation rules for ValidateOnly

	if len(errors) > 0 {
		return UpdateQuotaPreferenceRequestMultiError(errors)
	}

	return nil
}

// UpdateQuotaPreferenceRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateQuotaPreferenceRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateQuotaPreferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateQuotaPreferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateQuotaPreferenceRequestMultiError) AllErrors() []error { return m }

// UpdateQuotaPreferenceRequestValidationError is the validation error returned
// by UpdateQuotaPreferenceRequest.Validate if the designated constraints
// aren't met.
type UpdateQuotaPreferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQuotaPreferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQuotaPreferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQuotaPreferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQuotaPreferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQuotaPreferenceRequestValidationError) ErrorName() string {
	return "UpdateQuotaPreferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateQuotaPreferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQuotaPreferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQuotaPreferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQuotaPreferenceRequestValidationError{}
