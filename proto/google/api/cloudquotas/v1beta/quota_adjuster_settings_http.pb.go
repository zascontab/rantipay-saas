// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: google/api/cloudquotas/v1beta/quota_adjuster_settings.proto

package cloudquotaspb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQuotaAdjusterSettingsManagerGetQuotaAdjusterSettings = "/google.api.cloudquotas.v1beta.QuotaAdjusterSettingsManager/GetQuotaAdjusterSettings"
const OperationQuotaAdjusterSettingsManagerUpdateQuotaAdjusterSettings = "/google.api.cloudquotas.v1beta.QuotaAdjusterSettingsManager/UpdateQuotaAdjusterSettings"

type QuotaAdjusterSettingsManagerHTTPServer interface {
	// GetQuotaAdjusterSettings RPC Method for getting QuotaAdjusterSettings based on the request
	GetQuotaAdjusterSettings(context.Context, *GetQuotaAdjusterSettingsRequest) (*QuotaAdjusterSettings, error)
	// UpdateQuotaAdjusterSettings RPC Method for updating QuotaAdjusterSettings based on the request
	UpdateQuotaAdjusterSettings(context.Context, *UpdateQuotaAdjusterSettingsRequest) (*QuotaAdjusterSettings, error)
}

func RegisterQuotaAdjusterSettingsManagerHTTPServer(s *http.Server, srv QuotaAdjusterSettingsManagerHTTPServer) {
	r := s.Route("/")
	r.PATCH("/v1beta/{quota_adjuster_settings.name:projects/.*/locations/.*/quotaAdjusterSettings}", _QuotaAdjusterSettingsManager_UpdateQuotaAdjusterSettings0_HTTP_Handler(srv))
	r.GET("/v1beta/{name:projects/.*/locations/.*/quotaAdjusterSettings}", _QuotaAdjusterSettingsManager_GetQuotaAdjusterSettings0_HTTP_Handler(srv))
}

func _QuotaAdjusterSettingsManager_UpdateQuotaAdjusterSettings0_HTTP_Handler(srv QuotaAdjusterSettingsManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQuotaAdjusterSettingsRequest
		if err := ctx.Bind(&in.QuotaAdjusterSettings); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuotaAdjusterSettingsManagerUpdateQuotaAdjusterSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuotaAdjusterSettings(ctx, req.(*UpdateQuotaAdjusterSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaAdjusterSettings)
		return ctx.Result(200, reply)
	}
}

func _QuotaAdjusterSettingsManager_GetQuotaAdjusterSettings0_HTTP_Handler(srv QuotaAdjusterSettingsManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQuotaAdjusterSettingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuotaAdjusterSettingsManagerGetQuotaAdjusterSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuotaAdjusterSettings(ctx, req.(*GetQuotaAdjusterSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QuotaAdjusterSettings)
		return ctx.Result(200, reply)
	}
}

type QuotaAdjusterSettingsManagerHTTPClient interface {
	GetQuotaAdjusterSettings(ctx context.Context, req *GetQuotaAdjusterSettingsRequest, opts ...http.CallOption) (rsp *QuotaAdjusterSettings, err error)
	UpdateQuotaAdjusterSettings(ctx context.Context, req *UpdateQuotaAdjusterSettingsRequest, opts ...http.CallOption) (rsp *QuotaAdjusterSettings, err error)
}

type QuotaAdjusterSettingsManagerHTTPClientImpl struct {
	cc *http.Client
}

func NewQuotaAdjusterSettingsManagerHTTPClient(client *http.Client) QuotaAdjusterSettingsManagerHTTPClient {
	return &QuotaAdjusterSettingsManagerHTTPClientImpl{client}
}

func (c *QuotaAdjusterSettingsManagerHTTPClientImpl) GetQuotaAdjusterSettings(ctx context.Context, in *GetQuotaAdjusterSettingsRequest, opts ...http.CallOption) (*QuotaAdjusterSettings, error) {
	var out QuotaAdjusterSettings
	pattern := "/v1beta/{name:projects/.*/locations/.*/quotaAdjusterSettings}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuotaAdjusterSettingsManagerGetQuotaAdjusterSettings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuotaAdjusterSettingsManagerHTTPClientImpl) UpdateQuotaAdjusterSettings(ctx context.Context, in *UpdateQuotaAdjusterSettingsRequest, opts ...http.CallOption) (*QuotaAdjusterSettings, error) {
	var out QuotaAdjusterSettings
	pattern := "/v1beta/{quota_adjuster_settings.name:projects/.*/locations/.*/quotaAdjusterSettings}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuotaAdjusterSettingsManagerUpdateQuotaAdjusterSettings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in.QuotaAdjusterSettings, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
