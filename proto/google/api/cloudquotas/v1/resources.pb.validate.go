// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/cloudquotas/v1/resources.proto

package cloudquotaspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on QuotaInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuotaInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotaInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuotaInfoMultiError, or nil
// if none found.
func (m *QuotaInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotaInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for QuotaId

	// no validation rules for Metric

	// no validation rules for Service

	// no validation rules for IsPrecise

	// no validation rules for RefreshInterval

	// no validation rules for ContainerType

	// no validation rules for MetricDisplayName

	// no validation rules for QuotaDisplayName

	// no validation rules for MetricUnit

	if all {
		switch v := interface{}(m.GetQuotaIncreaseEligibility()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotaInfoValidationError{
					field:  "QuotaIncreaseEligibility",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotaInfoValidationError{
					field:  "QuotaIncreaseEligibility",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotaIncreaseEligibility()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotaInfoValidationError{
				field:  "QuotaIncreaseEligibility",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsFixed

	for idx, item := range m.GetDimensionsInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuotaInfoValidationError{
						field:  fmt.Sprintf("DimensionsInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuotaInfoValidationError{
						field:  fmt.Sprintf("DimensionsInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuotaInfoValidationError{
					field:  fmt.Sprintf("DimensionsInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsConcurrent

	// no validation rules for ServiceRequestQuotaUri

	if len(errors) > 0 {
		return QuotaInfoMultiError(errors)
	}

	return nil
}

// QuotaInfoMultiError is an error wrapping multiple validation errors returned
// by QuotaInfo.ValidateAll() if the designated constraints aren't met.
type QuotaInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaInfoMultiError) AllErrors() []error { return m }

// QuotaInfoValidationError is the validation error returned by
// QuotaInfo.Validate if the designated constraints aren't met.
type QuotaInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaInfoValidationError) ErrorName() string { return "QuotaInfoValidationError" }

// Error satisfies the builtin error interface
func (e QuotaInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaInfoValidationError{}

// Validate checks the field values on QuotaIncreaseEligibility with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuotaIncreaseEligibility) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotaIncreaseEligibility with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuotaIncreaseEligibilityMultiError, or nil if none found.
func (m *QuotaIncreaseEligibility) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotaIncreaseEligibility) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsEligible

	// no validation rules for IneligibilityReason

	if len(errors) > 0 {
		return QuotaIncreaseEligibilityMultiError(errors)
	}

	return nil
}

// QuotaIncreaseEligibilityMultiError is an error wrapping multiple validation
// errors returned by QuotaIncreaseEligibility.ValidateAll() if the designated
// constraints aren't met.
type QuotaIncreaseEligibilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaIncreaseEligibilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaIncreaseEligibilityMultiError) AllErrors() []error { return m }

// QuotaIncreaseEligibilityValidationError is the validation error returned by
// QuotaIncreaseEligibility.Validate if the designated constraints aren't met.
type QuotaIncreaseEligibilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaIncreaseEligibilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaIncreaseEligibilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaIncreaseEligibilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaIncreaseEligibilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaIncreaseEligibilityValidationError) ErrorName() string {
	return "QuotaIncreaseEligibilityValidationError"
}

// Error satisfies the builtin error interface
func (e QuotaIncreaseEligibilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaIncreaseEligibility.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaIncreaseEligibilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaIncreaseEligibilityValidationError{}

// Validate checks the field values on QuotaPreference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QuotaPreference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotaPreference with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuotaPreferenceMultiError, or nil if none found.
func (m *QuotaPreference) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotaPreference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Dimensions

	if all {
		switch v := interface{}(m.GetQuotaConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotaPreferenceValidationError{
					field:  "QuotaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotaPreferenceValidationError{
					field:  "QuotaConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotaConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotaPreferenceValidationError{
				field:  "QuotaConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Etag

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotaPreferenceValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotaPreferenceValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotaPreferenceValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotaPreferenceValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotaPreferenceValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotaPreferenceValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Service

	// no validation rules for QuotaId

	// no validation rules for Reconciling

	// no validation rules for Justification

	// no validation rules for ContactEmail

	if len(errors) > 0 {
		return QuotaPreferenceMultiError(errors)
	}

	return nil
}

// QuotaPreferenceMultiError is an error wrapping multiple validation errors
// returned by QuotaPreference.ValidateAll() if the designated constraints
// aren't met.
type QuotaPreferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaPreferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaPreferenceMultiError) AllErrors() []error { return m }

// QuotaPreferenceValidationError is the validation error returned by
// QuotaPreference.Validate if the designated constraints aren't met.
type QuotaPreferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaPreferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaPreferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaPreferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaPreferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaPreferenceValidationError) ErrorName() string { return "QuotaPreferenceValidationError" }

// Error satisfies the builtin error interface
func (e QuotaPreferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaPreference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaPreferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaPreferenceValidationError{}

// Validate checks the field values on QuotaConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuotaConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotaConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuotaConfigMultiError, or
// nil if none found.
func (m *QuotaConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotaConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PreferredValue

	// no validation rules for StateDetail

	if all {
		switch v := interface{}(m.GetGrantedValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotaConfigValidationError{
					field:  "GrantedValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotaConfigValidationError{
					field:  "GrantedValue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrantedValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotaConfigValidationError{
				field:  "GrantedValue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TraceId

	// no validation rules for Annotations

	// no validation rules for RequestOrigin

	if len(errors) > 0 {
		return QuotaConfigMultiError(errors)
	}

	return nil
}

// QuotaConfigMultiError is an error wrapping multiple validation errors
// returned by QuotaConfig.ValidateAll() if the designated constraints aren't met.
type QuotaConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaConfigMultiError) AllErrors() []error { return m }

// QuotaConfigValidationError is the validation error returned by
// QuotaConfig.Validate if the designated constraints aren't met.
type QuotaConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaConfigValidationError) ErrorName() string { return "QuotaConfigValidationError" }

// Error satisfies the builtin error interface
func (e QuotaConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaConfigValidationError{}

// Validate checks the field values on DimensionsInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DimensionsInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DimensionsInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DimensionsInfoMultiError,
// or nil if none found.
func (m *DimensionsInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DimensionsInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dimensions

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DimensionsInfoValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DimensionsInfoValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DimensionsInfoValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DimensionsInfoMultiError(errors)
	}

	return nil
}

// DimensionsInfoMultiError is an error wrapping multiple validation errors
// returned by DimensionsInfo.ValidateAll() if the designated constraints
// aren't met.
type DimensionsInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DimensionsInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DimensionsInfoMultiError) AllErrors() []error { return m }

// DimensionsInfoValidationError is the validation error returned by
// DimensionsInfo.Validate if the designated constraints aren't met.
type DimensionsInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DimensionsInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DimensionsInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DimensionsInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DimensionsInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DimensionsInfoValidationError) ErrorName() string { return "DimensionsInfoValidationError" }

// Error satisfies the builtin error interface
func (e DimensionsInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDimensionsInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DimensionsInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DimensionsInfoValidationError{}

// Validate checks the field values on QuotaDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuotaDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuotaDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuotaDetailsMultiError, or
// nil if none found.
func (m *QuotaDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *QuotaDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetRolloutInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuotaDetailsValidationError{
					field:  "RolloutInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuotaDetailsValidationError{
					field:  "RolloutInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRolloutInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuotaDetailsValidationError{
				field:  "RolloutInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuotaDetailsMultiError(errors)
	}

	return nil
}

// QuotaDetailsMultiError is an error wrapping multiple validation errors
// returned by QuotaDetails.ValidateAll() if the designated constraints aren't met.
type QuotaDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaDetailsMultiError) AllErrors() []error { return m }

// QuotaDetailsValidationError is the validation error returned by
// QuotaDetails.Validate if the designated constraints aren't met.
type QuotaDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaDetailsValidationError) ErrorName() string { return "QuotaDetailsValidationError" }

// Error satisfies the builtin error interface
func (e QuotaDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaDetailsValidationError{}

// Validate checks the field values on RolloutInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RolloutInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RolloutInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RolloutInfoMultiError, or
// nil if none found.
func (m *RolloutInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *RolloutInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OngoingRollout

	if len(errors) > 0 {
		return RolloutInfoMultiError(errors)
	}

	return nil
}

// RolloutInfoMultiError is an error wrapping multiple validation errors
// returned by RolloutInfo.ValidateAll() if the designated constraints aren't met.
type RolloutInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RolloutInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RolloutInfoMultiError) AllErrors() []error { return m }

// RolloutInfoValidationError is the validation error returned by
// RolloutInfo.Validate if the designated constraints aren't met.
type RolloutInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RolloutInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RolloutInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RolloutInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RolloutInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RolloutInfoValidationError) ErrorName() string { return "RolloutInfoValidationError" }

// Error satisfies the builtin error interface
func (e RolloutInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRolloutInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RolloutInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RolloutInfoValidationError{}
