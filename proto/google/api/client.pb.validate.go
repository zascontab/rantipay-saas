// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/client.proto

package annotations

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonLanguageSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommonLanguageSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonLanguageSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonLanguageSettingsMultiError, or nil if none found.
func (m *CommonLanguageSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonLanguageSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReferenceDocsUri

	if all {
		switch v := interface{}(m.GetSelectiveGapicGeneration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommonLanguageSettingsValidationError{
					field:  "SelectiveGapicGeneration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommonLanguageSettingsValidationError{
					field:  "SelectiveGapicGeneration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelectiveGapicGeneration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonLanguageSettingsValidationError{
				field:  "SelectiveGapicGeneration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommonLanguageSettingsMultiError(errors)
	}

	return nil
}

// CommonLanguageSettingsMultiError is an error wrapping multiple validation
// errors returned by CommonLanguageSettings.ValidateAll() if the designated
// constraints aren't met.
type CommonLanguageSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonLanguageSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonLanguageSettingsMultiError) AllErrors() []error { return m }

// CommonLanguageSettingsValidationError is the validation error returned by
// CommonLanguageSettings.Validate if the designated constraints aren't met.
type CommonLanguageSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonLanguageSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonLanguageSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonLanguageSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonLanguageSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonLanguageSettingsValidationError) ErrorName() string {
	return "CommonLanguageSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e CommonLanguageSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonLanguageSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonLanguageSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonLanguageSettingsValidationError{}

// Validate checks the field values on ClientLibrarySettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClientLibrarySettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientLibrarySettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClientLibrarySettingsMultiError, or nil if none found.
func (m *ClientLibrarySettings) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientLibrarySettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for LaunchStage

	// no validation rules for RestNumericEnums

	if all {
		switch v := interface{}(m.GetJavaSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "JavaSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "JavaSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJavaSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientLibrarySettingsValidationError{
				field:  "JavaSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCppSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "CppSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "CppSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCppSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientLibrarySettingsValidationError{
				field:  "CppSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPhpSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "PhpSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "PhpSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPhpSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientLibrarySettingsValidationError{
				field:  "PhpSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPythonSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "PythonSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "PythonSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPythonSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientLibrarySettingsValidationError{
				field:  "PythonSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNodeSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "NodeSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "NodeSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNodeSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientLibrarySettingsValidationError{
				field:  "NodeSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDotnetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "DotnetSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "DotnetSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDotnetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientLibrarySettingsValidationError{
				field:  "DotnetSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRubySettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "RubySettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "RubySettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRubySettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientLibrarySettingsValidationError{
				field:  "RubySettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGoSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "GoSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientLibrarySettingsValidationError{
					field:  "GoSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGoSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientLibrarySettingsValidationError{
				field:  "GoSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClientLibrarySettingsMultiError(errors)
	}

	return nil
}

// ClientLibrarySettingsMultiError is an error wrapping multiple validation
// errors returned by ClientLibrarySettings.ValidateAll() if the designated
// constraints aren't met.
type ClientLibrarySettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientLibrarySettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientLibrarySettingsMultiError) AllErrors() []error { return m }

// ClientLibrarySettingsValidationError is the validation error returned by
// ClientLibrarySettings.Validate if the designated constraints aren't met.
type ClientLibrarySettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientLibrarySettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientLibrarySettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientLibrarySettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientLibrarySettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientLibrarySettingsValidationError) ErrorName() string {
	return "ClientLibrarySettingsValidationError"
}

// Error satisfies the builtin error interface
func (e ClientLibrarySettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientLibrarySettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientLibrarySettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientLibrarySettingsValidationError{}

// Validate checks the field values on Publishing with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Publishing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Publishing with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PublishingMultiError, or
// nil if none found.
func (m *Publishing) ValidateAll() error {
	return m.validate(true)
}

func (m *Publishing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMethodSettings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublishingValidationError{
						field:  fmt.Sprintf("MethodSettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublishingValidationError{
						field:  fmt.Sprintf("MethodSettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublishingValidationError{
					field:  fmt.Sprintf("MethodSettings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NewIssueUri

	// no validation rules for DocumentationUri

	// no validation rules for ApiShortName

	// no validation rules for GithubLabel

	// no validation rules for DocTagPrefix

	// no validation rules for Organization

	for idx, item := range m.GetLibrarySettings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PublishingValidationError{
						field:  fmt.Sprintf("LibrarySettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PublishingValidationError{
						field:  fmt.Sprintf("LibrarySettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublishingValidationError{
					field:  fmt.Sprintf("LibrarySettings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ProtoReferenceDocumentationUri

	// no validation rules for RestReferenceDocumentationUri

	if len(errors) > 0 {
		return PublishingMultiError(errors)
	}

	return nil
}

// PublishingMultiError is an error wrapping multiple validation errors
// returned by Publishing.ValidateAll() if the designated constraints aren't met.
type PublishingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishingMultiError) AllErrors() []error { return m }

// PublishingValidationError is the validation error returned by
// Publishing.Validate if the designated constraints aren't met.
type PublishingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishingValidationError) ErrorName() string { return "PublishingValidationError" }

// Error satisfies the builtin error interface
func (e PublishingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishingValidationError{}

// Validate checks the field values on JavaSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JavaSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JavaSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JavaSettingsMultiError, or
// nil if none found.
func (m *JavaSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *JavaSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LibraryPackage

	// no validation rules for ServiceClassNames

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JavaSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JavaSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JavaSettingsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JavaSettingsMultiError(errors)
	}

	return nil
}

// JavaSettingsMultiError is an error wrapping multiple validation errors
// returned by JavaSettings.ValidateAll() if the designated constraints aren't met.
type JavaSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JavaSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JavaSettingsMultiError) AllErrors() []error { return m }

// JavaSettingsValidationError is the validation error returned by
// JavaSettings.Validate if the designated constraints aren't met.
type JavaSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JavaSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JavaSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JavaSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JavaSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JavaSettingsValidationError) ErrorName() string { return "JavaSettingsValidationError" }

// Error satisfies the builtin error interface
func (e JavaSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJavaSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JavaSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JavaSettingsValidationError{}

// Validate checks the field values on CppSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CppSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CppSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CppSettingsMultiError, or
// nil if none found.
func (m *CppSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *CppSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CppSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CppSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CppSettingsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CppSettingsMultiError(errors)
	}

	return nil
}

// CppSettingsMultiError is an error wrapping multiple validation errors
// returned by CppSettings.ValidateAll() if the designated constraints aren't met.
type CppSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CppSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CppSettingsMultiError) AllErrors() []error { return m }

// CppSettingsValidationError is the validation error returned by
// CppSettings.Validate if the designated constraints aren't met.
type CppSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CppSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CppSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CppSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CppSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CppSettingsValidationError) ErrorName() string { return "CppSettingsValidationError" }

// Error satisfies the builtin error interface
func (e CppSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCppSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CppSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CppSettingsValidationError{}

// Validate checks the field values on PhpSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PhpSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PhpSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PhpSettingsMultiError, or
// nil if none found.
func (m *PhpSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *PhpSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PhpSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PhpSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PhpSettingsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PhpSettingsMultiError(errors)
	}

	return nil
}

// PhpSettingsMultiError is an error wrapping multiple validation errors
// returned by PhpSettings.ValidateAll() if the designated constraints aren't met.
type PhpSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhpSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhpSettingsMultiError) AllErrors() []error { return m }

// PhpSettingsValidationError is the validation error returned by
// PhpSettings.Validate if the designated constraints aren't met.
type PhpSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhpSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhpSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhpSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhpSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhpSettingsValidationError) ErrorName() string { return "PhpSettingsValidationError" }

// Error satisfies the builtin error interface
func (e PhpSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhpSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhpSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhpSettingsValidationError{}

// Validate checks the field values on PythonSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PythonSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PythonSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PythonSettingsMultiError,
// or nil if none found.
func (m *PythonSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *PythonSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PythonSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PythonSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PythonSettingsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExperimentalFeatures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PythonSettingsValidationError{
					field:  "ExperimentalFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PythonSettingsValidationError{
					field:  "ExperimentalFeatures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExperimentalFeatures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PythonSettingsValidationError{
				field:  "ExperimentalFeatures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PythonSettingsMultiError(errors)
	}

	return nil
}

// PythonSettingsMultiError is an error wrapping multiple validation errors
// returned by PythonSettings.ValidateAll() if the designated constraints
// aren't met.
type PythonSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PythonSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PythonSettingsMultiError) AllErrors() []error { return m }

// PythonSettingsValidationError is the validation error returned by
// PythonSettings.Validate if the designated constraints aren't met.
type PythonSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PythonSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PythonSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PythonSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PythonSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PythonSettingsValidationError) ErrorName() string { return "PythonSettingsValidationError" }

// Error satisfies the builtin error interface
func (e PythonSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPythonSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PythonSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PythonSettingsValidationError{}

// Validate checks the field values on NodeSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NodeSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NodeSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NodeSettingsMultiError, or
// nil if none found.
func (m *NodeSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *NodeSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NodeSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NodeSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NodeSettingsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NodeSettingsMultiError(errors)
	}

	return nil
}

// NodeSettingsMultiError is an error wrapping multiple validation errors
// returned by NodeSettings.ValidateAll() if the designated constraints aren't met.
type NodeSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NodeSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NodeSettingsMultiError) AllErrors() []error { return m }

// NodeSettingsValidationError is the validation error returned by
// NodeSettings.Validate if the designated constraints aren't met.
type NodeSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NodeSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NodeSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NodeSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NodeSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NodeSettingsValidationError) ErrorName() string { return "NodeSettingsValidationError" }

// Error satisfies the builtin error interface
func (e NodeSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNodeSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NodeSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NodeSettingsValidationError{}

// Validate checks the field values on DotnetSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DotnetSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DotnetSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DotnetSettingsMultiError,
// or nil if none found.
func (m *DotnetSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *DotnetSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DotnetSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DotnetSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DotnetSettingsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RenamedServices

	// no validation rules for RenamedResources

	if len(errors) > 0 {
		return DotnetSettingsMultiError(errors)
	}

	return nil
}

// DotnetSettingsMultiError is an error wrapping multiple validation errors
// returned by DotnetSettings.ValidateAll() if the designated constraints
// aren't met.
type DotnetSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DotnetSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DotnetSettingsMultiError) AllErrors() []error { return m }

// DotnetSettingsValidationError is the validation error returned by
// DotnetSettings.Validate if the designated constraints aren't met.
type DotnetSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DotnetSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DotnetSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DotnetSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DotnetSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DotnetSettingsValidationError) ErrorName() string { return "DotnetSettingsValidationError" }

// Error satisfies the builtin error interface
func (e DotnetSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDotnetSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DotnetSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DotnetSettingsValidationError{}

// Validate checks the field values on RubySettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RubySettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RubySettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RubySettingsMultiError, or
// nil if none found.
func (m *RubySettings) ValidateAll() error {
	return m.validate(true)
}

func (m *RubySettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RubySettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RubySettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RubySettingsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RubySettingsMultiError(errors)
	}

	return nil
}

// RubySettingsMultiError is an error wrapping multiple validation errors
// returned by RubySettings.ValidateAll() if the designated constraints aren't met.
type RubySettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RubySettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RubySettingsMultiError) AllErrors() []error { return m }

// RubySettingsValidationError is the validation error returned by
// RubySettings.Validate if the designated constraints aren't met.
type RubySettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RubySettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RubySettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RubySettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RubySettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RubySettingsValidationError) ErrorName() string { return "RubySettingsValidationError" }

// Error satisfies the builtin error interface
func (e RubySettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRubySettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RubySettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RubySettingsValidationError{}

// Validate checks the field values on GoSettings with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GoSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GoSettingsMultiError, or
// nil if none found.
func (m *GoSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *GoSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GoSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GoSettingsValidationError{
					field:  "Common",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GoSettingsValidationError{
				field:  "Common",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RenamedServices

	if len(errors) > 0 {
		return GoSettingsMultiError(errors)
	}

	return nil
}

// GoSettingsMultiError is an error wrapping multiple validation errors
// returned by GoSettings.ValidateAll() if the designated constraints aren't met.
type GoSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoSettingsMultiError) AllErrors() []error { return m }

// GoSettingsValidationError is the validation error returned by
// GoSettings.Validate if the designated constraints aren't met.
type GoSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoSettingsValidationError) ErrorName() string { return "GoSettingsValidationError" }

// Error satisfies the builtin error interface
func (e GoSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoSettingsValidationError{}

// Validate checks the field values on MethodSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MethodSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MethodSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MethodSettingsMultiError,
// or nil if none found.
func (m *MethodSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *MethodSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Selector

	if all {
		switch v := interface{}(m.GetLongRunning()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MethodSettingsValidationError{
					field:  "LongRunning",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MethodSettingsValidationError{
					field:  "LongRunning",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLongRunning()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MethodSettingsValidationError{
				field:  "LongRunning",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MethodSettingsMultiError(errors)
	}

	return nil
}

// MethodSettingsMultiError is an error wrapping multiple validation errors
// returned by MethodSettings.ValidateAll() if the designated constraints
// aren't met.
type MethodSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MethodSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MethodSettingsMultiError) AllErrors() []error { return m }

// MethodSettingsValidationError is the validation error returned by
// MethodSettings.Validate if the designated constraints aren't met.
type MethodSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MethodSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MethodSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MethodSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MethodSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MethodSettingsValidationError) ErrorName() string { return "MethodSettingsValidationError" }

// Error satisfies the builtin error interface
func (e MethodSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMethodSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MethodSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MethodSettingsValidationError{}

// Validate checks the field values on SelectiveGapicGeneration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelectiveGapicGeneration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelectiveGapicGeneration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelectiveGapicGenerationMultiError, or nil if none found.
func (m *SelectiveGapicGeneration) ValidateAll() error {
	return m.validate(true)
}

func (m *SelectiveGapicGeneration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GenerateOmittedAsInternal

	if len(errors) > 0 {
		return SelectiveGapicGenerationMultiError(errors)
	}

	return nil
}

// SelectiveGapicGenerationMultiError is an error wrapping multiple validation
// errors returned by SelectiveGapicGeneration.ValidateAll() if the designated
// constraints aren't met.
type SelectiveGapicGenerationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelectiveGapicGenerationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelectiveGapicGenerationMultiError) AllErrors() []error { return m }

// SelectiveGapicGenerationValidationError is the validation error returned by
// SelectiveGapicGeneration.Validate if the designated constraints aren't met.
type SelectiveGapicGenerationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelectiveGapicGenerationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelectiveGapicGenerationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelectiveGapicGenerationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelectiveGapicGenerationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelectiveGapicGenerationValidationError) ErrorName() string {
	return "SelectiveGapicGenerationValidationError"
}

// Error satisfies the builtin error interface
func (e SelectiveGapicGenerationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelectiveGapicGeneration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelectiveGapicGenerationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelectiveGapicGenerationValidationError{}

// Validate checks the field values on PythonSettings_ExperimentalFeatures with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PythonSettings_ExperimentalFeatures) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PythonSettings_ExperimentalFeatures
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PythonSettings_ExperimentalFeaturesMultiError, or nil if none found.
func (m *PythonSettings_ExperimentalFeatures) ValidateAll() error {
	return m.validate(true)
}

func (m *PythonSettings_ExperimentalFeatures) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RestAsyncIoEnabled

	// no validation rules for ProtobufPythonicTypesEnabled

	// no validation rules for UnversionedPackageDisabled

	if len(errors) > 0 {
		return PythonSettings_ExperimentalFeaturesMultiError(errors)
	}

	return nil
}

// PythonSettings_ExperimentalFeaturesMultiError is an error wrapping multiple
// validation errors returned by
// PythonSettings_ExperimentalFeatures.ValidateAll() if the designated
// constraints aren't met.
type PythonSettings_ExperimentalFeaturesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PythonSettings_ExperimentalFeaturesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PythonSettings_ExperimentalFeaturesMultiError) AllErrors() []error { return m }

// PythonSettings_ExperimentalFeaturesValidationError is the validation error
// returned by PythonSettings_ExperimentalFeatures.Validate if the designated
// constraints aren't met.
type PythonSettings_ExperimentalFeaturesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PythonSettings_ExperimentalFeaturesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PythonSettings_ExperimentalFeaturesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PythonSettings_ExperimentalFeaturesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PythonSettings_ExperimentalFeaturesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PythonSettings_ExperimentalFeaturesValidationError) ErrorName() string {
	return "PythonSettings_ExperimentalFeaturesValidationError"
}

// Error satisfies the builtin error interface
func (e PythonSettings_ExperimentalFeaturesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPythonSettings_ExperimentalFeatures.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PythonSettings_ExperimentalFeaturesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PythonSettings_ExperimentalFeaturesValidationError{}

// Validate checks the field values on MethodSettings_LongRunning with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MethodSettings_LongRunning) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MethodSettings_LongRunning with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MethodSettings_LongRunningMultiError, or nil if none found.
func (m *MethodSettings_LongRunning) ValidateAll() error {
	return m.validate(true)
}

func (m *MethodSettings_LongRunning) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInitialPollDelay()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MethodSettings_LongRunningValidationError{
					field:  "InitialPollDelay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MethodSettings_LongRunningValidationError{
					field:  "InitialPollDelay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInitialPollDelay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MethodSettings_LongRunningValidationError{
				field:  "InitialPollDelay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PollDelayMultiplier

	if all {
		switch v := interface{}(m.GetMaxPollDelay()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MethodSettings_LongRunningValidationError{
					field:  "MaxPollDelay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MethodSettings_LongRunningValidationError{
					field:  "MaxPollDelay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxPollDelay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MethodSettings_LongRunningValidationError{
				field:  "MaxPollDelay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTotalPollTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MethodSettings_LongRunningValidationError{
					field:  "TotalPollTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MethodSettings_LongRunningValidationError{
					field:  "TotalPollTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalPollTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MethodSettings_LongRunningValidationError{
				field:  "TotalPollTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MethodSettings_LongRunningMultiError(errors)
	}

	return nil
}

// MethodSettings_LongRunningMultiError is an error wrapping multiple
// validation errors returned by MethodSettings_LongRunning.ValidateAll() if
// the designated constraints aren't met.
type MethodSettings_LongRunningMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MethodSettings_LongRunningMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MethodSettings_LongRunningMultiError) AllErrors() []error { return m }

// MethodSettings_LongRunningValidationError is the validation error returned
// by MethodSettings_LongRunning.Validate if the designated constraints aren't met.
type MethodSettings_LongRunningValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MethodSettings_LongRunningValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MethodSettings_LongRunningValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MethodSettings_LongRunningValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MethodSettings_LongRunningValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MethodSettings_LongRunningValidationError) ErrorName() string {
	return "MethodSettings_LongRunningValidationError"
}

// Error satisfies the builtin error interface
func (e MethodSettings_LongRunningValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMethodSettings_LongRunning.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MethodSettings_LongRunningValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MethodSettings_LongRunningValidationError{}
