// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: google/api/monitored_resource.proto

package monitoredres

import (
	api "google.golang.org/genproto/googleapis/api"
	label "google.golang.org/genproto/googleapis/api/label"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An object that describes the schema of a
// [MonitoredResource][google.api.MonitoredResource] object using a type name
// and a set of labels.  For example, the monitored resource descriptor for
// Google Compute Engine VM instances has a type of
// `"gce_instance"` and specifies the use of the labels `"instance_id"` and
// `"zone"` to identify particular VM instances.
//
// Different APIs can support different monitored resource types. APIs generally
// provide a `list` method that returns the monitored resource descriptors used
// by the API.
type MonitoredResourceDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The resource name of the monitored resource descriptor:
	// `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where
	// {type} is the value of the `type` field in this object and
	// {project_id} is a project ID that provides API-specific context for
	// accessing the type.  APIs that do not use project information can use the
	// resource name format `"monitoredResourceDescriptors/{type}"`.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The monitored resource type. For example, the type
	// `"cloudsql_database"` represents databases in Google Cloud SQL.
	//
	//	For a list of types, see [Monitored resource
	//	types](https://cloud.google.com/monitoring/api/resources)
	//
	// and [Logging resource
	// types](https://cloud.google.com/logging/docs/api/v2/resource-list).
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. A concise name for the monitored resource type that might be
	// displayed in user interfaces. It should be a Title Cased Noun Phrase,
	// without any article or other determiners. For example,
	// `"Google Cloud SQL Database"`.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional. A detailed description of the monitored resource type that might
	// be used in documentation.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Required. A set of labels used to describe instances of this monitored
	// resource type. For example, an individual Google Cloud SQL database is
	// identified by values for the labels `"database_id"` and `"zone"`.
	Labels []*label.LabelDescriptor `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	// Optional. The launch stage of the monitored resource definition.
	LaunchStage   api.LaunchStage `protobuf:"varint,7,opt,name=launch_stage,json=launchStage,proto3,enum=google.api.LaunchStage" json:"launch_stage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitoredResourceDescriptor) Reset() {
	*x = MonitoredResourceDescriptor{}
	mi := &file_google_api_monitored_resource_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitoredResourceDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoredResourceDescriptor) ProtoMessage() {}

func (x *MonitoredResourceDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_google_api_monitored_resource_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoredResourceDescriptor.ProtoReflect.Descriptor instead.
func (*MonitoredResourceDescriptor) Descriptor() ([]byte, []int) {
	return file_google_api_monitored_resource_proto_rawDescGZIP(), []int{0}
}

func (x *MonitoredResourceDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MonitoredResourceDescriptor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MonitoredResourceDescriptor) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MonitoredResourceDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MonitoredResourceDescriptor) GetLabels() []*label.LabelDescriptor {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MonitoredResourceDescriptor) GetLaunchStage() api.LaunchStage {
	if x != nil {
		return x.LaunchStage
	}
	return api.LaunchStage(0)
}

// An object representing a resource that can be used for monitoring, logging,
// billing, or other purposes. Examples include virtual machine instances,
// databases, and storage devices such as disks. The `type` field identifies a
// [MonitoredResourceDescriptor][google.api.MonitoredResourceDescriptor] object
// that describes the resource's schema. Information in the `labels` field
// identifies the actual resource and its attributes according to the schema.
// For example, a particular Compute Engine VM instance could be represented by
// the following object, because the
// [MonitoredResourceDescriptor][google.api.MonitoredResourceDescriptor] for
// `"gce_instance"` has labels
// `"project_id"`, `"instance_id"` and `"zone"`:
//
//	{ "type": "gce_instance",
//	  "labels": { "project_id": "my-project",
//	              "instance_id": "12345678901234",
//	              "zone": "us-central1-a" }}
type MonitoredResource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The monitored resource type. This field must match
	// the `type` field of a
	// [MonitoredResourceDescriptor][google.api.MonitoredResourceDescriptor]
	// object. For example, the type of a Compute Engine VM instance is
	// `gce_instance`. Some descriptors include the service name in the type; for
	// example, the type of a Datastream stream is
	// `datastream.googleapis.com/Stream`.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Required. Values for all of the labels listed in the associated monitored
	// resource descriptor. For example, Compute Engine VM instances use the
	// labels `"project_id"`, `"instance_id"`, and `"zone"`.
	Labels        map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitoredResource) Reset() {
	*x = MonitoredResource{}
	mi := &file_google_api_monitored_resource_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitoredResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoredResource) ProtoMessage() {}

func (x *MonitoredResource) ProtoReflect() protoreflect.Message {
	mi := &file_google_api_monitored_resource_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoredResource.ProtoReflect.Descriptor instead.
func (*MonitoredResource) Descriptor() ([]byte, []int) {
	return file_google_api_monitored_resource_proto_rawDescGZIP(), []int{1}
}

func (x *MonitoredResource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MonitoredResource) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Auxiliary metadata for a [MonitoredResource][google.api.MonitoredResource]
// object. [MonitoredResource][google.api.MonitoredResource] objects contain the
// minimum set of information to uniquely identify a monitored resource
// instance. There is some other useful auxiliary metadata. Monitoring and
// Logging use an ingestion pipeline to extract metadata for cloud resources of
// all types, and store the metadata in this message.
type MonitoredResourceMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Output only. Values for predefined system metadata labels.
	// System labels are a kind of metadata extracted by Google, including
	// "machine_image", "vpc", "subnet_id",
	// "security_group", "name", etc.
	// System label values can be only strings, Boolean values, or a list of
	// strings. For example:
	//
	//	{ "name": "my-test-instance",
	//	  "security_group": ["a", "b", "c"],
	//	  "spot_instance": false }
	SystemLabels *structpb.Struct `protobuf:"bytes,1,opt,name=system_labels,json=systemLabels,proto3" json:"system_labels,omitempty"`
	// Output only. A map of user-defined metadata labels.
	UserLabels    map[string]string `protobuf:"bytes,2,rep,name=user_labels,json=userLabels,proto3" json:"user_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonitoredResourceMetadata) Reset() {
	*x = MonitoredResourceMetadata{}
	mi := &file_google_api_monitored_resource_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonitoredResourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoredResourceMetadata) ProtoMessage() {}

func (x *MonitoredResourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_api_monitored_resource_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoredResourceMetadata.ProtoReflect.Descriptor instead.
func (*MonitoredResourceMetadata) Descriptor() ([]byte, []int) {
	return file_google_api_monitored_resource_proto_rawDescGZIP(), []int{2}
}

func (x *MonitoredResourceMetadata) GetSystemLabels() *structpb.Struct {
	if x != nil {
		return x.SystemLabels
	}
	return nil
}

func (x *MonitoredResourceMetadata) GetUserLabels() map[string]string {
	if x != nil {
		return x.UserLabels
	}
	return nil
}

var File_google_api_monitored_resource_proto protoreflect.FileDescriptor

const file_google_api_monitored_resource_proto_rawDesc = "" +
	"\n" +
	"#google/api/monitored_resource.proto\x12\n" +
	"google.api\x1a\x16google/api/label.proto\x1a\x1dgoogle/api/launch_stage.proto\x1a\x1cgoogle/protobuf/struct.proto\"\xfb\x01\n" +
	"\x1bMonitoredResourceDescriptor\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x123\n" +
	"\x06labels\x18\x04 \x03(\v2\x1b.google.api.LabelDescriptorR\x06labels\x12:\n" +
	"\flaunch_stage\x18\a \x01(\x0e2\x17.google.api.LaunchStageR\vlaunchStage\"\xa5\x01\n" +
	"\x11MonitoredResource\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12A\n" +
	"\x06labels\x18\x02 \x03(\v2).google.api.MonitoredResource.LabelsEntryR\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf0\x01\n" +
	"\x19MonitoredResourceMetadata\x12<\n" +
	"\rsystem_labels\x18\x01 \x01(\v2\x17.google.protobuf.StructR\fsystemLabels\x12V\n" +
	"\vuser_labels\x18\x02 \x03(\v25.google.api.MonitoredResourceMetadata.UserLabelsEntryR\n" +
	"userLabels\x1a=\n" +
	"\x0fUserLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01Bv\n" +
	"\x0ecom.google.apiB\x16MonitoredResourceProtoP\x01ZCgoogle.golang.org/genproto/googleapis/api/monitoredres;monitoredres\xa2\x02\x04GAPIb\x06proto3"

var (
	file_google_api_monitored_resource_proto_rawDescOnce sync.Once
	file_google_api_monitored_resource_proto_rawDescData []byte
)

func file_google_api_monitored_resource_proto_rawDescGZIP() []byte {
	file_google_api_monitored_resource_proto_rawDescOnce.Do(func() {
		file_google_api_monitored_resource_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_google_api_monitored_resource_proto_rawDesc), len(file_google_api_monitored_resource_proto_rawDesc)))
	})
	return file_google_api_monitored_resource_proto_rawDescData
}

var file_google_api_monitored_resource_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_google_api_monitored_resource_proto_goTypes = []any{
	(*MonitoredResourceDescriptor)(nil), // 0: google.api.MonitoredResourceDescriptor
	(*MonitoredResource)(nil),           // 1: google.api.MonitoredResource
	(*MonitoredResourceMetadata)(nil),   // 2: google.api.MonitoredResourceMetadata
	nil,                                 // 3: google.api.MonitoredResource.LabelsEntry
	nil,                                 // 4: google.api.MonitoredResourceMetadata.UserLabelsEntry
	(*label.LabelDescriptor)(nil),       // 5: google.api.LabelDescriptor
	(api.LaunchStage)(0),                // 6: google.api.LaunchStage
	(*structpb.Struct)(nil),             // 7: google.protobuf.Struct
}
var file_google_api_monitored_resource_proto_depIdxs = []int32{
	5, // 0: google.api.MonitoredResourceDescriptor.labels:type_name -> google.api.LabelDescriptor
	6, // 1: google.api.MonitoredResourceDescriptor.launch_stage:type_name -> google.api.LaunchStage
	3, // 2: google.api.MonitoredResource.labels:type_name -> google.api.MonitoredResource.LabelsEntry
	7, // 3: google.api.MonitoredResourceMetadata.system_labels:type_name -> google.protobuf.Struct
	4, // 4: google.api.MonitoredResourceMetadata.user_labels:type_name -> google.api.MonitoredResourceMetadata.UserLabelsEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_google_api_monitored_resource_proto_init() }
func file_google_api_monitored_resource_proto_init() {
	if File_google_api_monitored_resource_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_google_api_monitored_resource_proto_rawDesc), len(file_google_api_monitored_resource_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_api_monitored_resource_proto_goTypes,
		DependencyIndexes: file_google_api_monitored_resource_proto_depIdxs,
		MessageInfos:      file_google_api_monitored_resource_proto_msgTypes,
	}.Build()
	File_google_api_monitored_resource_proto = out.File
	file_google_api_monitored_resource_proto_goTypes = nil
	file_google_api_monitored_resource_proto_depIdxs = nil
}
