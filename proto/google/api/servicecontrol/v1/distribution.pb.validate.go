// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/servicecontrol/v1/distribution.proto

package servicecontrolpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Distribution with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Distribution) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Distribution with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DistributionMultiError, or
// nil if none found.
func (m *Distribution) ValidateAll() error {
	return m.validate(true)
}

func (m *Distribution) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	// no validation rules for Mean

	// no validation rules for Minimum

	// no validation rules for Maximum

	// no validation rules for SumOfSquaredDeviation

	for idx, item := range m.GetExemplars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DistributionValidationError{
						field:  fmt.Sprintf("Exemplars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DistributionValidationError{
						field:  fmt.Sprintf("Exemplars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DistributionValidationError{
					field:  fmt.Sprintf("Exemplars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	switch v := m.BucketOption.(type) {
	case *Distribution_LinearBuckets_:
		if v == nil {
			err := DistributionValidationError{
				field:  "BucketOption",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLinearBuckets()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DistributionValidationError{
						field:  "LinearBuckets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DistributionValidationError{
						field:  "LinearBuckets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLinearBuckets()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DistributionValidationError{
					field:  "LinearBuckets",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Distribution_ExponentialBuckets_:
		if v == nil {
			err := DistributionValidationError{
				field:  "BucketOption",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExponentialBuckets()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DistributionValidationError{
						field:  "ExponentialBuckets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DistributionValidationError{
						field:  "ExponentialBuckets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExponentialBuckets()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DistributionValidationError{
					field:  "ExponentialBuckets",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Distribution_ExplicitBuckets_:
		if v == nil {
			err := DistributionValidationError{
				field:  "BucketOption",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExplicitBuckets()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DistributionValidationError{
						field:  "ExplicitBuckets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DistributionValidationError{
						field:  "ExplicitBuckets",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExplicitBuckets()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DistributionValidationError{
					field:  "ExplicitBuckets",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DistributionMultiError(errors)
	}

	return nil
}

// DistributionMultiError is an error wrapping multiple validation errors
// returned by Distribution.ValidateAll() if the designated constraints aren't met.
type DistributionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DistributionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DistributionMultiError) AllErrors() []error { return m }

// DistributionValidationError is the validation error returned by
// Distribution.Validate if the designated constraints aren't met.
type DistributionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributionValidationError) ErrorName() string { return "DistributionValidationError" }

// Error satisfies the builtin error interface
func (e DistributionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistribution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributionValidationError{}

// Validate checks the field values on Distribution_LinearBuckets with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Distribution_LinearBuckets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Distribution_LinearBuckets with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Distribution_LinearBucketsMultiError, or nil if none found.
func (m *Distribution_LinearBuckets) ValidateAll() error {
	return m.validate(true)
}

func (m *Distribution_LinearBuckets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumFiniteBuckets

	// no validation rules for Width

	// no validation rules for Offset

	if len(errors) > 0 {
		return Distribution_LinearBucketsMultiError(errors)
	}

	return nil
}

// Distribution_LinearBucketsMultiError is an error wrapping multiple
// validation errors returned by Distribution_LinearBuckets.ValidateAll() if
// the designated constraints aren't met.
type Distribution_LinearBucketsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Distribution_LinearBucketsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Distribution_LinearBucketsMultiError) AllErrors() []error { return m }

// Distribution_LinearBucketsValidationError is the validation error returned
// by Distribution_LinearBuckets.Validate if the designated constraints aren't met.
type Distribution_LinearBucketsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Distribution_LinearBucketsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Distribution_LinearBucketsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Distribution_LinearBucketsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Distribution_LinearBucketsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Distribution_LinearBucketsValidationError) ErrorName() string {
	return "Distribution_LinearBucketsValidationError"
}

// Error satisfies the builtin error interface
func (e Distribution_LinearBucketsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistribution_LinearBuckets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Distribution_LinearBucketsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Distribution_LinearBucketsValidationError{}

// Validate checks the field values on Distribution_ExponentialBuckets with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Distribution_ExponentialBuckets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Distribution_ExponentialBuckets with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Distribution_ExponentialBucketsMultiError, or nil if none found.
func (m *Distribution_ExponentialBuckets) ValidateAll() error {
	return m.validate(true)
}

func (m *Distribution_ExponentialBuckets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumFiniteBuckets

	// no validation rules for GrowthFactor

	// no validation rules for Scale

	if len(errors) > 0 {
		return Distribution_ExponentialBucketsMultiError(errors)
	}

	return nil
}

// Distribution_ExponentialBucketsMultiError is an error wrapping multiple
// validation errors returned by Distribution_ExponentialBuckets.ValidateAll()
// if the designated constraints aren't met.
type Distribution_ExponentialBucketsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Distribution_ExponentialBucketsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Distribution_ExponentialBucketsMultiError) AllErrors() []error { return m }

// Distribution_ExponentialBucketsValidationError is the validation error
// returned by Distribution_ExponentialBuckets.Validate if the designated
// constraints aren't met.
type Distribution_ExponentialBucketsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Distribution_ExponentialBucketsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Distribution_ExponentialBucketsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Distribution_ExponentialBucketsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Distribution_ExponentialBucketsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Distribution_ExponentialBucketsValidationError) ErrorName() string {
	return "Distribution_ExponentialBucketsValidationError"
}

// Error satisfies the builtin error interface
func (e Distribution_ExponentialBucketsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistribution_ExponentialBuckets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Distribution_ExponentialBucketsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Distribution_ExponentialBucketsValidationError{}

// Validate checks the field values on Distribution_ExplicitBuckets with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Distribution_ExplicitBuckets) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Distribution_ExplicitBuckets with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Distribution_ExplicitBucketsMultiError, or nil if none found.
func (m *Distribution_ExplicitBuckets) ValidateAll() error {
	return m.validate(true)
}

func (m *Distribution_ExplicitBuckets) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Distribution_ExplicitBucketsMultiError(errors)
	}

	return nil
}

// Distribution_ExplicitBucketsMultiError is an error wrapping multiple
// validation errors returned by Distribution_ExplicitBuckets.ValidateAll() if
// the designated constraints aren't met.
type Distribution_ExplicitBucketsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Distribution_ExplicitBucketsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Distribution_ExplicitBucketsMultiError) AllErrors() []error { return m }

// Distribution_ExplicitBucketsValidationError is the validation error returned
// by Distribution_ExplicitBuckets.Validate if the designated constraints
// aren't met.
type Distribution_ExplicitBucketsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Distribution_ExplicitBucketsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Distribution_ExplicitBucketsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Distribution_ExplicitBucketsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Distribution_ExplicitBucketsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Distribution_ExplicitBucketsValidationError) ErrorName() string {
	return "Distribution_ExplicitBucketsValidationError"
}

// Error satisfies the builtin error interface
func (e Distribution_ExplicitBucketsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistribution_ExplicitBuckets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Distribution_ExplicitBucketsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Distribution_ExplicitBucketsValidationError{}
