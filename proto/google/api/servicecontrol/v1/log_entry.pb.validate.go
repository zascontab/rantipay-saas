// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/servicecontrol/v1/log_entry.proto

package servicecontrolpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	ltype "google.golang.org/genproto/googleapis/logging/type"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = ltype.LogSeverity(0)
)

// Validate checks the field values on LogEntry with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogEntryMultiError, or nil
// if none found.
func (m *LogEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *LogEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogEntryValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogEntryValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogEntryValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Severity

	if all {
		switch v := interface{}(m.GetHttpRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogEntryValidationError{
					field:  "HttpRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogEntryValidationError{
					field:  "HttpRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttpRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogEntryValidationError{
				field:  "HttpRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Trace

	// no validation rules for InsertId

	// no validation rules for Labels

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogEntryValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogEntryValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogEntryValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSourceLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogEntryValidationError{
					field:  "SourceLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogEntryValidationError{
					field:  "SourceLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogEntryValidationError{
				field:  "SourceLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Payload.(type) {
	case *LogEntry_ProtoPayload:
		if v == nil {
			err := LogEntryValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProtoPayload()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogEntryValidationError{
						field:  "ProtoPayload",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogEntryValidationError{
						field:  "ProtoPayload",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProtoPayload()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogEntryValidationError{
					field:  "ProtoPayload",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LogEntry_TextPayload:
		if v == nil {
			err := LogEntryValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for TextPayload
	case *LogEntry_StructPayload:
		if v == nil {
			err := LogEntryValidationError{
				field:  "Payload",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStructPayload()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogEntryValidationError{
						field:  "StructPayload",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogEntryValidationError{
						field:  "StructPayload",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStructPayload()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogEntryValidationError{
					field:  "StructPayload",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LogEntryMultiError(errors)
	}

	return nil
}

// LogEntryMultiError is an error wrapping multiple validation errors returned
// by LogEntry.ValidateAll() if the designated constraints aren't met.
type LogEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogEntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogEntryMultiError) AllErrors() []error { return m }

// LogEntryValidationError is the validation error returned by
// LogEntry.Validate if the designated constraints aren't met.
type LogEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogEntryValidationError) ErrorName() string { return "LogEntryValidationError" }

// Error satisfies the builtin error interface
func (e LogEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogEntryValidationError{}

// Validate checks the field values on LogEntryOperation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LogEntryOperation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogEntryOperation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LogEntryOperationMultiError, or nil if none found.
func (m *LogEntryOperation) ValidateAll() error {
	return m.validate(true)
}

func (m *LogEntryOperation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Producer

	// no validation rules for First

	// no validation rules for Last

	if len(errors) > 0 {
		return LogEntryOperationMultiError(errors)
	}

	return nil
}

// LogEntryOperationMultiError is an error wrapping multiple validation errors
// returned by LogEntryOperation.ValidateAll() if the designated constraints
// aren't met.
type LogEntryOperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogEntryOperationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogEntryOperationMultiError) AllErrors() []error { return m }

// LogEntryOperationValidationError is the validation error returned by
// LogEntryOperation.Validate if the designated constraints aren't met.
type LogEntryOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogEntryOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogEntryOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogEntryOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogEntryOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogEntryOperationValidationError) ErrorName() string {
	return "LogEntryOperationValidationError"
}

// Error satisfies the builtin error interface
func (e LogEntryOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogEntryOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogEntryOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogEntryOperationValidationError{}

// Validate checks the field values on LogEntrySourceLocation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LogEntrySourceLocation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogEntrySourceLocation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LogEntrySourceLocationMultiError, or nil if none found.
func (m *LogEntrySourceLocation) ValidateAll() error {
	return m.validate(true)
}

func (m *LogEntrySourceLocation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for File

	// no validation rules for Line

	// no validation rules for Function

	if len(errors) > 0 {
		return LogEntrySourceLocationMultiError(errors)
	}

	return nil
}

// LogEntrySourceLocationMultiError is an error wrapping multiple validation
// errors returned by LogEntrySourceLocation.ValidateAll() if the designated
// constraints aren't met.
type LogEntrySourceLocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogEntrySourceLocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogEntrySourceLocationMultiError) AllErrors() []error { return m }

// LogEntrySourceLocationValidationError is the validation error returned by
// LogEntrySourceLocation.Validate if the designated constraints aren't met.
type LogEntrySourceLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogEntrySourceLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogEntrySourceLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogEntrySourceLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogEntrySourceLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogEntrySourceLocationValidationError) ErrorName() string {
	return "LogEntrySourceLocationValidationError"
}

// Error satisfies the builtin error interface
func (e LogEntrySourceLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogEntrySourceLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogEntrySourceLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogEntrySourceLocationValidationError{}
