// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: google/api/servicecontrol/v1/quota_controller.proto

package servicecontrolpb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQuotaControllerAllocateQuota = "/google.api.servicecontrol.v1.QuotaController/AllocateQuota"

type QuotaControllerHTTPServer interface {
	// AllocateQuota Attempts to allocate quota for the specified consumer. It should be called
	// before the operation is executed.
	//
	// This method requires the `servicemanagement.services.quota`
	// permission on the specified service. For more information, see
	// [Cloud IAM](https://cloud.google.com/iam).
	//
	// **NOTE:** The client **must** fail-open on server errors `INTERNAL`,
	// `UNKNOWN`, `DEADLINE_EXCEEDED`, and `UNAVAILABLE`. To ensure system
	// reliability, the server may inject these errors to prohibit any hard
	// dependency on the quota functionality.
	AllocateQuota(context.Context, *AllocateQuotaRequest) (*AllocateQuotaResponse, error)
}

func RegisterQuotaControllerHTTPServer(s *http.Server, srv QuotaControllerHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/services/{service_name}:allocateQuota", _QuotaController_AllocateQuota0_HTTP_Handler(srv))
}

func _QuotaController_AllocateQuota0_HTTP_Handler(srv QuotaControllerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AllocateQuotaRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuotaControllerAllocateQuota)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AllocateQuota(ctx, req.(*AllocateQuotaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllocateQuotaResponse)
		return ctx.Result(200, reply)
	}
}

type QuotaControllerHTTPClient interface {
	AllocateQuota(ctx context.Context, req *AllocateQuotaRequest, opts ...http.CallOption) (rsp *AllocateQuotaResponse, err error)
}

type QuotaControllerHTTPClientImpl struct {
	cc *http.Client
}

func NewQuotaControllerHTTPClient(client *http.Client) QuotaControllerHTTPClient {
	return &QuotaControllerHTTPClientImpl{client}
}

func (c *QuotaControllerHTTPClientImpl) AllocateQuota(ctx context.Context, in *AllocateQuotaRequest, opts ...http.CallOption) (*AllocateQuotaResponse, error) {
	var out AllocateQuotaResponse
	pattern := "/v1/services/{service_name}:allocateQuota"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuotaControllerAllocateQuota))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
