// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: google/api/servicecontrol/v1/service_controller.proto

package servicecontrolpb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceControllerCheck = "/google.api.servicecontrol.v1.ServiceController/Check"
const OperationServiceControllerReport = "/google.api.servicecontrol.v1.ServiceController/Report"

type ServiceControllerHTTPServer interface {
	// Check Checks whether an operation on a service should be allowed to proceed
	// based on the configuration of the service and related policies. It must be
	// called before the operation is executed.
	//
	// If feasible, the client should cache the check results and reuse them for
	// 60 seconds. In case of any server errors, the client should rely on the
	// cached results for much longer time to avoid outage.
	// WARNING: There is general 60s delay for the configuration and policy
	// propagation, therefore callers MUST NOT depend on the `Check` method having
	// the latest policy information.
	//
	// NOTE: the [CheckRequest][google.api.servicecontrol.v1.CheckRequest] has
	// the size limit (wire-format byte size) of 1MB.
	//
	// This method requires the `servicemanagement.services.check` permission
	// on the specified service. For more information, see
	// [Cloud IAM](https://cloud.google.com/iam).
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	// Report Reports operation results to Google Service Control, such as logs and
	// metrics. It should be called after an operation is completed.
	//
	// If feasible, the client should aggregate reporting data for up to 5
	// seconds to reduce API traffic. Limiting aggregation to 5 seconds is to
	// reduce data loss during client crashes. Clients should carefully choose
	// the aggregation time window to avoid data loss risk more than 0.01%
	// for business and compliance reasons.
	//
	// NOTE: the [ReportRequest][google.api.servicecontrol.v1.ReportRequest] has
	// the size limit (wire-format byte size) of 1MB.
	//
	// This method requires the `servicemanagement.services.report` permission
	// on the specified service. For more information, see
	// [Google Cloud IAM](https://cloud.google.com/iam).
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
}

func RegisterServiceControllerHTTPServer(s *http.Server, srv ServiceControllerHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/services/{service_name}:check", _ServiceController_Check0_HTTP_Handler(srv))
	r.POST("/v1/services/{service_name}:report", _ServiceController_Report0_HTTP_Handler(srv))
}

func _ServiceController_Check0_HTTP_Handler(srv ServiceControllerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceControllerCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Check(ctx, req.(*CheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _ServiceController_Report0_HTTP_Handler(srv ServiceControllerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReportRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceControllerReport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Report(ctx, req.(*ReportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReportResponse)
		return ctx.Result(200, reply)
	}
}

type ServiceControllerHTTPClient interface {
	Check(ctx context.Context, req *CheckRequest, opts ...http.CallOption) (rsp *CheckResponse, err error)
	Report(ctx context.Context, req *ReportRequest, opts ...http.CallOption) (rsp *ReportResponse, err error)
}

type ServiceControllerHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceControllerHTTPClient(client *http.Client) ServiceControllerHTTPClient {
	return &ServiceControllerHTTPClientImpl{client}
}

func (c *ServiceControllerHTTPClientImpl) Check(ctx context.Context, in *CheckRequest, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/v1/services/{service_name}:check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceControllerCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceControllerHTTPClientImpl) Report(ctx context.Context, in *ReportRequest, opts ...http.CallOption) (*ReportResponse, error) {
	var out ReportResponse
	pattern := "/v1/services/{service_name}:report"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceControllerReport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
