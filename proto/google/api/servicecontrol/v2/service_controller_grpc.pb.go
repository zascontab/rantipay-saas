// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: google/api/servicecontrol/v2/service_controller.proto

package servicecontrol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceController_Check_FullMethodName  = "/google.api.servicecontrol.v2.ServiceController/Check"
	ServiceController_Report_FullMethodName = "/google.api.servicecontrol.v2.ServiceController/Report"
)

// ServiceControllerClient is the client API for ServiceController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// [Service Control API
// v2](https://cloud.google.com/service-infrastructure/docs/service-control/access-control)
//
// Private Preview. This feature is only available for approved services.
//
// This API provides admission control and telemetry reporting for services
// that are integrated with [Service
// Infrastructure](https://cloud.google.com/service-infrastructure).
type ServiceControllerClient interface {
	// Private Preview. This feature is only available for approved services.
	//
	// This method provides admission control for services that are integrated
	// with [Service
	// Infrastructure](https://cloud.google.com/service-infrastructure). It checks
	// whether an operation should be allowed based on the service configuration
	// and relevant policies. It must be called before the operation is executed.
	// For more information, see
	// [Admission
	// Control](https://cloud.google.com/service-infrastructure/docs/admission-control).
	//
	// NOTE: The admission control has an expected policy propagation delay of
	// 60s. The caller **must** not depend on the most recent policy changes.
	//
	// NOTE: The admission control has a hard limit of 1 referenced resources
	// per call. If an operation refers to more than 1 resources, the caller
	// must call the Check method multiple times.
	//
	// This method requires the `servicemanagement.services.check` permission
	// on the specified service. For more information, see
	// [Service Control API Access
	// Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	// Private Preview. This feature is only available for approved services.
	//
	// This method provides telemetry reporting for services that are integrated
	// with [Service
	// Infrastructure](https://cloud.google.com/service-infrastructure). It
	// reports a list of operations that have occurred on a service. It must be
	// called after the operations have been executed. For more information, see
	// [Telemetry
	// Reporting](https://cloud.google.com/service-infrastructure/docs/telemetry-reporting).
	//
	// NOTE: The telemetry reporting has a hard limit of 1000 operations and 1MB
	// per Report call. It is recommended to have no more than 100 operations per
	// call.
	//
	// This method requires the `servicemanagement.services.report` permission
	// on the specified service. For more information, see
	// [Service Control API Access
	// Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
}

type serviceControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceControllerClient(cc grpc.ClientConnInterface) ServiceControllerClient {
	return &serviceControllerClient{cc}
}

func (c *serviceControllerClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, ServiceController_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceControllerClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, ServiceController_Report_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceControllerServer is the server API for ServiceController service.
// All implementations should embed UnimplementedServiceControllerServer
// for forward compatibility.
//
// [Service Control API
// v2](https://cloud.google.com/service-infrastructure/docs/service-control/access-control)
//
// Private Preview. This feature is only available for approved services.
//
// This API provides admission control and telemetry reporting for services
// that are integrated with [Service
// Infrastructure](https://cloud.google.com/service-infrastructure).
type ServiceControllerServer interface {
	// Private Preview. This feature is only available for approved services.
	//
	// This method provides admission control for services that are integrated
	// with [Service
	// Infrastructure](https://cloud.google.com/service-infrastructure). It checks
	// whether an operation should be allowed based on the service configuration
	// and relevant policies. It must be called before the operation is executed.
	// For more information, see
	// [Admission
	// Control](https://cloud.google.com/service-infrastructure/docs/admission-control).
	//
	// NOTE: The admission control has an expected policy propagation delay of
	// 60s. The caller **must** not depend on the most recent policy changes.
	//
	// NOTE: The admission control has a hard limit of 1 referenced resources
	// per call. If an operation refers to more than 1 resources, the caller
	// must call the Check method multiple times.
	//
	// This method requires the `servicemanagement.services.check` permission
	// on the specified service. For more information, see
	// [Service Control API Access
	// Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	// Private Preview. This feature is only available for approved services.
	//
	// This method provides telemetry reporting for services that are integrated
	// with [Service
	// Infrastructure](https://cloud.google.com/service-infrastructure). It
	// reports a list of operations that have occurred on a service. It must be
	// called after the operations have been executed. For more information, see
	// [Telemetry
	// Reporting](https://cloud.google.com/service-infrastructure/docs/telemetry-reporting).
	//
	// NOTE: The telemetry reporting has a hard limit of 1000 operations and 1MB
	// per Report call. It is recommended to have no more than 100 operations per
	// call.
	//
	// This method requires the `servicemanagement.services.report` permission
	// on the specified service. For more information, see
	// [Service Control API Access
	// Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
}

// UnimplementedServiceControllerServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceControllerServer struct{}

func (UnimplementedServiceControllerServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedServiceControllerServer) Report(context.Context, *ReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedServiceControllerServer) testEmbeddedByValue() {}

// UnsafeServiceControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceControllerServer will
// result in compilation errors.
type UnsafeServiceControllerServer interface {
	mustEmbedUnimplementedServiceControllerServer()
}

func RegisterServiceControllerServer(s grpc.ServiceRegistrar, srv ServiceControllerServer) {
	// If the following call pancis, it indicates UnimplementedServiceControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceController_ServiceDesc, srv)
}

func _ServiceController_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceController_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceControllerServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceController_Report_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceControllerServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceController_ServiceDesc is the grpc.ServiceDesc for ServiceController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.api.servicecontrol.v2.ServiceController",
	HandlerType: (*ServiceControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _ServiceController_Check_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _ServiceController_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/api/servicecontrol/v2/service_controller.proto",
}
