// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: google/api/servicecontrol/v2/service_controller.proto

package servicecontrol

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceControllerCheck = "/google.api.servicecontrol.v2.ServiceController/Check"
const OperationServiceControllerReport = "/google.api.servicecontrol.v2.ServiceController/Report"

type ServiceControllerHTTPServer interface {
	// Check Private Preview. This feature is only available for approved services.
	//
	// This method provides admission control for services that are integrated
	// with [Service
	// Infrastructure](https://cloud.google.com/service-infrastructure). It checks
	// whether an operation should be allowed based on the service configuration
	// and relevant policies. It must be called before the operation is executed.
	// For more information, see
	// [Admission
	// Control](https://cloud.google.com/service-infrastructure/docs/admission-control).
	//
	// NOTE: The admission control has an expected policy propagation delay of
	// 60s. The caller **must** not depend on the most recent policy changes.
	//
	// NOTE: The admission control has a hard limit of 1 referenced resources
	// per call. If an operation refers to more than 1 resources, the caller
	// must call the Check method multiple times.
	//
	// This method requires the `servicemanagement.services.check` permission
	// on the specified service. For more information, see
	// [Service Control API Access
	// Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	// Report Private Preview. This feature is only available for approved services.
	//
	// This method provides telemetry reporting for services that are integrated
	// with [Service
	// Infrastructure](https://cloud.google.com/service-infrastructure). It
	// reports a list of operations that have occurred on a service. It must be
	// called after the operations have been executed. For more information, see
	// [Telemetry
	// Reporting](https://cloud.google.com/service-infrastructure/docs/telemetry-reporting).
	//
	// NOTE: The telemetry reporting has a hard limit of 1000 operations and 1MB
	// per Report call. It is recommended to have no more than 100 operations per
	// call.
	//
	// This method requires the `servicemanagement.services.report` permission
	// on the specified service. For more information, see
	// [Service Control API Access
	// Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
	Report(context.Context, *ReportRequest) (*ReportResponse, error)
}

func RegisterServiceControllerHTTPServer(s *http.Server, srv ServiceControllerHTTPServer) {
	r := s.Route("/")
	r.POST("/v2/services/{service_name}:check", _ServiceController_Check0_HTTP_Handler(srv))
	r.POST("/v2/services/{service_name}:report", _ServiceController_Report0_HTTP_Handler(srv))
}

func _ServiceController_Check0_HTTP_Handler(srv ServiceControllerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceControllerCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Check(ctx, req.(*CheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckResponse)
		return ctx.Result(200, reply)
	}
}

func _ServiceController_Report0_HTTP_Handler(srv ServiceControllerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReportRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceControllerReport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Report(ctx, req.(*ReportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReportResponse)
		return ctx.Result(200, reply)
	}
}

type ServiceControllerHTTPClient interface {
	Check(ctx context.Context, req *CheckRequest, opts ...http.CallOption) (rsp *CheckResponse, err error)
	Report(ctx context.Context, req *ReportRequest, opts ...http.CallOption) (rsp *ReportResponse, err error)
}

type ServiceControllerHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceControllerHTTPClient(client *http.Client) ServiceControllerHTTPClient {
	return &ServiceControllerHTTPClientImpl{client}
}

func (c *ServiceControllerHTTPClientImpl) Check(ctx context.Context, in *CheckRequest, opts ...http.CallOption) (*CheckResponse, error) {
	var out CheckResponse
	pattern := "/v2/services/{service_name}:check"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceControllerCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceControllerHTTPClientImpl) Report(ctx context.Context, in *ReportRequest, opts ...http.CallOption) (*ReportResponse, error) {
	var out ReportResponse
	pattern := "/v2/services/{service_name}:report"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceControllerReport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
