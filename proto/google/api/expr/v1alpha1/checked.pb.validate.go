// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/expr/v1alpha1/checked.proto

package expr

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	structpb "google.golang.org/protobuf/types/known/structpb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = structpb.NullValue(0)
)

// Validate checks the field values on CheckedExpr with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckedExpr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckedExpr with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckedExprMultiError, or
// nil if none found.
func (m *CheckedExpr) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckedExpr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]int64, len(m.GetReferenceMap()))
		i := 0
		for key := range m.GetReferenceMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetReferenceMap()[key]
			_ = val

			// no validation rules for ReferenceMap[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CheckedExprValidationError{
							field:  fmt.Sprintf("ReferenceMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CheckedExprValidationError{
							field:  fmt.Sprintf("ReferenceMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CheckedExprValidationError{
						field:  fmt.Sprintf("ReferenceMap[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]int64, len(m.GetTypeMap()))
		i := 0
		for key := range m.GetTypeMap() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTypeMap()[key]
			_ = val

			// no validation rules for TypeMap[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CheckedExprValidationError{
							field:  fmt.Sprintf("TypeMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CheckedExprValidationError{
							field:  fmt.Sprintf("TypeMap[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CheckedExprValidationError{
						field:  fmt.Sprintf("TypeMap[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetSourceInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckedExprValidationError{
					field:  "SourceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckedExprValidationError{
					field:  "SourceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckedExprValidationError{
				field:  "SourceInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ExprVersion

	if all {
		switch v := interface{}(m.GetExpr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckedExprValidationError{
					field:  "Expr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckedExprValidationError{
					field:  "Expr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckedExprValidationError{
				field:  "Expr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CheckedExprMultiError(errors)
	}

	return nil
}

// CheckedExprMultiError is an error wrapping multiple validation errors
// returned by CheckedExpr.ValidateAll() if the designated constraints aren't met.
type CheckedExprMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckedExprMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckedExprMultiError) AllErrors() []error { return m }

// CheckedExprValidationError is the validation error returned by
// CheckedExpr.Validate if the designated constraints aren't met.
type CheckedExprValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckedExprValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckedExprValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckedExprValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckedExprValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckedExprValidationError) ErrorName() string { return "CheckedExprValidationError" }

// Error satisfies the builtin error interface
func (e CheckedExprValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckedExpr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckedExprValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckedExprValidationError{}

// Validate checks the field values on Type with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Type with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TypeMultiError, or nil if none found.
func (m *Type) ValidateAll() error {
	return m.validate(true)
}

func (m *Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.TypeKind.(type) {
	case *Type_Dyn:
		if v == nil {
			err := TypeValidationError{
				field:  "TypeKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDyn()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "Dyn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "Dyn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDyn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TypeValidationError{
					field:  "Dyn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Type_Null:
		if v == nil {
			err := TypeValidationError{
				field:  "TypeKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Null
	case *Type_Primitive:
		if v == nil {
			err := TypeValidationError{
				field:  "TypeKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Primitive
	case *Type_Wrapper:
		if v == nil {
			err := TypeValidationError{
				field:  "TypeKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Wrapper
	case *Type_WellKnown:
		if v == nil {
			err := TypeValidationError{
				field:  "TypeKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for WellKnown
	case *Type_ListType_:
		if v == nil {
			err := TypeValidationError{
				field:  "TypeKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "ListType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "ListType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TypeValidationError{
					field:  "ListType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Type_MapType_:
		if v == nil {
			err := TypeValidationError{
				field:  "TypeKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMapType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "MapType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "MapType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMapType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TypeValidationError{
					field:  "MapType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Type_Function:
		if v == nil {
			err := TypeValidationError{
				field:  "TypeKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFunction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "Function",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "Function",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFunction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TypeValidationError{
					field:  "Function",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Type_MessageType:
		if v == nil {
			err := TypeValidationError{
				field:  "TypeKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for MessageType
	case *Type_TypeParam:
		if v == nil {
			err := TypeValidationError{
				field:  "TypeKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for TypeParam
	case *Type_Type:
		if v == nil {
			err := TypeValidationError{
				field:  "TypeKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "Type",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "Type",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TypeValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Type_Error:
		if v == nil {
			err := TypeValidationError{
				field:  "TypeKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TypeValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Type_AbstractType_:
		if v == nil {
			err := TypeValidationError{
				field:  "TypeKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAbstractType()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "AbstractType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TypeValidationError{
						field:  "AbstractType",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAbstractType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TypeValidationError{
					field:  "AbstractType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TypeMultiError(errors)
	}

	return nil
}

// TypeMultiError is an error wrapping multiple validation errors returned by
// Type.ValidateAll() if the designated constraints aren't met.
type TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TypeMultiError) AllErrors() []error { return m }

// TypeValidationError is the validation error returned by Type.Validate if the
// designated constraints aren't met.
type TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypeValidationError) ErrorName() string { return "TypeValidationError" }

// Error satisfies the builtin error interface
func (e TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypeValidationError{}

// Validate checks the field values on Decl with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Decl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Decl with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeclMultiError, or nil if none found.
func (m *Decl) ValidateAll() error {
	return m.validate(true)
}

func (m *Decl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	switch v := m.DeclKind.(type) {
	case *Decl_Ident:
		if v == nil {
			err := DeclValidationError{
				field:  "DeclKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetIdent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeclValidationError{
						field:  "Ident",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeclValidationError{
						field:  "Ident",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeclValidationError{
					field:  "Ident",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Decl_Function:
		if v == nil {
			err := DeclValidationError{
				field:  "DeclKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFunction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeclValidationError{
						field:  "Function",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeclValidationError{
						field:  "Function",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFunction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeclValidationError{
					field:  "Function",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DeclMultiError(errors)
	}

	return nil
}

// DeclMultiError is an error wrapping multiple validation errors returned by
// Decl.ValidateAll() if the designated constraints aren't met.
type DeclMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeclMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeclMultiError) AllErrors() []error { return m }

// DeclValidationError is the validation error returned by Decl.Validate if the
// designated constraints aren't met.
type DeclValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeclValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeclValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeclValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeclValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeclValidationError) ErrorName() string { return "DeclValidationError" }

// Error satisfies the builtin error interface
func (e DeclValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeclValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeclValidationError{}

// Validate checks the field values on Reference with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Reference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Reference with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReferenceMultiError, or nil
// if none found.
func (m *Reference) ValidateAll() error {
	return m.validate(true)
}

func (m *Reference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReferenceValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReferenceValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReferenceValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReferenceMultiError(errors)
	}

	return nil
}

// ReferenceMultiError is an error wrapping multiple validation errors returned
// by Reference.ValidateAll() if the designated constraints aren't met.
type ReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReferenceMultiError) AllErrors() []error { return m }

// ReferenceValidationError is the validation error returned by
// Reference.Validate if the designated constraints aren't met.
type ReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReferenceValidationError) ErrorName() string { return "ReferenceValidationError" }

// Error satisfies the builtin error interface
func (e ReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReferenceValidationError{}

// Validate checks the field values on Type_ListType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Type_ListType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Type_ListType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Type_ListTypeMultiError, or
// nil if none found.
func (m *Type_ListType) ValidateAll() error {
	return m.validate(true)
}

func (m *Type_ListType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetElemType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Type_ListTypeValidationError{
					field:  "ElemType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Type_ListTypeValidationError{
					field:  "ElemType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetElemType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Type_ListTypeValidationError{
				field:  "ElemType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Type_ListTypeMultiError(errors)
	}

	return nil
}

// Type_ListTypeMultiError is an error wrapping multiple validation errors
// returned by Type_ListType.ValidateAll() if the designated constraints
// aren't met.
type Type_ListTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Type_ListTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Type_ListTypeMultiError) AllErrors() []error { return m }

// Type_ListTypeValidationError is the validation error returned by
// Type_ListType.Validate if the designated constraints aren't met.
type Type_ListTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Type_ListTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Type_ListTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Type_ListTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Type_ListTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Type_ListTypeValidationError) ErrorName() string { return "Type_ListTypeValidationError" }

// Error satisfies the builtin error interface
func (e Type_ListTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sType_ListType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Type_ListTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Type_ListTypeValidationError{}

// Validate checks the field values on Type_MapType with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Type_MapType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Type_MapType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Type_MapTypeMultiError, or
// nil if none found.
func (m *Type_MapType) ValidateAll() error {
	return m.validate(true)
}

func (m *Type_MapType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKeyType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Type_MapTypeValidationError{
					field:  "KeyType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Type_MapTypeValidationError{
					field:  "KeyType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKeyType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Type_MapTypeValidationError{
				field:  "KeyType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValueType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Type_MapTypeValidationError{
					field:  "ValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Type_MapTypeValidationError{
					field:  "ValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValueType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Type_MapTypeValidationError{
				field:  "ValueType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Type_MapTypeMultiError(errors)
	}

	return nil
}

// Type_MapTypeMultiError is an error wrapping multiple validation errors
// returned by Type_MapType.ValidateAll() if the designated constraints aren't met.
type Type_MapTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Type_MapTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Type_MapTypeMultiError) AllErrors() []error { return m }

// Type_MapTypeValidationError is the validation error returned by
// Type_MapType.Validate if the designated constraints aren't met.
type Type_MapTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Type_MapTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Type_MapTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Type_MapTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Type_MapTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Type_MapTypeValidationError) ErrorName() string { return "Type_MapTypeValidationError" }

// Error satisfies the builtin error interface
func (e Type_MapTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sType_MapType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Type_MapTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Type_MapTypeValidationError{}

// Validate checks the field values on Type_FunctionType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Type_FunctionType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Type_FunctionType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Type_FunctionTypeMultiError, or nil if none found.
func (m *Type_FunctionType) ValidateAll() error {
	return m.validate(true)
}

func (m *Type_FunctionType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResultType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Type_FunctionTypeValidationError{
					field:  "ResultType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Type_FunctionTypeValidationError{
					field:  "ResultType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResultType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Type_FunctionTypeValidationError{
				field:  "ResultType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetArgTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Type_FunctionTypeValidationError{
						field:  fmt.Sprintf("ArgTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Type_FunctionTypeValidationError{
						field:  fmt.Sprintf("ArgTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Type_FunctionTypeValidationError{
					field:  fmt.Sprintf("ArgTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Type_FunctionTypeMultiError(errors)
	}

	return nil
}

// Type_FunctionTypeMultiError is an error wrapping multiple validation errors
// returned by Type_FunctionType.ValidateAll() if the designated constraints
// aren't met.
type Type_FunctionTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Type_FunctionTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Type_FunctionTypeMultiError) AllErrors() []error { return m }

// Type_FunctionTypeValidationError is the validation error returned by
// Type_FunctionType.Validate if the designated constraints aren't met.
type Type_FunctionTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Type_FunctionTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Type_FunctionTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Type_FunctionTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Type_FunctionTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Type_FunctionTypeValidationError) ErrorName() string {
	return "Type_FunctionTypeValidationError"
}

// Error satisfies the builtin error interface
func (e Type_FunctionTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sType_FunctionType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Type_FunctionTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Type_FunctionTypeValidationError{}

// Validate checks the field values on Type_AbstractType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Type_AbstractType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Type_AbstractType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Type_AbstractTypeMultiError, or nil if none found.
func (m *Type_AbstractType) ValidateAll() error {
	return m.validate(true)
}

func (m *Type_AbstractType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetParameterTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Type_AbstractTypeValidationError{
						field:  fmt.Sprintf("ParameterTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Type_AbstractTypeValidationError{
						field:  fmt.Sprintf("ParameterTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Type_AbstractTypeValidationError{
					field:  fmt.Sprintf("ParameterTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Type_AbstractTypeMultiError(errors)
	}

	return nil
}

// Type_AbstractTypeMultiError is an error wrapping multiple validation errors
// returned by Type_AbstractType.ValidateAll() if the designated constraints
// aren't met.
type Type_AbstractTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Type_AbstractTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Type_AbstractTypeMultiError) AllErrors() []error { return m }

// Type_AbstractTypeValidationError is the validation error returned by
// Type_AbstractType.Validate if the designated constraints aren't met.
type Type_AbstractTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Type_AbstractTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Type_AbstractTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Type_AbstractTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Type_AbstractTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Type_AbstractTypeValidationError) ErrorName() string {
	return "Type_AbstractTypeValidationError"
}

// Error satisfies the builtin error interface
func (e Type_AbstractTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sType_AbstractType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Type_AbstractTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Type_AbstractTypeValidationError{}

// Validate checks the field values on Decl_IdentDecl with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Decl_IdentDecl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Decl_IdentDecl with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Decl_IdentDeclMultiError,
// or nil if none found.
func (m *Decl_IdentDecl) ValidateAll() error {
	return m.validate(true)
}

func (m *Decl_IdentDecl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Decl_IdentDeclValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Decl_IdentDeclValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Decl_IdentDeclValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Decl_IdentDeclValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Decl_IdentDeclValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Decl_IdentDeclValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Doc

	if len(errors) > 0 {
		return Decl_IdentDeclMultiError(errors)
	}

	return nil
}

// Decl_IdentDeclMultiError is an error wrapping multiple validation errors
// returned by Decl_IdentDecl.ValidateAll() if the designated constraints
// aren't met.
type Decl_IdentDeclMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Decl_IdentDeclMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Decl_IdentDeclMultiError) AllErrors() []error { return m }

// Decl_IdentDeclValidationError is the validation error returned by
// Decl_IdentDecl.Validate if the designated constraints aren't met.
type Decl_IdentDeclValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Decl_IdentDeclValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Decl_IdentDeclValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Decl_IdentDeclValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Decl_IdentDeclValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Decl_IdentDeclValidationError) ErrorName() string { return "Decl_IdentDeclValidationError" }

// Error satisfies the builtin error interface
func (e Decl_IdentDeclValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecl_IdentDecl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Decl_IdentDeclValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Decl_IdentDeclValidationError{}

// Validate checks the field values on Decl_FunctionDecl with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Decl_FunctionDecl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Decl_FunctionDecl with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Decl_FunctionDeclMultiError, or nil if none found.
func (m *Decl_FunctionDecl) ValidateAll() error {
	return m.validate(true)
}

func (m *Decl_FunctionDecl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOverloads() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Decl_FunctionDeclValidationError{
						field:  fmt.Sprintf("Overloads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Decl_FunctionDeclValidationError{
						field:  fmt.Sprintf("Overloads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Decl_FunctionDeclValidationError{
					field:  fmt.Sprintf("Overloads[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Decl_FunctionDeclMultiError(errors)
	}

	return nil
}

// Decl_FunctionDeclMultiError is an error wrapping multiple validation errors
// returned by Decl_FunctionDecl.ValidateAll() if the designated constraints
// aren't met.
type Decl_FunctionDeclMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Decl_FunctionDeclMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Decl_FunctionDeclMultiError) AllErrors() []error { return m }

// Decl_FunctionDeclValidationError is the validation error returned by
// Decl_FunctionDecl.Validate if the designated constraints aren't met.
type Decl_FunctionDeclValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Decl_FunctionDeclValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Decl_FunctionDeclValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Decl_FunctionDeclValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Decl_FunctionDeclValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Decl_FunctionDeclValidationError) ErrorName() string {
	return "Decl_FunctionDeclValidationError"
}

// Error satisfies the builtin error interface
func (e Decl_FunctionDeclValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecl_FunctionDecl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Decl_FunctionDeclValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Decl_FunctionDeclValidationError{}

// Validate checks the field values on Decl_FunctionDecl_Overload with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Decl_FunctionDecl_Overload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Decl_FunctionDecl_Overload with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Decl_FunctionDecl_OverloadMultiError, or nil if none found.
func (m *Decl_FunctionDecl_Overload) ValidateAll() error {
	return m.validate(true)
}

func (m *Decl_FunctionDecl_Overload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OverloadId

	for idx, item := range m.GetParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Decl_FunctionDecl_OverloadValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Decl_FunctionDecl_OverloadValidationError{
						field:  fmt.Sprintf("Params[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Decl_FunctionDecl_OverloadValidationError{
					field:  fmt.Sprintf("Params[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetResultType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Decl_FunctionDecl_OverloadValidationError{
					field:  "ResultType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Decl_FunctionDecl_OverloadValidationError{
					field:  "ResultType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResultType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Decl_FunctionDecl_OverloadValidationError{
				field:  "ResultType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsInstanceFunction

	// no validation rules for Doc

	if len(errors) > 0 {
		return Decl_FunctionDecl_OverloadMultiError(errors)
	}

	return nil
}

// Decl_FunctionDecl_OverloadMultiError is an error wrapping multiple
// validation errors returned by Decl_FunctionDecl_Overload.ValidateAll() if
// the designated constraints aren't met.
type Decl_FunctionDecl_OverloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Decl_FunctionDecl_OverloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Decl_FunctionDecl_OverloadMultiError) AllErrors() []error { return m }

// Decl_FunctionDecl_OverloadValidationError is the validation error returned
// by Decl_FunctionDecl_Overload.Validate if the designated constraints aren't met.
type Decl_FunctionDecl_OverloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Decl_FunctionDecl_OverloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Decl_FunctionDecl_OverloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Decl_FunctionDecl_OverloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Decl_FunctionDecl_OverloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Decl_FunctionDecl_OverloadValidationError) ErrorName() string {
	return "Decl_FunctionDecl_OverloadValidationError"
}

// Error satisfies the builtin error interface
func (e Decl_FunctionDecl_OverloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecl_FunctionDecl_Overload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Decl_FunctionDecl_OverloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Decl_FunctionDecl_OverloadValidationError{}
