// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/expr/v1alpha1/value.proto

package expr

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	structpb "google.golang.org/protobuf/types/known/structpb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = structpb.NullValue(0)
)

// Validate checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Value) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ValueMultiError, or nil if none found.
func (m *Value) ValidateAll() error {
	return m.validate(true)
}

func (m *Value) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Kind.(type) {
	case *Value_NullValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for NullValue
	case *Value_BoolValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BoolValue
	case *Value_Int64Value:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Int64Value
	case *Value_Uint64Value:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Uint64Value
	case *Value_DoubleValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for DoubleValue
	case *Value_StringValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StringValue
	case *Value_BytesValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BytesValue
	case *Value_EnumValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetEnumValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "EnumValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "EnumValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEnumValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "EnumValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_ObjectValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetObjectValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "ObjectValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "ObjectValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObjectValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "ObjectValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_MapValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMapValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "MapValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "MapValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMapValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "MapValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_ListValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "ListValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "ListValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "ListValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_TypeValue:
		if v == nil {
			err := ValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for TypeValue
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ValueMultiError(errors)
	}

	return nil
}

// ValueMultiError is an error wrapping multiple validation errors returned by
// Value.ValidateAll() if the designated constraints aren't met.
type ValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValueMultiError) AllErrors() []error { return m }

// ValueValidationError is the validation error returned by Value.Validate if
// the designated constraints aren't met.
type ValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValueValidationError) ErrorName() string { return "ValueValidationError" }

// Error satisfies the builtin error interface
func (e ValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValueValidationError{}

// Validate checks the field values on EnumValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EnumValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnumValueMultiError, or nil
// if none found.
func (m *EnumValue) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Value

	if len(errors) > 0 {
		return EnumValueMultiError(errors)
	}

	return nil
}

// EnumValueMultiError is an error wrapping multiple validation errors returned
// by EnumValue.ValidateAll() if the designated constraints aren't met.
type EnumValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnumValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnumValueMultiError) AllErrors() []error { return m }

// EnumValueValidationError is the validation error returned by
// EnumValue.Validate if the designated constraints aren't met.
type EnumValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnumValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnumValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnumValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnumValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnumValueValidationError) ErrorName() string { return "EnumValueValidationError" }

// Error satisfies the builtin error interface
func (e EnumValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnumValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnumValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnumValueValidationError{}

// Validate checks the field values on ListValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListValueMultiError, or nil
// if none found.
func (m *ListValue) ValidateAll() error {
	return m.validate(true)
}

func (m *ListValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListValueValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListValueValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListValueValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListValueMultiError(errors)
	}

	return nil
}

// ListValueMultiError is an error wrapping multiple validation errors returned
// by ListValue.ValidateAll() if the designated constraints aren't met.
type ListValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListValueMultiError) AllErrors() []error { return m }

// ListValueValidationError is the validation error returned by
// ListValue.Validate if the designated constraints aren't met.
type ListValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListValueValidationError) ErrorName() string { return "ListValueValidationError" }

// Error satisfies the builtin error interface
func (e ListValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListValueValidationError{}

// Validate checks the field values on MapValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapValueMultiError, or nil
// if none found.
func (m *MapValue) ValidateAll() error {
	return m.validate(true)
}

func (m *MapValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MapValueValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MapValueValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MapValueValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MapValueMultiError(errors)
	}

	return nil
}

// MapValueMultiError is an error wrapping multiple validation errors returned
// by MapValue.ValidateAll() if the designated constraints aren't met.
type MapValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MapValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MapValueMultiError) AllErrors() []error { return m }

// MapValueValidationError is the validation error returned by
// MapValue.Validate if the designated constraints aren't met.
type MapValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapValueValidationError) ErrorName() string { return "MapValueValidationError" }

// Error satisfies the builtin error interface
func (e MapValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapValueValidationError{}

// Validate checks the field values on MapValue_Entry with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapValue_Entry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapValue_Entry with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MapValue_EntryMultiError,
// or nil if none found.
func (m *MapValue_Entry) ValidateAll() error {
	return m.validate(true)
}

func (m *MapValue_Entry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MapValue_EntryValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MapValue_EntryValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MapValue_EntryValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MapValue_EntryValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MapValue_EntryValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MapValue_EntryValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MapValue_EntryMultiError(errors)
	}

	return nil
}

// MapValue_EntryMultiError is an error wrapping multiple validation errors
// returned by MapValue_Entry.ValidateAll() if the designated constraints
// aren't met.
type MapValue_EntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MapValue_EntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MapValue_EntryMultiError) AllErrors() []error { return m }

// MapValue_EntryValidationError is the validation error returned by
// MapValue_Entry.Validate if the designated constraints aren't met.
type MapValue_EntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapValue_EntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapValue_EntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapValue_EntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapValue_EntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapValue_EntryValidationError) ErrorName() string { return "MapValue_EntryValidationError" }

// Error satisfies the builtin error interface
func (e MapValue_EntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapValue_Entry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapValue_EntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapValue_EntryValidationError{}
