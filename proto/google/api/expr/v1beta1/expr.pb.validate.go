// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/expr/v1beta1/expr.proto

package expr

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	structpb "google.golang.org/protobuf/types/known/structpb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = structpb.NullValue(0)
)

// Validate checks the field values on ParsedExpr with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParsedExpr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParsedExpr with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParsedExprMultiError, or
// nil if none found.
func (m *ParsedExpr) ValidateAll() error {
	return m.validate(true)
}

func (m *ParsedExpr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParsedExprValidationError{
					field:  "Expr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParsedExprValidationError{
					field:  "Expr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParsedExprValidationError{
				field:  "Expr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSourceInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParsedExprValidationError{
					field:  "SourceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParsedExprValidationError{
					field:  "SourceInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParsedExprValidationError{
				field:  "SourceInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SyntaxVersion

	if len(errors) > 0 {
		return ParsedExprMultiError(errors)
	}

	return nil
}

// ParsedExprMultiError is an error wrapping multiple validation errors
// returned by ParsedExpr.ValidateAll() if the designated constraints aren't met.
type ParsedExprMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParsedExprMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParsedExprMultiError) AllErrors() []error { return m }

// ParsedExprValidationError is the validation error returned by
// ParsedExpr.Validate if the designated constraints aren't met.
type ParsedExprValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParsedExprValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParsedExprValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParsedExprValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParsedExprValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParsedExprValidationError) ErrorName() string { return "ParsedExprValidationError" }

// Error satisfies the builtin error interface
func (e ParsedExprValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParsedExpr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParsedExprValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParsedExprValidationError{}

// Validate checks the field values on Expr with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Expr) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expr with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ExprMultiError, or nil if none found.
func (m *Expr) ValidateAll() error {
	return m.validate(true)
}

func (m *Expr) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	switch v := m.ExprKind.(type) {
	case *Expr_LiteralExpr:
		if v == nil {
			err := ExprValidationError{
				field:  "ExprKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLiteralExpr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "LiteralExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "LiteralExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLiteralExpr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExprValidationError{
					field:  "LiteralExpr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Expr_IdentExpr:
		if v == nil {
			err := ExprValidationError{
				field:  "ExprKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetIdentExpr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "IdentExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "IdentExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdentExpr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExprValidationError{
					field:  "IdentExpr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Expr_SelectExpr:
		if v == nil {
			err := ExprValidationError{
				field:  "ExprKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSelectExpr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "SelectExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "SelectExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSelectExpr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExprValidationError{
					field:  "SelectExpr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Expr_CallExpr:
		if v == nil {
			err := ExprValidationError{
				field:  "ExprKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCallExpr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "CallExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "CallExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCallExpr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExprValidationError{
					field:  "CallExpr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Expr_ListExpr:
		if v == nil {
			err := ExprValidationError{
				field:  "ExprKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetListExpr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "ListExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "ListExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetListExpr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExprValidationError{
					field:  "ListExpr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Expr_StructExpr:
		if v == nil {
			err := ExprValidationError{
				field:  "ExprKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStructExpr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "StructExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "StructExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStructExpr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExprValidationError{
					field:  "StructExpr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Expr_ComprehensionExpr:
		if v == nil {
			err := ExprValidationError{
				field:  "ExprKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetComprehensionExpr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "ComprehensionExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExprValidationError{
						field:  "ComprehensionExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetComprehensionExpr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExprValidationError{
					field:  "ComprehensionExpr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ExprMultiError(errors)
	}

	return nil
}

// ExprMultiError is an error wrapping multiple validation errors returned by
// Expr.ValidateAll() if the designated constraints aren't met.
type ExprMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExprMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExprMultiError) AllErrors() []error { return m }

// ExprValidationError is the validation error returned by Expr.Validate if the
// designated constraints aren't met.
type ExprValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExprValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExprValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExprValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExprValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExprValidationError) ErrorName() string { return "ExprValidationError" }

// Error satisfies the builtin error interface
func (e ExprValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpr.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExprValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExprValidationError{}

// Validate checks the field values on Literal with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Literal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Literal with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LiteralMultiError, or nil if none found.
func (m *Literal) ValidateAll() error {
	return m.validate(true)
}

func (m *Literal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.ConstantKind.(type) {
	case *Literal_NullValue:
		if v == nil {
			err := LiteralValidationError{
				field:  "ConstantKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for NullValue
	case *Literal_BoolValue:
		if v == nil {
			err := LiteralValidationError{
				field:  "ConstantKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BoolValue
	case *Literal_Int64Value:
		if v == nil {
			err := LiteralValidationError{
				field:  "ConstantKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Int64Value
	case *Literal_Uint64Value:
		if v == nil {
			err := LiteralValidationError{
				field:  "ConstantKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Uint64Value
	case *Literal_DoubleValue:
		if v == nil {
			err := LiteralValidationError{
				field:  "ConstantKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for DoubleValue
	case *Literal_StringValue:
		if v == nil {
			err := LiteralValidationError{
				field:  "ConstantKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for StringValue
	case *Literal_BytesValue:
		if v == nil {
			err := LiteralValidationError{
				field:  "ConstantKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for BytesValue
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LiteralMultiError(errors)
	}

	return nil
}

// LiteralMultiError is an error wrapping multiple validation errors returned
// by Literal.ValidateAll() if the designated constraints aren't met.
type LiteralMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LiteralMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LiteralMultiError) AllErrors() []error { return m }

// LiteralValidationError is the validation error returned by Literal.Validate
// if the designated constraints aren't met.
type LiteralValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiteralValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiteralValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiteralValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiteralValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiteralValidationError) ErrorName() string { return "LiteralValidationError" }

// Error satisfies the builtin error interface
func (e LiteralValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiteral.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiteralValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiteralValidationError{}

// Validate checks the field values on Expr_Ident with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Expr_Ident) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expr_Ident with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Expr_IdentMultiError, or
// nil if none found.
func (m *Expr_Ident) ValidateAll() error {
	return m.validate(true)
}

func (m *Expr_Ident) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return Expr_IdentMultiError(errors)
	}

	return nil
}

// Expr_IdentMultiError is an error wrapping multiple validation errors
// returned by Expr_Ident.ValidateAll() if the designated constraints aren't met.
type Expr_IdentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Expr_IdentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Expr_IdentMultiError) AllErrors() []error { return m }

// Expr_IdentValidationError is the validation error returned by
// Expr_Ident.Validate if the designated constraints aren't met.
type Expr_IdentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Expr_IdentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Expr_IdentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Expr_IdentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Expr_IdentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Expr_IdentValidationError) ErrorName() string { return "Expr_IdentValidationError" }

// Error satisfies the builtin error interface
func (e Expr_IdentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpr_Ident.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Expr_IdentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Expr_IdentValidationError{}

// Validate checks the field values on Expr_Select with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Expr_Select) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expr_Select with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Expr_SelectMultiError, or
// nil if none found.
func (m *Expr_Select) ValidateAll() error {
	return m.validate(true)
}

func (m *Expr_Select) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Expr_SelectValidationError{
					field:  "Operand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Expr_SelectValidationError{
					field:  "Operand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Expr_SelectValidationError{
				field:  "Operand",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Field

	// no validation rules for TestOnly

	if len(errors) > 0 {
		return Expr_SelectMultiError(errors)
	}

	return nil
}

// Expr_SelectMultiError is an error wrapping multiple validation errors
// returned by Expr_Select.ValidateAll() if the designated constraints aren't met.
type Expr_SelectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Expr_SelectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Expr_SelectMultiError) AllErrors() []error { return m }

// Expr_SelectValidationError is the validation error returned by
// Expr_Select.Validate if the designated constraints aren't met.
type Expr_SelectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Expr_SelectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Expr_SelectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Expr_SelectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Expr_SelectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Expr_SelectValidationError) ErrorName() string { return "Expr_SelectValidationError" }

// Error satisfies the builtin error interface
func (e Expr_SelectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpr_Select.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Expr_SelectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Expr_SelectValidationError{}

// Validate checks the field values on Expr_Call with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Expr_Call) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expr_Call with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Expr_CallMultiError, or nil
// if none found.
func (m *Expr_Call) ValidateAll() error {
	return m.validate(true)
}

func (m *Expr_Call) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTarget()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Expr_CallValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Expr_CallValidationError{
					field:  "Target",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTarget()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Expr_CallValidationError{
				field:  "Target",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Function

	for idx, item := range m.GetArgs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Expr_CallValidationError{
						field:  fmt.Sprintf("Args[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Expr_CallValidationError{
						field:  fmt.Sprintf("Args[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Expr_CallValidationError{
					field:  fmt.Sprintf("Args[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Expr_CallMultiError(errors)
	}

	return nil
}

// Expr_CallMultiError is an error wrapping multiple validation errors returned
// by Expr_Call.ValidateAll() if the designated constraints aren't met.
type Expr_CallMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Expr_CallMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Expr_CallMultiError) AllErrors() []error { return m }

// Expr_CallValidationError is the validation error returned by
// Expr_Call.Validate if the designated constraints aren't met.
type Expr_CallValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Expr_CallValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Expr_CallValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Expr_CallValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Expr_CallValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Expr_CallValidationError) ErrorName() string { return "Expr_CallValidationError" }

// Error satisfies the builtin error interface
func (e Expr_CallValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpr_Call.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Expr_CallValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Expr_CallValidationError{}

// Validate checks the field values on Expr_CreateList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Expr_CreateList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expr_CreateList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Expr_CreateListMultiError, or nil if none found.
func (m *Expr_CreateList) ValidateAll() error {
	return m.validate(true)
}

func (m *Expr_CreateList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetElements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Expr_CreateListValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Expr_CreateListValidationError{
						field:  fmt.Sprintf("Elements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Expr_CreateListValidationError{
					field:  fmt.Sprintf("Elements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Expr_CreateListMultiError(errors)
	}

	return nil
}

// Expr_CreateListMultiError is an error wrapping multiple validation errors
// returned by Expr_CreateList.ValidateAll() if the designated constraints
// aren't met.
type Expr_CreateListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Expr_CreateListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Expr_CreateListMultiError) AllErrors() []error { return m }

// Expr_CreateListValidationError is the validation error returned by
// Expr_CreateList.Validate if the designated constraints aren't met.
type Expr_CreateListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Expr_CreateListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Expr_CreateListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Expr_CreateListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Expr_CreateListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Expr_CreateListValidationError) ErrorName() string { return "Expr_CreateListValidationError" }

// Error satisfies the builtin error interface
func (e Expr_CreateListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpr_CreateList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Expr_CreateListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Expr_CreateListValidationError{}

// Validate checks the field values on Expr_CreateStruct with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Expr_CreateStruct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expr_CreateStruct with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Expr_CreateStructMultiError, or nil if none found.
func (m *Expr_CreateStruct) ValidateAll() error {
	return m.validate(true)
}

func (m *Expr_CreateStruct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Expr_CreateStructValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Expr_CreateStructValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Expr_CreateStructValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Expr_CreateStructMultiError(errors)
	}

	return nil
}

// Expr_CreateStructMultiError is an error wrapping multiple validation errors
// returned by Expr_CreateStruct.ValidateAll() if the designated constraints
// aren't met.
type Expr_CreateStructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Expr_CreateStructMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Expr_CreateStructMultiError) AllErrors() []error { return m }

// Expr_CreateStructValidationError is the validation error returned by
// Expr_CreateStruct.Validate if the designated constraints aren't met.
type Expr_CreateStructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Expr_CreateStructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Expr_CreateStructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Expr_CreateStructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Expr_CreateStructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Expr_CreateStructValidationError) ErrorName() string {
	return "Expr_CreateStructValidationError"
}

// Error satisfies the builtin error interface
func (e Expr_CreateStructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpr_CreateStruct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Expr_CreateStructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Expr_CreateStructValidationError{}

// Validate checks the field values on Expr_Comprehension with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Expr_Comprehension) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expr_Comprehension with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Expr_ComprehensionMultiError, or nil if none found.
func (m *Expr_Comprehension) ValidateAll() error {
	return m.validate(true)
}

func (m *Expr_Comprehension) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IterVar

	if all {
		switch v := interface{}(m.GetIterRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Expr_ComprehensionValidationError{
					field:  "IterRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Expr_ComprehensionValidationError{
					field:  "IterRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIterRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Expr_ComprehensionValidationError{
				field:  "IterRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccuVar

	if all {
		switch v := interface{}(m.GetAccuInit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Expr_ComprehensionValidationError{
					field:  "AccuInit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Expr_ComprehensionValidationError{
					field:  "AccuInit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccuInit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Expr_ComprehensionValidationError{
				field:  "AccuInit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLoopCondition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Expr_ComprehensionValidationError{
					field:  "LoopCondition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Expr_ComprehensionValidationError{
					field:  "LoopCondition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoopCondition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Expr_ComprehensionValidationError{
				field:  "LoopCondition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLoopStep()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Expr_ComprehensionValidationError{
					field:  "LoopStep",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Expr_ComprehensionValidationError{
					field:  "LoopStep",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoopStep()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Expr_ComprehensionValidationError{
				field:  "LoopStep",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Expr_ComprehensionValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Expr_ComprehensionValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Expr_ComprehensionValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Expr_ComprehensionMultiError(errors)
	}

	return nil
}

// Expr_ComprehensionMultiError is an error wrapping multiple validation errors
// returned by Expr_Comprehension.ValidateAll() if the designated constraints
// aren't met.
type Expr_ComprehensionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Expr_ComprehensionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Expr_ComprehensionMultiError) AllErrors() []error { return m }

// Expr_ComprehensionValidationError is the validation error returned by
// Expr_Comprehension.Validate if the designated constraints aren't met.
type Expr_ComprehensionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Expr_ComprehensionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Expr_ComprehensionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Expr_ComprehensionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Expr_ComprehensionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Expr_ComprehensionValidationError) ErrorName() string {
	return "Expr_ComprehensionValidationError"
}

// Error satisfies the builtin error interface
func (e Expr_ComprehensionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpr_Comprehension.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Expr_ComprehensionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Expr_ComprehensionValidationError{}

// Validate checks the field values on Expr_CreateStruct_Entry with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Expr_CreateStruct_Entry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expr_CreateStruct_Entry with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Expr_CreateStruct_EntryMultiError, or nil if none found.
func (m *Expr_CreateStruct_Entry) ValidateAll() error {
	return m.validate(true)
}

func (m *Expr_CreateStruct_Entry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Expr_CreateStruct_EntryValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Expr_CreateStruct_EntryValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Expr_CreateStruct_EntryValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.KeyKind.(type) {
	case *Expr_CreateStruct_Entry_FieldKey:
		if v == nil {
			err := Expr_CreateStruct_EntryValidationError{
				field:  "KeyKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for FieldKey
	case *Expr_CreateStruct_Entry_MapKey:
		if v == nil {
			err := Expr_CreateStruct_EntryValidationError{
				field:  "KeyKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMapKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Expr_CreateStruct_EntryValidationError{
						field:  "MapKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Expr_CreateStruct_EntryValidationError{
						field:  "MapKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMapKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Expr_CreateStruct_EntryValidationError{
					field:  "MapKey",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return Expr_CreateStruct_EntryMultiError(errors)
	}

	return nil
}

// Expr_CreateStruct_EntryMultiError is an error wrapping multiple validation
// errors returned by Expr_CreateStruct_Entry.ValidateAll() if the designated
// constraints aren't met.
type Expr_CreateStruct_EntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Expr_CreateStruct_EntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Expr_CreateStruct_EntryMultiError) AllErrors() []error { return m }

// Expr_CreateStruct_EntryValidationError is the validation error returned by
// Expr_CreateStruct_Entry.Validate if the designated constraints aren't met.
type Expr_CreateStruct_EntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Expr_CreateStruct_EntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Expr_CreateStruct_EntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Expr_CreateStruct_EntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Expr_CreateStruct_EntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Expr_CreateStruct_EntryValidationError) ErrorName() string {
	return "Expr_CreateStruct_EntryValidationError"
}

// Error satisfies the builtin error interface
func (e Expr_CreateStruct_EntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpr_CreateStruct_Entry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Expr_CreateStruct_EntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Expr_CreateStruct_EntryValidationError{}
