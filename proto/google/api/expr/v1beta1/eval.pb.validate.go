// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/expr/v1beta1/eval.proto

package expr

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EvalState with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EvalState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvalState with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EvalStateMultiError, or nil
// if none found.
func (m *EvalState) ValidateAll() error {
	return m.validate(true)
}

func (m *EvalState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvalStateValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvalStateValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvalStateValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvalStateValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvalStateValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvalStateValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EvalStateMultiError(errors)
	}

	return nil
}

// EvalStateMultiError is an error wrapping multiple validation errors returned
// by EvalState.ValidateAll() if the designated constraints aren't met.
type EvalStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvalStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvalStateMultiError) AllErrors() []error { return m }

// EvalStateValidationError is the validation error returned by
// EvalState.Validate if the designated constraints aren't met.
type EvalStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvalStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvalStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvalStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvalStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvalStateValidationError) ErrorName() string { return "EvalStateValidationError" }

// Error satisfies the builtin error interface
func (e EvalStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvalState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvalStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvalStateValidationError{}

// Validate checks the field values on ExprValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExprValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExprValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExprValueMultiError, or nil
// if none found.
func (m *ExprValue) ValidateAll() error {
	return m.validate(true)
}

func (m *ExprValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Kind.(type) {
	case *ExprValue_Value:
		if v == nil {
			err := ExprValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExprValueValidationError{
						field:  "Value",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExprValueValidationError{
						field:  "Value",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExprValueValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExprValue_Error:
		if v == nil {
			err := ExprValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetError()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExprValueValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExprValueValidationError{
						field:  "Error",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExprValueValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ExprValue_Unknown:
		if v == nil {
			err := ExprValueValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUnknown()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExprValueValidationError{
						field:  "Unknown",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExprValueValidationError{
						field:  "Unknown",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnknown()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExprValueValidationError{
					field:  "Unknown",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ExprValueMultiError(errors)
	}

	return nil
}

// ExprValueMultiError is an error wrapping multiple validation errors returned
// by ExprValue.ValidateAll() if the designated constraints aren't met.
type ExprValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExprValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExprValueMultiError) AllErrors() []error { return m }

// ExprValueValidationError is the validation error returned by
// ExprValue.Validate if the designated constraints aren't met.
type ExprValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExprValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExprValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExprValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExprValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExprValueValidationError) ErrorName() string { return "ExprValueValidationError" }

// Error satisfies the builtin error interface
func (e ExprValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExprValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExprValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExprValueValidationError{}

// Validate checks the field values on ErrorSet with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorSet with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorSetMultiError, or nil
// if none found.
func (m *ErrorSet) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ErrorSetValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ErrorSetValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorSetValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ErrorSetMultiError(errors)
	}

	return nil
}

// ErrorSetMultiError is an error wrapping multiple validation errors returned
// by ErrorSet.ValidateAll() if the designated constraints aren't met.
type ErrorSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorSetMultiError) AllErrors() []error { return m }

// ErrorSetValidationError is the validation error returned by
// ErrorSet.Validate if the designated constraints aren't met.
type ErrorSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorSetValidationError) ErrorName() string { return "ErrorSetValidationError" }

// Error satisfies the builtin error interface
func (e ErrorSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorSetValidationError{}

// Validate checks the field values on UnknownSet with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnknownSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnknownSet with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnknownSetMultiError, or
// nil if none found.
func (m *UnknownSet) ValidateAll() error {
	return m.validate(true)
}

func (m *UnknownSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExprs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnknownSetValidationError{
						field:  fmt.Sprintf("Exprs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnknownSetValidationError{
						field:  fmt.Sprintf("Exprs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnknownSetValidationError{
					field:  fmt.Sprintf("Exprs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnknownSetMultiError(errors)
	}

	return nil
}

// UnknownSetMultiError is an error wrapping multiple validation errors
// returned by UnknownSet.ValidateAll() if the designated constraints aren't met.
type UnknownSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnknownSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnknownSetMultiError) AllErrors() []error { return m }

// UnknownSetValidationError is the validation error returned by
// UnknownSet.Validate if the designated constraints aren't met.
type UnknownSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnknownSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnknownSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnknownSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnknownSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnknownSetValidationError) ErrorName() string { return "UnknownSetValidationError" }

// Error satisfies the builtin error interface
func (e UnknownSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnknownSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnknownSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnknownSetValidationError{}

// Validate checks the field values on IdRef with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdRef) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdRef with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdRefMultiError, or nil if none found.
func (m *IdRef) ValidateAll() error {
	return m.validate(true)
}

func (m *IdRef) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return IdRefMultiError(errors)
	}

	return nil
}

// IdRefMultiError is an error wrapping multiple validation errors returned by
// IdRef.ValidateAll() if the designated constraints aren't met.
type IdRefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdRefMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdRefMultiError) AllErrors() []error { return m }

// IdRefValidationError is the validation error returned by IdRef.Validate if
// the designated constraints aren't met.
type IdRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdRefValidationError) ErrorName() string { return "IdRefValidationError" }

// Error satisfies the builtin error interface
func (e IdRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdRefValidationError{}

// Validate checks the field values on EvalState_Result with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EvalState_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvalState_Result with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EvalState_ResultMultiError, or nil if none found.
func (m *EvalState_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *EvalState_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EvalState_ResultValidationError{
					field:  "Expr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EvalState_ResultValidationError{
					field:  "Expr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EvalState_ResultValidationError{
				field:  "Expr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Value

	if len(errors) > 0 {
		return EvalState_ResultMultiError(errors)
	}

	return nil
}

// EvalState_ResultMultiError is an error wrapping multiple validation errors
// returned by EvalState_Result.ValidateAll() if the designated constraints
// aren't met.
type EvalState_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvalState_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvalState_ResultMultiError) AllErrors() []error { return m }

// EvalState_ResultValidationError is the validation error returned by
// EvalState_Result.Validate if the designated constraints aren't met.
type EvalState_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvalState_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvalState_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvalState_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvalState_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvalState_ResultValidationError) ErrorName() string { return "EvalState_ResultValidationError" }

// Error satisfies the builtin error interface
func (e EvalState_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvalState_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvalState_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvalState_ResultValidationError{}
