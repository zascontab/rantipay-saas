// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/expr/v1beta1/decl.proto

package expr

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Decl with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Decl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Decl with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DeclMultiError, or nil if none found.
func (m *Decl) ValidateAll() error {
	return m.validate(true)
}

func (m *Decl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Doc

	switch v := m.Kind.(type) {
	case *Decl_Ident:
		if v == nil {
			err := DeclValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetIdent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeclValidationError{
						field:  "Ident",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeclValidationError{
						field:  "Ident",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIdent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeclValidationError{
					field:  "Ident",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Decl_Function:
		if v == nil {
			err := DeclValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFunction()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeclValidationError{
						field:  "Function",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeclValidationError{
						field:  "Function",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFunction()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeclValidationError{
					field:  "Function",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DeclMultiError(errors)
	}

	return nil
}

// DeclMultiError is an error wrapping multiple validation errors returned by
// Decl.ValidateAll() if the designated constraints aren't met.
type DeclMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeclMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeclMultiError) AllErrors() []error { return m }

// DeclValidationError is the validation error returned by Decl.Validate if the
// designated constraints aren't met.
type DeclValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeclValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeclValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeclValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeclValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeclValidationError) ErrorName() string { return "DeclValidationError" }

// Error satisfies the builtin error interface
func (e DeclValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeclValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeclValidationError{}

// Validate checks the field values on DeclType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeclType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeclType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeclTypeMultiError, or nil
// if none found.
func (m *DeclType) ValidateAll() error {
	return m.validate(true)
}

func (m *DeclType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	for idx, item := range m.GetTypeParams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeclTypeValidationError{
						field:  fmt.Sprintf("TypeParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeclTypeValidationError{
						field:  fmt.Sprintf("TypeParams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeclTypeValidationError{
					field:  fmt.Sprintf("TypeParams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeclTypeMultiError(errors)
	}

	return nil
}

// DeclTypeMultiError is an error wrapping multiple validation errors returned
// by DeclType.ValidateAll() if the designated constraints aren't met.
type DeclTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeclTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeclTypeMultiError) AllErrors() []error { return m }

// DeclTypeValidationError is the validation error returned by
// DeclType.Validate if the designated constraints aren't met.
type DeclTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeclTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeclTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeclTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeclTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeclTypeValidationError) ErrorName() string { return "DeclTypeValidationError" }

// Error satisfies the builtin error interface
func (e DeclTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeclType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeclTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeclTypeValidationError{}

// Validate checks the field values on IdentDecl with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IdentDecl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentDecl with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IdentDeclMultiError, or nil
// if none found.
func (m *IdentDecl) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentDecl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IdentDeclValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IdentDeclValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdentDeclValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IdentDeclValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IdentDeclValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IdentDeclValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IdentDeclMultiError(errors)
	}

	return nil
}

// IdentDeclMultiError is an error wrapping multiple validation errors returned
// by IdentDecl.ValidateAll() if the designated constraints aren't met.
type IdentDeclMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentDeclMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentDeclMultiError) AllErrors() []error { return m }

// IdentDeclValidationError is the validation error returned by
// IdentDecl.Validate if the designated constraints aren't met.
type IdentDeclValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentDeclValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentDeclValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentDeclValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentDeclValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentDeclValidationError) ErrorName() string { return "IdentDeclValidationError" }

// Error satisfies the builtin error interface
func (e IdentDeclValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentDecl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentDeclValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentDeclValidationError{}

// Validate checks the field values on FunctionDecl with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FunctionDecl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FunctionDecl with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FunctionDeclMultiError, or
// nil if none found.
func (m *FunctionDecl) ValidateAll() error {
	return m.validate(true)
}

func (m *FunctionDecl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetArgs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FunctionDeclValidationError{
						field:  fmt.Sprintf("Args[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FunctionDeclValidationError{
						field:  fmt.Sprintf("Args[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FunctionDeclValidationError{
					field:  fmt.Sprintf("Args[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetReturnType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FunctionDeclValidationError{
					field:  "ReturnType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FunctionDeclValidationError{
					field:  "ReturnType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReturnType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FunctionDeclValidationError{
				field:  "ReturnType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ReceiverFunction

	if len(errors) > 0 {
		return FunctionDeclMultiError(errors)
	}

	return nil
}

// FunctionDeclMultiError is an error wrapping multiple validation errors
// returned by FunctionDecl.ValidateAll() if the designated constraints aren't met.
type FunctionDeclMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FunctionDeclMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FunctionDeclMultiError) AllErrors() []error { return m }

// FunctionDeclValidationError is the validation error returned by
// FunctionDecl.Validate if the designated constraints aren't met.
type FunctionDeclValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FunctionDeclValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FunctionDeclValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FunctionDeclValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FunctionDeclValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FunctionDeclValidationError) ErrorName() string { return "FunctionDeclValidationError" }

// Error satisfies the builtin error interface
func (e FunctionDeclValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFunctionDecl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FunctionDeclValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FunctionDeclValidationError{}
