// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/expr/conformance/v1alpha1/conformance_service.proto

package confpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ParseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParseRequestMultiError, or
// nil if none found.
func (m *ParseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CelSource

	// no validation rules for SyntaxVersion

	// no validation rules for SourceLocation

	// no validation rules for DisableMacros

	if len(errors) > 0 {
		return ParseRequestMultiError(errors)
	}

	return nil
}

// ParseRequestMultiError is an error wrapping multiple validation errors
// returned by ParseRequest.ValidateAll() if the designated constraints aren't met.
type ParseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseRequestMultiError) AllErrors() []error { return m }

// ParseRequestValidationError is the validation error returned by
// ParseRequest.Validate if the designated constraints aren't met.
type ParseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseRequestValidationError) ErrorName() string { return "ParseRequestValidationError" }

// Error satisfies the builtin error interface
func (e ParseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseRequestValidationError{}

// Validate checks the field values on ParseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParseResponseMultiError, or
// nil if none found.
func (m *ParseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParsedExpr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParseResponseValidationError{
					field:  "ParsedExpr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParseResponseValidationError{
					field:  "ParsedExpr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParsedExpr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParseResponseValidationError{
				field:  "ParsedExpr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetIssues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ParseResponseValidationError{
						field:  fmt.Sprintf("Issues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ParseResponseValidationError{
						field:  fmt.Sprintf("Issues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ParseResponseValidationError{
					field:  fmt.Sprintf("Issues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ParseResponseMultiError(errors)
	}

	return nil
}

// ParseResponseMultiError is an error wrapping multiple validation errors
// returned by ParseResponse.ValidateAll() if the designated constraints
// aren't met.
type ParseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseResponseMultiError) AllErrors() []error { return m }

// ParseResponseValidationError is the validation error returned by
// ParseResponse.Validate if the designated constraints aren't met.
type ParseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseResponseValidationError) ErrorName() string { return "ParseResponseValidationError" }

// Error satisfies the builtin error interface
func (e ParseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseResponseValidationError{}

// Validate checks the field values on CheckRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckRequestMultiError, or
// nil if none found.
func (m *CheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParsedExpr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckRequestValidationError{
					field:  "ParsedExpr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckRequestValidationError{
					field:  "ParsedExpr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParsedExpr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckRequestValidationError{
				field:  "ParsedExpr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTypeEnv() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckRequestValidationError{
						field:  fmt.Sprintf("TypeEnv[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckRequestValidationError{
						field:  fmt.Sprintf("TypeEnv[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckRequestValidationError{
					field:  fmt.Sprintf("TypeEnv[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Container

	// no validation rules for NoStdEnv

	if len(errors) > 0 {
		return CheckRequestMultiError(errors)
	}

	return nil
}

// CheckRequestMultiError is an error wrapping multiple validation errors
// returned by CheckRequest.ValidateAll() if the designated constraints aren't met.
type CheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckRequestMultiError) AllErrors() []error { return m }

// CheckRequestValidationError is the validation error returned by
// CheckRequest.Validate if the designated constraints aren't met.
type CheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRequestValidationError) ErrorName() string { return "CheckRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRequestValidationError{}

// Validate checks the field values on CheckResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckResponseMultiError, or
// nil if none found.
func (m *CheckResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCheckedExpr()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CheckResponseValidationError{
					field:  "CheckedExpr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CheckResponseValidationError{
					field:  "CheckedExpr",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckedExpr()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CheckResponseValidationError{
				field:  "CheckedExpr",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetIssues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckResponseValidationError{
						field:  fmt.Sprintf("Issues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckResponseValidationError{
						field:  fmt.Sprintf("Issues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckResponseValidationError{
					field:  fmt.Sprintf("Issues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CheckResponseMultiError(errors)
	}

	return nil
}

// CheckResponseMultiError is an error wrapping multiple validation errors
// returned by CheckResponse.ValidateAll() if the designated constraints
// aren't met.
type CheckResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResponseMultiError) AllErrors() []error { return m }

// CheckResponseValidationError is the validation error returned by
// CheckResponse.Validate if the designated constraints aren't met.
type CheckResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResponseValidationError) ErrorName() string { return "CheckResponseValidationError" }

// Error satisfies the builtin error interface
func (e CheckResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResponseValidationError{}

// Validate checks the field values on EvalRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EvalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvalRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EvalRequestMultiError, or
// nil if none found.
func (m *EvalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EvalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetBindings()))
		i := 0
		for key := range m.GetBindings() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBindings()[key]
			_ = val

			// no validation rules for Bindings[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, EvalRequestValidationError{
							field:  fmt.Sprintf("Bindings[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, EvalRequestValidationError{
							field:  fmt.Sprintf("Bindings[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return EvalRequestValidationError{
						field:  fmt.Sprintf("Bindings[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Container

	switch v := m.ExprKind.(type) {
	case *EvalRequest_ParsedExpr:
		if v == nil {
			err := EvalRequestValidationError{
				field:  "ExprKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetParsedExpr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvalRequestValidationError{
						field:  "ParsedExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvalRequestValidationError{
						field:  "ParsedExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetParsedExpr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvalRequestValidationError{
					field:  "ParsedExpr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *EvalRequest_CheckedExpr:
		if v == nil {
			err := EvalRequestValidationError{
				field:  "ExprKind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCheckedExpr()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvalRequestValidationError{
						field:  "CheckedExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvalRequestValidationError{
						field:  "CheckedExpr",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCheckedExpr()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvalRequestValidationError{
					field:  "CheckedExpr",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return EvalRequestMultiError(errors)
	}

	return nil
}

// EvalRequestMultiError is an error wrapping multiple validation errors
// returned by EvalRequest.ValidateAll() if the designated constraints aren't met.
type EvalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvalRequestMultiError) AllErrors() []error { return m }

// EvalRequestValidationError is the validation error returned by
// EvalRequest.Validate if the designated constraints aren't met.
type EvalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvalRequestValidationError) ErrorName() string { return "EvalRequestValidationError" }

// Error satisfies the builtin error interface
func (e EvalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvalRequestValidationError{}

// Validate checks the field values on EvalResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EvalResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvalResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EvalResponseMultiError, or
// nil if none found.
func (m *EvalResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EvalResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EvalResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EvalResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EvalResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetIssues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EvalResponseValidationError{
						field:  fmt.Sprintf("Issues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EvalResponseValidationError{
						field:  fmt.Sprintf("Issues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EvalResponseValidationError{
					field:  fmt.Sprintf("Issues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EvalResponseMultiError(errors)
	}

	return nil
}

// EvalResponseMultiError is an error wrapping multiple validation errors
// returned by EvalResponse.ValidateAll() if the designated constraints aren't met.
type EvalResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvalResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvalResponseMultiError) AllErrors() []error { return m }

// EvalResponseValidationError is the validation error returned by
// EvalResponse.Validate if the designated constraints aren't met.
type EvalResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvalResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvalResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvalResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvalResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvalResponseValidationError) ErrorName() string { return "EvalResponseValidationError" }

// Error satisfies the builtin error interface
func (e EvalResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvalResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvalResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvalResponseValidationError{}

// Validate checks the field values on SourcePosition with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SourcePosition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SourcePosition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SourcePositionMultiError,
// or nil if none found.
func (m *SourcePosition) ValidateAll() error {
	return m.validate(true)
}

func (m *SourcePosition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Location

	// no validation rules for Offset

	// no validation rules for Line

	// no validation rules for Column

	if len(errors) > 0 {
		return SourcePositionMultiError(errors)
	}

	return nil
}

// SourcePositionMultiError is an error wrapping multiple validation errors
// returned by SourcePosition.ValidateAll() if the designated constraints
// aren't met.
type SourcePositionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SourcePositionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SourcePositionMultiError) AllErrors() []error { return m }

// SourcePositionValidationError is the validation error returned by
// SourcePosition.Validate if the designated constraints aren't met.
type SourcePositionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourcePositionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourcePositionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourcePositionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourcePositionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourcePositionValidationError) ErrorName() string { return "SourcePositionValidationError" }

// Error satisfies the builtin error interface
func (e SourcePositionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSourcePosition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourcePositionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourcePositionValidationError{}

// Validate checks the field values on IssueDetails with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IssueDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IssueDetailsMultiError, or
// nil if none found.
func (m *IssueDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Severity

	if all {
		switch v := interface{}(m.GetPosition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IssueDetailsValidationError{
					field:  "Position",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IssueDetailsValidationError{
					field:  "Position",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPosition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IssueDetailsValidationError{
				field:  "Position",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	if len(errors) > 0 {
		return IssueDetailsMultiError(errors)
	}

	return nil
}

// IssueDetailsMultiError is an error wrapping multiple validation errors
// returned by IssueDetails.ValidateAll() if the designated constraints aren't met.
type IssueDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueDetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueDetailsMultiError) AllErrors() []error { return m }

// IssueDetailsValidationError is the validation error returned by
// IssueDetails.Validate if the designated constraints aren't met.
type IssueDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueDetailsValidationError) ErrorName() string { return "IssueDetailsValidationError" }

// Error satisfies the builtin error interface
func (e IssueDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueDetailsValidationError{}
