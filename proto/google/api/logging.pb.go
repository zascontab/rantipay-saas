// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: google/api/logging.proto

package serviceconfig

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Logging configuration of the service.
//
// The following example shows how to configure logs to be sent to the
// producer and consumer projects. In the example, the `activity_history`
// log is sent to both the producer and consumer projects, whereas the
// `purchase_history` log is only sent to the producer project.
//
//	monitored_resources:
//	- type: library.googleapis.com/branch
//	  labels:
//	  - key: /city
//	    description: The city where the library branch is located in.
//	  - key: /name
//	    description: The name of the branch.
//	logs:
//	- name: activity_history
//	  labels:
//	  - key: /customer_id
//	- name: purchase_history
//	logging:
//	  producer_destinations:
//	  - monitored_resource: library.googleapis.com/branch
//	    logs:
//	    - activity_history
//	    - purchase_history
//	  consumer_destinations:
//	  - monitored_resource: library.googleapis.com/branch
//	    logs:
//	    - activity_history
type Logging struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Logging configurations for sending logs to the producer project.
	// There can be multiple producer destinations, each one must have a
	// different monitored resource type. A log can be used in at most
	// one producer destination.
	ProducerDestinations []*Logging_LoggingDestination `protobuf:"bytes,1,rep,name=producer_destinations,json=producerDestinations,proto3" json:"producer_destinations,omitempty"`
	// Logging configurations for sending logs to the consumer project.
	// There can be multiple consumer destinations, each one must have a
	// different monitored resource type. A log can be used in at most
	// one consumer destination.
	ConsumerDestinations []*Logging_LoggingDestination `protobuf:"bytes,2,rep,name=consumer_destinations,json=consumerDestinations,proto3" json:"consumer_destinations,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Logging) Reset() {
	*x = Logging{}
	mi := &file_google_api_logging_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logging) ProtoMessage() {}

func (x *Logging) ProtoReflect() protoreflect.Message {
	mi := &file_google_api_logging_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logging.ProtoReflect.Descriptor instead.
func (*Logging) Descriptor() ([]byte, []int) {
	return file_google_api_logging_proto_rawDescGZIP(), []int{0}
}

func (x *Logging) GetProducerDestinations() []*Logging_LoggingDestination {
	if x != nil {
		return x.ProducerDestinations
	}
	return nil
}

func (x *Logging) GetConsumerDestinations() []*Logging_LoggingDestination {
	if x != nil {
		return x.ConsumerDestinations
	}
	return nil
}

// Configuration of a specific logging destination (the producer project
// or the consumer project).
type Logging_LoggingDestination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The monitored resource type. The type must be defined in the
	// [Service.monitored_resources][google.api.Service.monitored_resources]
	// section.
	MonitoredResource string `protobuf:"bytes,3,opt,name=monitored_resource,json=monitoredResource,proto3" json:"monitored_resource,omitempty"`
	// Names of the logs to be sent to this destination. Each name must
	// be defined in the [Service.logs][google.api.Service.logs] section. If the
	// log name is not a domain scoped name, it will be automatically prefixed
	// with the service name followed by "/".
	Logs          []string `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Logging_LoggingDestination) Reset() {
	*x = Logging_LoggingDestination{}
	mi := &file_google_api_logging_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Logging_LoggingDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logging_LoggingDestination) ProtoMessage() {}

func (x *Logging_LoggingDestination) ProtoReflect() protoreflect.Message {
	mi := &file_google_api_logging_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logging_LoggingDestination.ProtoReflect.Descriptor instead.
func (*Logging_LoggingDestination) Descriptor() ([]byte, []int) {
	return file_google_api_logging_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Logging_LoggingDestination) GetMonitoredResource() string {
	if x != nil {
		return x.MonitoredResource
	}
	return ""
}

func (x *Logging_LoggingDestination) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

var File_google_api_logging_proto protoreflect.FileDescriptor

const file_google_api_logging_proto_rawDesc = "" +
	"\n" +
	"\x18google/api/logging.proto\x12\n" +
	"google.api\"\x9c\x02\n" +
	"\aLogging\x12[\n" +
	"\x15producer_destinations\x18\x01 \x03(\v2&.google.api.Logging.LoggingDestinationR\x14producerDestinations\x12[\n" +
	"\x15consumer_destinations\x18\x02 \x03(\v2&.google.api.Logging.LoggingDestinationR\x14consumerDestinations\x1aW\n" +
	"\x12LoggingDestination\x12-\n" +
	"\x12monitored_resource\x18\x03 \x01(\tR\x11monitoredResource\x12\x12\n" +
	"\x04logs\x18\x01 \x03(\tR\x04logsBn\n" +
	"\x0ecom.google.apiB\fLoggingProtoP\x01ZEgoogle.golang.org/genproto/googleapis/api/serviceconfig;serviceconfig\xa2\x02\x04GAPIb\x06proto3"

var (
	file_google_api_logging_proto_rawDescOnce sync.Once
	file_google_api_logging_proto_rawDescData []byte
)

func file_google_api_logging_proto_rawDescGZIP() []byte {
	file_google_api_logging_proto_rawDescOnce.Do(func() {
		file_google_api_logging_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_google_api_logging_proto_rawDesc), len(file_google_api_logging_proto_rawDesc)))
	})
	return file_google_api_logging_proto_rawDescData
}

var file_google_api_logging_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_google_api_logging_proto_goTypes = []any{
	(*Logging)(nil),                    // 0: google.api.Logging
	(*Logging_LoggingDestination)(nil), // 1: google.api.Logging.LoggingDestination
}
var file_google_api_logging_proto_depIdxs = []int32{
	1, // 0: google.api.Logging.producer_destinations:type_name -> google.api.Logging.LoggingDestination
	1, // 1: google.api.Logging.consumer_destinations:type_name -> google.api.Logging.LoggingDestination
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_google_api_logging_proto_init() }
func file_google_api_logging_proto_init() {
	if File_google_api_logging_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_google_api_logging_proto_rawDesc), len(file_google_api_logging_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_api_logging_proto_goTypes,
		DependencyIndexes: file_google_api_logging_proto_depIdxs,
		MessageInfos:      file_google_api_logging_proto_msgTypes,
	}.Build()
	File_google_api_logging_proto = out.File
	file_google_api_logging_proto_goTypes = nil
	file_google_api_logging_proto_depIdxs = nil
}
