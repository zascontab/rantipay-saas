// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/serviceusage/v1beta1/serviceusage.proto

package serviceusage

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EnableServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableServiceRequestMultiError, or nil if none found.
func (m *EnableServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return EnableServiceRequestMultiError(errors)
	}

	return nil
}

// EnableServiceRequestMultiError is an error wrapping multiple validation
// errors returned by EnableServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type EnableServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableServiceRequestMultiError) AllErrors() []error { return m }

// EnableServiceRequestValidationError is the validation error returned by
// EnableServiceRequest.Validate if the designated constraints aren't met.
type EnableServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableServiceRequestValidationError) ErrorName() string {
	return "EnableServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableServiceRequestValidationError{}

// Validate checks the field values on DisableServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableServiceRequestMultiError, or nil if none found.
func (m *DisableServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DisableServiceRequestMultiError(errors)
	}

	return nil
}

// DisableServiceRequestMultiError is an error wrapping multiple validation
// errors returned by DisableServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type DisableServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableServiceRequestMultiError) AllErrors() []error { return m }

// DisableServiceRequestValidationError is the validation error returned by
// DisableServiceRequest.Validate if the designated constraints aren't met.
type DisableServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableServiceRequestValidationError) ErrorName() string {
	return "DisableServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableServiceRequestValidationError{}

// Validate checks the field values on GetServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceRequestMultiError, or nil if none found.
func (m *GetServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetServiceRequestMultiError(errors)
	}

	return nil
}

// GetServiceRequestMultiError is an error wrapping multiple validation errors
// returned by GetServiceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceRequestMultiError) AllErrors() []error { return m }

// GetServiceRequestValidationError is the validation error returned by
// GetServiceRequest.Validate if the designated constraints aren't met.
type GetServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceRequestValidationError) ErrorName() string {
	return "GetServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceRequestValidationError{}

// Validate checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesRequestMultiError, or nil if none found.
func (m *ListServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for Filter

	if len(errors) > 0 {
		return ListServicesRequestMultiError(errors)
	}

	return nil
}

// ListServicesRequestMultiError is an error wrapping multiple validation
// errors returned by ListServicesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesRequestMultiError) AllErrors() []error { return m }

// ListServicesRequestValidationError is the validation error returned by
// ListServicesRequest.Validate if the designated constraints aren't met.
type ListServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesRequestValidationError) ErrorName() string {
	return "ListServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesRequestValidationError{}

// Validate checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesResponseMultiError, or nil if none found.
func (m *ListServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListServicesResponseMultiError(errors)
	}

	return nil
}

// ListServicesResponseMultiError is an error wrapping multiple validation
// errors returned by ListServicesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesResponseMultiError) AllErrors() []error { return m }

// ListServicesResponseValidationError is the validation error returned by
// ListServicesResponse.Validate if the designated constraints aren't met.
type ListServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesResponseValidationError) ErrorName() string {
	return "ListServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesResponseValidationError{}

// Validate checks the field values on BatchEnableServicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchEnableServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchEnableServicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchEnableServicesRequestMultiError, or nil if none found.
func (m *BatchEnableServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchEnableServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if len(errors) > 0 {
		return BatchEnableServicesRequestMultiError(errors)
	}

	return nil
}

// BatchEnableServicesRequestMultiError is an error wrapping multiple
// validation errors returned by BatchEnableServicesRequest.ValidateAll() if
// the designated constraints aren't met.
type BatchEnableServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchEnableServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchEnableServicesRequestMultiError) AllErrors() []error { return m }

// BatchEnableServicesRequestValidationError is the validation error returned
// by BatchEnableServicesRequest.Validate if the designated constraints aren't met.
type BatchEnableServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchEnableServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchEnableServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchEnableServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchEnableServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchEnableServicesRequestValidationError) ErrorName() string {
	return "BatchEnableServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchEnableServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchEnableServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchEnableServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchEnableServicesRequestValidationError{}

// Validate checks the field values on ListConsumerQuotaMetricsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConsumerQuotaMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConsumerQuotaMetricsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListConsumerQuotaMetricsRequestMultiError, or nil if none found.
func (m *ListConsumerQuotaMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConsumerQuotaMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for View

	if len(errors) > 0 {
		return ListConsumerQuotaMetricsRequestMultiError(errors)
	}

	return nil
}

// ListConsumerQuotaMetricsRequestMultiError is an error wrapping multiple
// validation errors returned by ListConsumerQuotaMetricsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListConsumerQuotaMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConsumerQuotaMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConsumerQuotaMetricsRequestMultiError) AllErrors() []error { return m }

// ListConsumerQuotaMetricsRequestValidationError is the validation error
// returned by ListConsumerQuotaMetricsRequest.Validate if the designated
// constraints aren't met.
type ListConsumerQuotaMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConsumerQuotaMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConsumerQuotaMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConsumerQuotaMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConsumerQuotaMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConsumerQuotaMetricsRequestValidationError) ErrorName() string {
	return "ListConsumerQuotaMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConsumerQuotaMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConsumerQuotaMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConsumerQuotaMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConsumerQuotaMetricsRequestValidationError{}

// Validate checks the field values on ListConsumerQuotaMetricsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListConsumerQuotaMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConsumerQuotaMetricsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListConsumerQuotaMetricsResponseMultiError, or nil if none found.
func (m *ListConsumerQuotaMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConsumerQuotaMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConsumerQuotaMetricsResponseValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConsumerQuotaMetricsResponseValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConsumerQuotaMetricsResponseValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListConsumerQuotaMetricsResponseMultiError(errors)
	}

	return nil
}

// ListConsumerQuotaMetricsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListConsumerQuotaMetricsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListConsumerQuotaMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConsumerQuotaMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConsumerQuotaMetricsResponseMultiError) AllErrors() []error { return m }

// ListConsumerQuotaMetricsResponseValidationError is the validation error
// returned by ListConsumerQuotaMetricsResponse.Validate if the designated
// constraints aren't met.
type ListConsumerQuotaMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConsumerQuotaMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConsumerQuotaMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConsumerQuotaMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConsumerQuotaMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConsumerQuotaMetricsResponseValidationError) ErrorName() string {
	return "ListConsumerQuotaMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConsumerQuotaMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConsumerQuotaMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConsumerQuotaMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConsumerQuotaMetricsResponseValidationError{}

// Validate checks the field values on GetConsumerQuotaMetricRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumerQuotaMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerQuotaMetricRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetConsumerQuotaMetricRequestMultiError, or nil if none found.
func (m *GetConsumerQuotaMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerQuotaMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for View

	if len(errors) > 0 {
		return GetConsumerQuotaMetricRequestMultiError(errors)
	}

	return nil
}

// GetConsumerQuotaMetricRequestMultiError is an error wrapping multiple
// validation errors returned by GetConsumerQuotaMetricRequest.ValidateAll()
// if the designated constraints aren't met.
type GetConsumerQuotaMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerQuotaMetricRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerQuotaMetricRequestMultiError) AllErrors() []error { return m }

// GetConsumerQuotaMetricRequestValidationError is the validation error
// returned by GetConsumerQuotaMetricRequest.Validate if the designated
// constraints aren't met.
type GetConsumerQuotaMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerQuotaMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerQuotaMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerQuotaMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerQuotaMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerQuotaMetricRequestValidationError) ErrorName() string {
	return "GetConsumerQuotaMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerQuotaMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerQuotaMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerQuotaMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerQuotaMetricRequestValidationError{}

// Validate checks the field values on GetConsumerQuotaLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumerQuotaLimitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerQuotaLimitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumerQuotaLimitRequestMultiError, or nil if none found.
func (m *GetConsumerQuotaLimitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerQuotaLimitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for View

	if len(errors) > 0 {
		return GetConsumerQuotaLimitRequestMultiError(errors)
	}

	return nil
}

// GetConsumerQuotaLimitRequestMultiError is an error wrapping multiple
// validation errors returned by GetConsumerQuotaLimitRequest.ValidateAll() if
// the designated constraints aren't met.
type GetConsumerQuotaLimitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerQuotaLimitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerQuotaLimitRequestMultiError) AllErrors() []error { return m }

// GetConsumerQuotaLimitRequestValidationError is the validation error returned
// by GetConsumerQuotaLimitRequest.Validate if the designated constraints
// aren't met.
type GetConsumerQuotaLimitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerQuotaLimitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerQuotaLimitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerQuotaLimitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerQuotaLimitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerQuotaLimitRequestValidationError) ErrorName() string {
	return "GetConsumerQuotaLimitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerQuotaLimitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerQuotaLimitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerQuotaLimitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerQuotaLimitRequestValidationError{}

// Validate checks the field values on CreateAdminOverrideRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAdminOverrideRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAdminOverrideRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAdminOverrideRequestMultiError, or nil if none found.
func (m *CreateAdminOverrideRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdminOverrideRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetOverride()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAdminOverrideRequestValidationError{
					field:  "Override",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAdminOverrideRequestValidationError{
					field:  "Override",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOverride()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAdminOverrideRequestValidationError{
				field:  "Override",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Force

	if len(errors) > 0 {
		return CreateAdminOverrideRequestMultiError(errors)
	}

	return nil
}

// CreateAdminOverrideRequestMultiError is an error wrapping multiple
// validation errors returned by CreateAdminOverrideRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateAdminOverrideRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdminOverrideRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdminOverrideRequestMultiError) AllErrors() []error { return m }

// CreateAdminOverrideRequestValidationError is the validation error returned
// by CreateAdminOverrideRequest.Validate if the designated constraints aren't met.
type CreateAdminOverrideRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdminOverrideRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdminOverrideRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdminOverrideRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdminOverrideRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdminOverrideRequestValidationError) ErrorName() string {
	return "CreateAdminOverrideRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAdminOverrideRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdminOverrideRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdminOverrideRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdminOverrideRequestValidationError{}

// Validate checks the field values on UpdateAdminOverrideRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdminOverrideRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdminOverrideRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAdminOverrideRequestMultiError, or nil if none found.
func (m *UpdateAdminOverrideRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdminOverrideRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetOverride()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAdminOverrideRequestValidationError{
					field:  "Override",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAdminOverrideRequestValidationError{
					field:  "Override",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOverride()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAdminOverrideRequestValidationError{
				field:  "Override",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Force

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAdminOverrideRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAdminOverrideRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAdminOverrideRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAdminOverrideRequestMultiError(errors)
	}

	return nil
}

// UpdateAdminOverrideRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAdminOverrideRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateAdminOverrideRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdminOverrideRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdminOverrideRequestMultiError) AllErrors() []error { return m }

// UpdateAdminOverrideRequestValidationError is the validation error returned
// by UpdateAdminOverrideRequest.Validate if the designated constraints aren't met.
type UpdateAdminOverrideRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdminOverrideRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdminOverrideRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdminOverrideRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdminOverrideRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdminOverrideRequestValidationError) ErrorName() string {
	return "UpdateAdminOverrideRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdminOverrideRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdminOverrideRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdminOverrideRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdminOverrideRequestValidationError{}

// Validate checks the field values on DeleteAdminOverrideRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdminOverrideRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdminOverrideRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAdminOverrideRequestMultiError, or nil if none found.
func (m *DeleteAdminOverrideRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdminOverrideRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Force

	if len(errors) > 0 {
		return DeleteAdminOverrideRequestMultiError(errors)
	}

	return nil
}

// DeleteAdminOverrideRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteAdminOverrideRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteAdminOverrideRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdminOverrideRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdminOverrideRequestMultiError) AllErrors() []error { return m }

// DeleteAdminOverrideRequestValidationError is the validation error returned
// by DeleteAdminOverrideRequest.Validate if the designated constraints aren't met.
type DeleteAdminOverrideRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdminOverrideRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdminOverrideRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdminOverrideRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdminOverrideRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdminOverrideRequestValidationError) ErrorName() string {
	return "DeleteAdminOverrideRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAdminOverrideRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdminOverrideRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdminOverrideRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdminOverrideRequestValidationError{}

// Validate checks the field values on ListAdminOverridesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdminOverridesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminOverridesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdminOverridesRequestMultiError, or nil if none found.
func (m *ListAdminOverridesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminOverridesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListAdminOverridesRequestMultiError(errors)
	}

	return nil
}

// ListAdminOverridesRequestMultiError is an error wrapping multiple validation
// errors returned by ListAdminOverridesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListAdminOverridesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminOverridesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminOverridesRequestMultiError) AllErrors() []error { return m }

// ListAdminOverridesRequestValidationError is the validation error returned by
// ListAdminOverridesRequest.Validate if the designated constraints aren't met.
type ListAdminOverridesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminOverridesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminOverridesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminOverridesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminOverridesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminOverridesRequestValidationError) ErrorName() string {
	return "ListAdminOverridesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdminOverridesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminOverridesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminOverridesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminOverridesRequestValidationError{}

// Validate checks the field values on ListAdminOverridesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAdminOverridesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAdminOverridesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAdminOverridesResponseMultiError, or nil if none found.
func (m *ListAdminOverridesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAdminOverridesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOverrides() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAdminOverridesResponseValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAdminOverridesResponseValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAdminOverridesResponseValidationError{
					field:  fmt.Sprintf("Overrides[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListAdminOverridesResponseMultiError(errors)
	}

	return nil
}

// ListAdminOverridesResponseMultiError is an error wrapping multiple
// validation errors returned by ListAdminOverridesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAdminOverridesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAdminOverridesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAdminOverridesResponseMultiError) AllErrors() []error { return m }

// ListAdminOverridesResponseValidationError is the validation error returned
// by ListAdminOverridesResponse.Validate if the designated constraints aren't met.
type ListAdminOverridesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAdminOverridesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAdminOverridesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAdminOverridesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAdminOverridesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAdminOverridesResponseValidationError) ErrorName() string {
	return "ListAdminOverridesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAdminOverridesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAdminOverridesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAdminOverridesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAdminOverridesResponseValidationError{}

// Validate checks the field values on BatchCreateAdminOverridesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *BatchCreateAdminOverridesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateAdminOverridesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchCreateAdminOverridesResponseMultiError, or nil if none found.
func (m *BatchCreateAdminOverridesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateAdminOverridesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOverrides() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateAdminOverridesResponseValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateAdminOverridesResponseValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateAdminOverridesResponseValidationError{
					field:  fmt.Sprintf("Overrides[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateAdminOverridesResponseMultiError(errors)
	}

	return nil
}

// BatchCreateAdminOverridesResponseMultiError is an error wrapping multiple
// validation errors returned by
// BatchCreateAdminOverridesResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateAdminOverridesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateAdminOverridesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateAdminOverridesResponseMultiError) AllErrors() []error { return m }

// BatchCreateAdminOverridesResponseValidationError is the validation error
// returned by BatchCreateAdminOverridesResponse.Validate if the designated
// constraints aren't met.
type BatchCreateAdminOverridesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateAdminOverridesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateAdminOverridesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateAdminOverridesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateAdminOverridesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateAdminOverridesResponseValidationError) ErrorName() string {
	return "BatchCreateAdminOverridesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateAdminOverridesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateAdminOverridesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateAdminOverridesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateAdminOverridesResponseValidationError{}

// Validate checks the field values on ImportAdminOverridesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportAdminOverridesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportAdminOverridesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportAdminOverridesRequestMultiError, or nil if none found.
func (m *ImportAdminOverridesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportAdminOverridesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for Force

	switch v := m.Source.(type) {
	case *ImportAdminOverridesRequest_InlineSource:
		if v == nil {
			err := ImportAdminOverridesRequestValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInlineSource()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportAdminOverridesRequestValidationError{
						field:  "InlineSource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportAdminOverridesRequestValidationError{
						field:  "InlineSource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInlineSource()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportAdminOverridesRequestValidationError{
					field:  "InlineSource",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ImportAdminOverridesRequestMultiError(errors)
	}

	return nil
}

// ImportAdminOverridesRequestMultiError is an error wrapping multiple
// validation errors returned by ImportAdminOverridesRequest.ValidateAll() if
// the designated constraints aren't met.
type ImportAdminOverridesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportAdminOverridesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportAdminOverridesRequestMultiError) AllErrors() []error { return m }

// ImportAdminOverridesRequestValidationError is the validation error returned
// by ImportAdminOverridesRequest.Validate if the designated constraints
// aren't met.
type ImportAdminOverridesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportAdminOverridesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportAdminOverridesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportAdminOverridesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportAdminOverridesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportAdminOverridesRequestValidationError) ErrorName() string {
	return "ImportAdminOverridesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportAdminOverridesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportAdminOverridesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportAdminOverridesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportAdminOverridesRequestValidationError{}

// Validate checks the field values on ImportAdminOverridesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportAdminOverridesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportAdminOverridesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportAdminOverridesResponseMultiError, or nil if none found.
func (m *ImportAdminOverridesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportAdminOverridesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOverrides() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportAdminOverridesResponseValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportAdminOverridesResponseValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportAdminOverridesResponseValidationError{
					field:  fmt.Sprintf("Overrides[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportAdminOverridesResponseMultiError(errors)
	}

	return nil
}

// ImportAdminOverridesResponseMultiError is an error wrapping multiple
// validation errors returned by ImportAdminOverridesResponse.ValidateAll() if
// the designated constraints aren't met.
type ImportAdminOverridesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportAdminOverridesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportAdminOverridesResponseMultiError) AllErrors() []error { return m }

// ImportAdminOverridesResponseValidationError is the validation error returned
// by ImportAdminOverridesResponse.Validate if the designated constraints
// aren't met.
type ImportAdminOverridesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportAdminOverridesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportAdminOverridesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportAdminOverridesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportAdminOverridesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportAdminOverridesResponseValidationError) ErrorName() string {
	return "ImportAdminOverridesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportAdminOverridesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportAdminOverridesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportAdminOverridesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportAdminOverridesResponseValidationError{}

// Validate checks the field values on ImportAdminOverridesMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportAdminOverridesMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportAdminOverridesMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportAdminOverridesMetadataMultiError, or nil if none found.
func (m *ImportAdminOverridesMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportAdminOverridesMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ImportAdminOverridesMetadataMultiError(errors)
	}

	return nil
}

// ImportAdminOverridesMetadataMultiError is an error wrapping multiple
// validation errors returned by ImportAdminOverridesMetadata.ValidateAll() if
// the designated constraints aren't met.
type ImportAdminOverridesMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportAdminOverridesMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportAdminOverridesMetadataMultiError) AllErrors() []error { return m }

// ImportAdminOverridesMetadataValidationError is the validation error returned
// by ImportAdminOverridesMetadata.Validate if the designated constraints
// aren't met.
type ImportAdminOverridesMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportAdminOverridesMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportAdminOverridesMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportAdminOverridesMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportAdminOverridesMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportAdminOverridesMetadataValidationError) ErrorName() string {
	return "ImportAdminOverridesMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ImportAdminOverridesMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportAdminOverridesMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportAdminOverridesMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportAdminOverridesMetadataValidationError{}

// Validate checks the field values on CreateConsumerOverrideRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConsumerOverrideRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConsumerOverrideRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateConsumerOverrideRequestMultiError, or nil if none found.
func (m *CreateConsumerOverrideRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConsumerOverrideRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetOverride()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateConsumerOverrideRequestValidationError{
					field:  "Override",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateConsumerOverrideRequestValidationError{
					field:  "Override",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOverride()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateConsumerOverrideRequestValidationError{
				field:  "Override",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Force

	if len(errors) > 0 {
		return CreateConsumerOverrideRequestMultiError(errors)
	}

	return nil
}

// CreateConsumerOverrideRequestMultiError is an error wrapping multiple
// validation errors returned by CreateConsumerOverrideRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateConsumerOverrideRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConsumerOverrideRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConsumerOverrideRequestMultiError) AllErrors() []error { return m }

// CreateConsumerOverrideRequestValidationError is the validation error
// returned by CreateConsumerOverrideRequest.Validate if the designated
// constraints aren't met.
type CreateConsumerOverrideRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConsumerOverrideRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConsumerOverrideRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConsumerOverrideRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConsumerOverrideRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConsumerOverrideRequestValidationError) ErrorName() string {
	return "CreateConsumerOverrideRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConsumerOverrideRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConsumerOverrideRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConsumerOverrideRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConsumerOverrideRequestValidationError{}

// Validate checks the field values on UpdateConsumerOverrideRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConsumerOverrideRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConsumerOverrideRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateConsumerOverrideRequestMultiError, or nil if none found.
func (m *UpdateConsumerOverrideRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConsumerOverrideRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetOverride()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConsumerOverrideRequestValidationError{
					field:  "Override",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConsumerOverrideRequestValidationError{
					field:  "Override",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOverride()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConsumerOverrideRequestValidationError{
				field:  "Override",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Force

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConsumerOverrideRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConsumerOverrideRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConsumerOverrideRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConsumerOverrideRequestMultiError(errors)
	}

	return nil
}

// UpdateConsumerOverrideRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateConsumerOverrideRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateConsumerOverrideRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConsumerOverrideRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConsumerOverrideRequestMultiError) AllErrors() []error { return m }

// UpdateConsumerOverrideRequestValidationError is the validation error
// returned by UpdateConsumerOverrideRequest.Validate if the designated
// constraints aren't met.
type UpdateConsumerOverrideRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConsumerOverrideRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConsumerOverrideRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConsumerOverrideRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConsumerOverrideRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConsumerOverrideRequestValidationError) ErrorName() string {
	return "UpdateConsumerOverrideRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConsumerOverrideRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConsumerOverrideRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConsumerOverrideRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConsumerOverrideRequestValidationError{}

// Validate checks the field values on DeleteConsumerOverrideRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConsumerOverrideRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConsumerOverrideRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteConsumerOverrideRequestMultiError, or nil if none found.
func (m *DeleteConsumerOverrideRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConsumerOverrideRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Force

	if len(errors) > 0 {
		return DeleteConsumerOverrideRequestMultiError(errors)
	}

	return nil
}

// DeleteConsumerOverrideRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteConsumerOverrideRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteConsumerOverrideRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConsumerOverrideRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConsumerOverrideRequestMultiError) AllErrors() []error { return m }

// DeleteConsumerOverrideRequestValidationError is the validation error
// returned by DeleteConsumerOverrideRequest.Validate if the designated
// constraints aren't met.
type DeleteConsumerOverrideRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConsumerOverrideRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConsumerOverrideRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConsumerOverrideRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConsumerOverrideRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConsumerOverrideRequestValidationError) ErrorName() string {
	return "DeleteConsumerOverrideRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConsumerOverrideRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConsumerOverrideRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConsumerOverrideRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConsumerOverrideRequestValidationError{}

// Validate checks the field values on ListConsumerOverridesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConsumerOverridesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConsumerOverridesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConsumerOverridesRequestMultiError, or nil if none found.
func (m *ListConsumerOverridesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConsumerOverridesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListConsumerOverridesRequestMultiError(errors)
	}

	return nil
}

// ListConsumerOverridesRequestMultiError is an error wrapping multiple
// validation errors returned by ListConsumerOverridesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListConsumerOverridesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConsumerOverridesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConsumerOverridesRequestMultiError) AllErrors() []error { return m }

// ListConsumerOverridesRequestValidationError is the validation error returned
// by ListConsumerOverridesRequest.Validate if the designated constraints
// aren't met.
type ListConsumerOverridesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConsumerOverridesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConsumerOverridesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConsumerOverridesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConsumerOverridesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConsumerOverridesRequestValidationError) ErrorName() string {
	return "ListConsumerOverridesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConsumerOverridesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConsumerOverridesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConsumerOverridesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConsumerOverridesRequestValidationError{}

// Validate checks the field values on ListConsumerOverridesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConsumerOverridesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConsumerOverridesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListConsumerOverridesResponseMultiError, or nil if none found.
func (m *ListConsumerOverridesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConsumerOverridesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOverrides() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConsumerOverridesResponseValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConsumerOverridesResponseValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConsumerOverridesResponseValidationError{
					field:  fmt.Sprintf("Overrides[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListConsumerOverridesResponseMultiError(errors)
	}

	return nil
}

// ListConsumerOverridesResponseMultiError is an error wrapping multiple
// validation errors returned by ListConsumerOverridesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListConsumerOverridesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConsumerOverridesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConsumerOverridesResponseMultiError) AllErrors() []error { return m }

// ListConsumerOverridesResponseValidationError is the validation error
// returned by ListConsumerOverridesResponse.Validate if the designated
// constraints aren't met.
type ListConsumerOverridesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConsumerOverridesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConsumerOverridesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConsumerOverridesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConsumerOverridesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConsumerOverridesResponseValidationError) ErrorName() string {
	return "ListConsumerOverridesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConsumerOverridesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConsumerOverridesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConsumerOverridesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConsumerOverridesResponseValidationError{}

// Validate checks the field values on BatchCreateConsumerOverridesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BatchCreateConsumerOverridesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchCreateConsumerOverridesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BatchCreateConsumerOverridesResponseMultiError, or nil if none found.
func (m *BatchCreateConsumerOverridesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchCreateConsumerOverridesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOverrides() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchCreateConsumerOverridesResponseValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchCreateConsumerOverridesResponseValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchCreateConsumerOverridesResponseValidationError{
					field:  fmt.Sprintf("Overrides[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchCreateConsumerOverridesResponseMultiError(errors)
	}

	return nil
}

// BatchCreateConsumerOverridesResponseMultiError is an error wrapping multiple
// validation errors returned by
// BatchCreateConsumerOverridesResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchCreateConsumerOverridesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchCreateConsumerOverridesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchCreateConsumerOverridesResponseMultiError) AllErrors() []error { return m }

// BatchCreateConsumerOverridesResponseValidationError is the validation error
// returned by BatchCreateConsumerOverridesResponse.Validate if the designated
// constraints aren't met.
type BatchCreateConsumerOverridesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchCreateConsumerOverridesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchCreateConsumerOverridesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchCreateConsumerOverridesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchCreateConsumerOverridesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchCreateConsumerOverridesResponseValidationError) ErrorName() string {
	return "BatchCreateConsumerOverridesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchCreateConsumerOverridesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchCreateConsumerOverridesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchCreateConsumerOverridesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchCreateConsumerOverridesResponseValidationError{}

// Validate checks the field values on ImportConsumerOverridesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportConsumerOverridesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportConsumerOverridesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ImportConsumerOverridesRequestMultiError, or nil if none found.
func (m *ImportConsumerOverridesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportConsumerOverridesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for Force

	switch v := m.Source.(type) {
	case *ImportConsumerOverridesRequest_InlineSource:
		if v == nil {
			err := ImportConsumerOverridesRequestValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInlineSource()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportConsumerOverridesRequestValidationError{
						field:  "InlineSource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportConsumerOverridesRequestValidationError{
						field:  "InlineSource",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInlineSource()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportConsumerOverridesRequestValidationError{
					field:  "InlineSource",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ImportConsumerOverridesRequestMultiError(errors)
	}

	return nil
}

// ImportConsumerOverridesRequestMultiError is an error wrapping multiple
// validation errors returned by ImportConsumerOverridesRequest.ValidateAll()
// if the designated constraints aren't met.
type ImportConsumerOverridesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportConsumerOverridesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportConsumerOverridesRequestMultiError) AllErrors() []error { return m }

// ImportConsumerOverridesRequestValidationError is the validation error
// returned by ImportConsumerOverridesRequest.Validate if the designated
// constraints aren't met.
type ImportConsumerOverridesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportConsumerOverridesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportConsumerOverridesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportConsumerOverridesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportConsumerOverridesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportConsumerOverridesRequestValidationError) ErrorName() string {
	return "ImportConsumerOverridesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportConsumerOverridesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportConsumerOverridesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportConsumerOverridesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportConsumerOverridesRequestValidationError{}

// Validate checks the field values on ImportConsumerOverridesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportConsumerOverridesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportConsumerOverridesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ImportConsumerOverridesResponseMultiError, or nil if none found.
func (m *ImportConsumerOverridesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportConsumerOverridesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOverrides() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportConsumerOverridesResponseValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportConsumerOverridesResponseValidationError{
						field:  fmt.Sprintf("Overrides[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportConsumerOverridesResponseValidationError{
					field:  fmt.Sprintf("Overrides[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportConsumerOverridesResponseMultiError(errors)
	}

	return nil
}

// ImportConsumerOverridesResponseMultiError is an error wrapping multiple
// validation errors returned by ImportConsumerOverridesResponse.ValidateAll()
// if the designated constraints aren't met.
type ImportConsumerOverridesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportConsumerOverridesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportConsumerOverridesResponseMultiError) AllErrors() []error { return m }

// ImportConsumerOverridesResponseValidationError is the validation error
// returned by ImportConsumerOverridesResponse.Validate if the designated
// constraints aren't met.
type ImportConsumerOverridesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportConsumerOverridesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportConsumerOverridesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportConsumerOverridesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportConsumerOverridesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportConsumerOverridesResponseValidationError) ErrorName() string {
	return "ImportConsumerOverridesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportConsumerOverridesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportConsumerOverridesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportConsumerOverridesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportConsumerOverridesResponseValidationError{}

// Validate checks the field values on ImportConsumerOverridesMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportConsumerOverridesMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportConsumerOverridesMetadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ImportConsumerOverridesMetadataMultiError, or nil if none found.
func (m *ImportConsumerOverridesMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportConsumerOverridesMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ImportConsumerOverridesMetadataMultiError(errors)
	}

	return nil
}

// ImportConsumerOverridesMetadataMultiError is an error wrapping multiple
// validation errors returned by ImportConsumerOverridesMetadata.ValidateAll()
// if the designated constraints aren't met.
type ImportConsumerOverridesMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportConsumerOverridesMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportConsumerOverridesMetadataMultiError) AllErrors() []error { return m }

// ImportConsumerOverridesMetadataValidationError is the validation error
// returned by ImportConsumerOverridesMetadata.Validate if the designated
// constraints aren't met.
type ImportConsumerOverridesMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportConsumerOverridesMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportConsumerOverridesMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportConsumerOverridesMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportConsumerOverridesMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportConsumerOverridesMetadataValidationError) ErrorName() string {
	return "ImportConsumerOverridesMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ImportConsumerOverridesMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportConsumerOverridesMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportConsumerOverridesMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportConsumerOverridesMetadataValidationError{}

// Validate checks the field values on ImportAdminQuotaPoliciesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ImportAdminQuotaPoliciesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportAdminQuotaPoliciesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ImportAdminQuotaPoliciesResponseMultiError, or nil if none found.
func (m *ImportAdminQuotaPoliciesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportAdminQuotaPoliciesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportAdminQuotaPoliciesResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportAdminQuotaPoliciesResponseValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportAdminQuotaPoliciesResponseValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportAdminQuotaPoliciesResponseMultiError(errors)
	}

	return nil
}

// ImportAdminQuotaPoliciesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ImportAdminQuotaPoliciesResponse.ValidateAll() if the designated
// constraints aren't met.
type ImportAdminQuotaPoliciesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportAdminQuotaPoliciesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportAdminQuotaPoliciesResponseMultiError) AllErrors() []error { return m }

// ImportAdminQuotaPoliciesResponseValidationError is the validation error
// returned by ImportAdminQuotaPoliciesResponse.Validate if the designated
// constraints aren't met.
type ImportAdminQuotaPoliciesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportAdminQuotaPoliciesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportAdminQuotaPoliciesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportAdminQuotaPoliciesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportAdminQuotaPoliciesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportAdminQuotaPoliciesResponseValidationError) ErrorName() string {
	return "ImportAdminQuotaPoliciesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportAdminQuotaPoliciesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportAdminQuotaPoliciesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportAdminQuotaPoliciesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportAdminQuotaPoliciesResponseValidationError{}

// Validate checks the field values on ImportAdminQuotaPoliciesMetadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ImportAdminQuotaPoliciesMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportAdminQuotaPoliciesMetadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ImportAdminQuotaPoliciesMetadataMultiError, or nil if none found.
func (m *ImportAdminQuotaPoliciesMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportAdminQuotaPoliciesMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ImportAdminQuotaPoliciesMetadataMultiError(errors)
	}

	return nil
}

// ImportAdminQuotaPoliciesMetadataMultiError is an error wrapping multiple
// validation errors returned by
// ImportAdminQuotaPoliciesMetadata.ValidateAll() if the designated
// constraints aren't met.
type ImportAdminQuotaPoliciesMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportAdminQuotaPoliciesMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportAdminQuotaPoliciesMetadataMultiError) AllErrors() []error { return m }

// ImportAdminQuotaPoliciesMetadataValidationError is the validation error
// returned by ImportAdminQuotaPoliciesMetadata.Validate if the designated
// constraints aren't met.
type ImportAdminQuotaPoliciesMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportAdminQuotaPoliciesMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportAdminQuotaPoliciesMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportAdminQuotaPoliciesMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportAdminQuotaPoliciesMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportAdminQuotaPoliciesMetadataValidationError) ErrorName() string {
	return "ImportAdminQuotaPoliciesMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ImportAdminQuotaPoliciesMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportAdminQuotaPoliciesMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportAdminQuotaPoliciesMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportAdminQuotaPoliciesMetadataValidationError{}

// Validate checks the field values on CreateAdminQuotaPolicyMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAdminQuotaPolicyMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAdminQuotaPolicyMetadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateAdminQuotaPolicyMetadataMultiError, or nil if none found.
func (m *CreateAdminQuotaPolicyMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdminQuotaPolicyMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAdminQuotaPolicyMetadataMultiError(errors)
	}

	return nil
}

// CreateAdminQuotaPolicyMetadataMultiError is an error wrapping multiple
// validation errors returned by CreateAdminQuotaPolicyMetadata.ValidateAll()
// if the designated constraints aren't met.
type CreateAdminQuotaPolicyMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdminQuotaPolicyMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdminQuotaPolicyMetadataMultiError) AllErrors() []error { return m }

// CreateAdminQuotaPolicyMetadataValidationError is the validation error
// returned by CreateAdminQuotaPolicyMetadata.Validate if the designated
// constraints aren't met.
type CreateAdminQuotaPolicyMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdminQuotaPolicyMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdminQuotaPolicyMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdminQuotaPolicyMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdminQuotaPolicyMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdminQuotaPolicyMetadataValidationError) ErrorName() string {
	return "CreateAdminQuotaPolicyMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAdminQuotaPolicyMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdminQuotaPolicyMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdminQuotaPolicyMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdminQuotaPolicyMetadataValidationError{}

// Validate checks the field values on UpdateAdminQuotaPolicyMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdminQuotaPolicyMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdminQuotaPolicyMetadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAdminQuotaPolicyMetadataMultiError, or nil if none found.
func (m *UpdateAdminQuotaPolicyMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdminQuotaPolicyMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAdminQuotaPolicyMetadataMultiError(errors)
	}

	return nil
}

// UpdateAdminQuotaPolicyMetadataMultiError is an error wrapping multiple
// validation errors returned by UpdateAdminQuotaPolicyMetadata.ValidateAll()
// if the designated constraints aren't met.
type UpdateAdminQuotaPolicyMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdminQuotaPolicyMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdminQuotaPolicyMetadataMultiError) AllErrors() []error { return m }

// UpdateAdminQuotaPolicyMetadataValidationError is the validation error
// returned by UpdateAdminQuotaPolicyMetadata.Validate if the designated
// constraints aren't met.
type UpdateAdminQuotaPolicyMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdminQuotaPolicyMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdminQuotaPolicyMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdminQuotaPolicyMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdminQuotaPolicyMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdminQuotaPolicyMetadataValidationError) ErrorName() string {
	return "UpdateAdminQuotaPolicyMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdminQuotaPolicyMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdminQuotaPolicyMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdminQuotaPolicyMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdminQuotaPolicyMetadataValidationError{}

// Validate checks the field values on DeleteAdminQuotaPolicyMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdminQuotaPolicyMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdminQuotaPolicyMetadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteAdminQuotaPolicyMetadataMultiError, or nil if none found.
func (m *DeleteAdminQuotaPolicyMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdminQuotaPolicyMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAdminQuotaPolicyMetadataMultiError(errors)
	}

	return nil
}

// DeleteAdminQuotaPolicyMetadataMultiError is an error wrapping multiple
// validation errors returned by DeleteAdminQuotaPolicyMetadata.ValidateAll()
// if the designated constraints aren't met.
type DeleteAdminQuotaPolicyMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdminQuotaPolicyMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdminQuotaPolicyMetadataMultiError) AllErrors() []error { return m }

// DeleteAdminQuotaPolicyMetadataValidationError is the validation error
// returned by DeleteAdminQuotaPolicyMetadata.Validate if the designated
// constraints aren't met.
type DeleteAdminQuotaPolicyMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdminQuotaPolicyMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdminQuotaPolicyMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdminQuotaPolicyMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdminQuotaPolicyMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdminQuotaPolicyMetadataValidationError) ErrorName() string {
	return "DeleteAdminQuotaPolicyMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAdminQuotaPolicyMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdminQuotaPolicyMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdminQuotaPolicyMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdminQuotaPolicyMetadataValidationError{}

// Validate checks the field values on GenerateServiceIdentityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateServiceIdentityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateServiceIdentityRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GenerateServiceIdentityRequestMultiError, or nil if none found.
func (m *GenerateServiceIdentityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateServiceIdentityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if len(errors) > 0 {
		return GenerateServiceIdentityRequestMultiError(errors)
	}

	return nil
}

// GenerateServiceIdentityRequestMultiError is an error wrapping multiple
// validation errors returned by GenerateServiceIdentityRequest.ValidateAll()
// if the designated constraints aren't met.
type GenerateServiceIdentityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateServiceIdentityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateServiceIdentityRequestMultiError) AllErrors() []error { return m }

// GenerateServiceIdentityRequestValidationError is the validation error
// returned by GenerateServiceIdentityRequest.Validate if the designated
// constraints aren't met.
type GenerateServiceIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateServiceIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateServiceIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateServiceIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateServiceIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateServiceIdentityRequestValidationError) ErrorName() string {
	return "GenerateServiceIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateServiceIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateServiceIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateServiceIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateServiceIdentityRequestValidationError{}

// Validate checks the field values on GetServiceIdentityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceIdentityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceIdentityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceIdentityResponseMultiError, or nil if none found.
func (m *GetServiceIdentityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceIdentityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceIdentityResponseValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceIdentityResponseValidationError{
					field:  "Identity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceIdentityResponseValidationError{
				field:  "Identity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	if len(errors) > 0 {
		return GetServiceIdentityResponseMultiError(errors)
	}

	return nil
}

// GetServiceIdentityResponseMultiError is an error wrapping multiple
// validation errors returned by GetServiceIdentityResponse.ValidateAll() if
// the designated constraints aren't met.
type GetServiceIdentityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceIdentityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceIdentityResponseMultiError) AllErrors() []error { return m }

// GetServiceIdentityResponseValidationError is the validation error returned
// by GetServiceIdentityResponse.Validate if the designated constraints aren't met.
type GetServiceIdentityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceIdentityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceIdentityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceIdentityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceIdentityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceIdentityResponseValidationError) ErrorName() string {
	return "GetServiceIdentityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceIdentityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceIdentityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceIdentityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceIdentityResponseValidationError{}

// Validate checks the field values on GetServiceIdentityMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceIdentityMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceIdentityMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceIdentityMetadataMultiError, or nil if none found.
func (m *GetServiceIdentityMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceIdentityMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetServiceIdentityMetadataMultiError(errors)
	}

	return nil
}

// GetServiceIdentityMetadataMultiError is an error wrapping multiple
// validation errors returned by GetServiceIdentityMetadata.ValidateAll() if
// the designated constraints aren't met.
type GetServiceIdentityMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceIdentityMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceIdentityMetadataMultiError) AllErrors() []error { return m }

// GetServiceIdentityMetadataValidationError is the validation error returned
// by GetServiceIdentityMetadata.Validate if the designated constraints aren't met.
type GetServiceIdentityMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceIdentityMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceIdentityMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceIdentityMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceIdentityMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceIdentityMetadataValidationError) ErrorName() string {
	return "GetServiceIdentityMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceIdentityMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceIdentityMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceIdentityMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceIdentityMetadataValidationError{}
