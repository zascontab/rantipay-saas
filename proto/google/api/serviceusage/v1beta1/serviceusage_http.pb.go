// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: google/api/serviceusage/v1beta1/serviceusage.proto

package serviceusage

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceUsageBatchEnableServices = "/google.api.serviceusage.v1beta1.ServiceUsage/BatchEnableServices"
const OperationServiceUsageCreateAdminOverride = "/google.api.serviceusage.v1beta1.ServiceUsage/CreateAdminOverride"
const OperationServiceUsageCreateConsumerOverride = "/google.api.serviceusage.v1beta1.ServiceUsage/CreateConsumerOverride"
const OperationServiceUsageDeleteAdminOverride = "/google.api.serviceusage.v1beta1.ServiceUsage/DeleteAdminOverride"
const OperationServiceUsageDeleteConsumerOverride = "/google.api.serviceusage.v1beta1.ServiceUsage/DeleteConsumerOverride"
const OperationServiceUsageDisableService = "/google.api.serviceusage.v1beta1.ServiceUsage/DisableService"
const OperationServiceUsageEnableService = "/google.api.serviceusage.v1beta1.ServiceUsage/EnableService"
const OperationServiceUsageGenerateServiceIdentity = "/google.api.serviceusage.v1beta1.ServiceUsage/GenerateServiceIdentity"
const OperationServiceUsageGetConsumerQuotaLimit = "/google.api.serviceusage.v1beta1.ServiceUsage/GetConsumerQuotaLimit"
const OperationServiceUsageGetConsumerQuotaMetric = "/google.api.serviceusage.v1beta1.ServiceUsage/GetConsumerQuotaMetric"
const OperationServiceUsageGetService = "/google.api.serviceusage.v1beta1.ServiceUsage/GetService"
const OperationServiceUsageImportAdminOverrides = "/google.api.serviceusage.v1beta1.ServiceUsage/ImportAdminOverrides"
const OperationServiceUsageImportConsumerOverrides = "/google.api.serviceusage.v1beta1.ServiceUsage/ImportConsumerOverrides"
const OperationServiceUsageListAdminOverrides = "/google.api.serviceusage.v1beta1.ServiceUsage/ListAdminOverrides"
const OperationServiceUsageListConsumerOverrides = "/google.api.serviceusage.v1beta1.ServiceUsage/ListConsumerOverrides"
const OperationServiceUsageListConsumerQuotaMetrics = "/google.api.serviceusage.v1beta1.ServiceUsage/ListConsumerQuotaMetrics"
const OperationServiceUsageListServices = "/google.api.serviceusage.v1beta1.ServiceUsage/ListServices"
const OperationServiceUsageUpdateAdminOverride = "/google.api.serviceusage.v1beta1.ServiceUsage/UpdateAdminOverride"
const OperationServiceUsageUpdateConsumerOverride = "/google.api.serviceusage.v1beta1.ServiceUsage/UpdateConsumerOverride"

type ServiceUsageHTTPServer interface {
	// BatchEnableServices Enables multiple services on a project. The operation is atomic: if
	// enabling any service fails, then the entire batch fails, and no state
	// changes occur.
	//
	// Operation response type: `google.protobuf.Empty`
	BatchEnableServices(context.Context, *BatchEnableServicesRequest) (*longrunningpb.Operation, error)
	// CreateAdminOverride Creates an admin override.
	// An admin override is applied by an administrator of a parent folder or
	// parent organization of the consumer receiving the override. An admin
	// override is intended to limit the amount of quota the consumer can use out
	// of the total quota pool allocated to all children of the folder or
	// organization.
	CreateAdminOverride(context.Context, *CreateAdminOverrideRequest) (*longrunningpb.Operation, error)
	// CreateConsumerOverride Creates a consumer override.
	// A consumer override is applied to the consumer on its own authority to
	// limit its own quota usage. Consumer overrides cannot be used to grant more
	// quota than would be allowed by admin overrides, producer overrides, or the
	// default limit of the service.
	CreateConsumerOverride(context.Context, *CreateConsumerOverrideRequest) (*longrunningpb.Operation, error)
	// DeleteAdminOverride Deletes an admin override.
	DeleteAdminOverride(context.Context, *DeleteAdminOverrideRequest) (*longrunningpb.Operation, error)
	// DeleteConsumerOverride Deletes a consumer override.
	DeleteConsumerOverride(context.Context, *DeleteConsumerOverrideRequest) (*longrunningpb.Operation, error)
	// DisableService Disables a service so that it can no longer be used with a project.
	// This prevents unintended usage that may cause unexpected billing
	// charges or security leaks.
	//
	// It is not valid to call the disable method on a service that is not
	// currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
	// the target service is not currently enabled.
	//
	// Operation response type: `google.protobuf.Empty`
	DisableService(context.Context, *DisableServiceRequest) (*longrunningpb.Operation, error)
	// EnableService Enables a service so that it can be used with a project.
	//
	// Operation response type: `google.protobuf.Empty`
	EnableService(context.Context, *EnableServiceRequest) (*longrunningpb.Operation, error)
	// GenerateServiceIdentity Generates service identity for service.
	GenerateServiceIdentity(context.Context, *GenerateServiceIdentityRequest) (*longrunningpb.Operation, error)
	// GetConsumerQuotaLimit Retrieves a summary of quota information for a specific quota limit.
	GetConsumerQuotaLimit(context.Context, *GetConsumerQuotaLimitRequest) (*ConsumerQuotaLimit, error)
	// GetConsumerQuotaMetric Retrieves a summary of quota information for a specific quota metric
	GetConsumerQuotaMetric(context.Context, *GetConsumerQuotaMetricRequest) (*ConsumerQuotaMetric, error)
	// GetService Returns the service configuration and enabled state for a given service.
	GetService(context.Context, *GetServiceRequest) (*Service, error)
	// ImportAdminOverrides Creates or updates multiple admin overrides atomically, all on the
	// same consumer, but on many different metrics or limits.
	// The name field in the quota override message should not be set.
	ImportAdminOverrides(context.Context, *ImportAdminOverridesRequest) (*longrunningpb.Operation, error)
	// ImportConsumerOverrides Creates or updates multiple consumer overrides atomically, all on the
	// same consumer, but on many different metrics or limits.
	// The name field in the quota override message should not be set.
	ImportConsumerOverrides(context.Context, *ImportConsumerOverridesRequest) (*longrunningpb.Operation, error)
	// ListAdminOverrides Lists all admin overrides on this limit.
	ListAdminOverrides(context.Context, *ListAdminOverridesRequest) (*ListAdminOverridesResponse, error)
	// ListConsumerOverrides Lists all consumer overrides on this limit.
	ListConsumerOverrides(context.Context, *ListConsumerOverridesRequest) (*ListConsumerOverridesResponse, error)
	// ListConsumerQuotaMetrics Retrieves a summary of all quota information visible to the service
	// consumer, organized by service metric. Each metric includes information
	// about all of its defined limits. Each limit includes the limit
	// configuration (quota unit, preciseness, default value), the current
	// effective limit value, and all of the overrides applied to the limit.
	ListConsumerQuotaMetrics(context.Context, *ListConsumerQuotaMetricsRequest) (*ListConsumerQuotaMetricsResponse, error)
	// ListServices Lists all services available to the specified project, and the current
	// state of those services with respect to the project. The list includes
	// all public services, all services for which the calling user has the
	// `servicemanagement.services.bind` permission, and all services that have
	// already been enabled on the project. The list can be filtered to
	// only include services in a specific state, for example to only include
	// services enabled on the project.
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// UpdateAdminOverride Updates an admin override.
	UpdateAdminOverride(context.Context, *UpdateAdminOverrideRequest) (*longrunningpb.Operation, error)
	// UpdateConsumerOverride Updates a consumer override.
	UpdateConsumerOverride(context.Context, *UpdateConsumerOverrideRequest) (*longrunningpb.Operation, error)
}

func RegisterServiceUsageHTTPServer(s *http.Server, srv ServiceUsageHTTPServer) {
	r := s.Route("/")
	r.POST("/v1beta1/{name:.*/.*/services/.*}:enable", _ServiceUsage_EnableService0_HTTP_Handler(srv))
	r.POST("/v1beta1/{name:.*/.*/services/.*}:disable", _ServiceUsage_DisableService0_HTTP_Handler(srv))
	r.GET("/v1beta1/{name:.*/.*/services/.*}", _ServiceUsage_GetService0_HTTP_Handler(srv))
	r.GET("/v1beta1/{parent:.*/.*}/services", _ServiceUsage_ListServices0_HTTP_Handler(srv))
	r.POST("/v1beta1/{parent:.*/.*}/services:batchEnable", _ServiceUsage_BatchEnableServices0_HTTP_Handler(srv))
	r.GET("/v1beta1/{parent:.*/.*/services/.*}/consumerQuotaMetrics", _ServiceUsage_ListConsumerQuotaMetrics0_HTTP_Handler(srv))
	r.GET("/v1beta1/{name:.*/.*/services/.*/consumerQuotaMetrics/.*}", _ServiceUsage_GetConsumerQuotaMetric0_HTTP_Handler(srv))
	r.GET("/v1beta1/{name:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*}", _ServiceUsage_GetConsumerQuotaLimit0_HTTP_Handler(srv))
	r.POST("/v1beta1/{parent:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*}/adminOverrides", _ServiceUsage_CreateAdminOverride0_HTTP_Handler(srv))
	r.PATCH("/v1beta1/{name:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*/adminOverrides/.*}", _ServiceUsage_UpdateAdminOverride0_HTTP_Handler(srv))
	r.DELETE("/v1beta1/{name:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*/adminOverrides/.*}", _ServiceUsage_DeleteAdminOverride0_HTTP_Handler(srv))
	r.GET("/v1beta1/{parent:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*}/adminOverrides", _ServiceUsage_ListAdminOverrides0_HTTP_Handler(srv))
	r.POST("/v1beta1/{parent:.*/.*/services/.*}/consumerQuotaMetrics:importAdminOverrides", _ServiceUsage_ImportAdminOverrides0_HTTP_Handler(srv))
	r.POST("/v1beta1/{parent:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*}/consumerOverrides", _ServiceUsage_CreateConsumerOverride0_HTTP_Handler(srv))
	r.PATCH("/v1beta1/{name:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*/consumerOverrides/.*}", _ServiceUsage_UpdateConsumerOverride0_HTTP_Handler(srv))
	r.DELETE("/v1beta1/{name:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*/consumerOverrides/.*}", _ServiceUsage_DeleteConsumerOverride0_HTTP_Handler(srv))
	r.GET("/v1beta1/{parent:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*}/consumerOverrides", _ServiceUsage_ListConsumerOverrides0_HTTP_Handler(srv))
	r.POST("/v1beta1/{parent:.*/.*/services/.*}/consumerQuotaMetrics:importConsumerOverrides", _ServiceUsage_ImportConsumerOverrides0_HTTP_Handler(srv))
	r.POST("/v1beta1/{parent:.*/.*/services/.*}:generateServiceIdentity", _ServiceUsage_GenerateServiceIdentity0_HTTP_Handler(srv))
}

func _ServiceUsage_EnableService0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EnableServiceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageEnableService)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EnableService(ctx, req.(*EnableServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_DisableService0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DisableServiceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageDisableService)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisableService(ctx, req.(*DisableServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_GetService0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetServiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageGetService)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetService(ctx, req.(*GetServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Service)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_ListServices0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListServicesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageListServices)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListServices(ctx, req.(*ListServicesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListServicesResponse)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_BatchEnableServices0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchEnableServicesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageBatchEnableServices)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchEnableServices(ctx, req.(*BatchEnableServicesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_ListConsumerQuotaMetrics0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListConsumerQuotaMetricsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageListConsumerQuotaMetrics)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListConsumerQuotaMetrics(ctx, req.(*ListConsumerQuotaMetricsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListConsumerQuotaMetricsResponse)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_GetConsumerQuotaMetric0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConsumerQuotaMetricRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageGetConsumerQuotaMetric)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConsumerQuotaMetric(ctx, req.(*GetConsumerQuotaMetricRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConsumerQuotaMetric)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_GetConsumerQuotaLimit0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConsumerQuotaLimitRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageGetConsumerQuotaLimit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConsumerQuotaLimit(ctx, req.(*GetConsumerQuotaLimitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConsumerQuotaLimit)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_CreateAdminOverride0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAdminOverrideRequest
		if err := ctx.Bind(&in.Override); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageCreateAdminOverride)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAdminOverride(ctx, req.(*CreateAdminOverrideRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_UpdateAdminOverride0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAdminOverrideRequest
		if err := ctx.Bind(&in.Override); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageUpdateAdminOverride)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAdminOverride(ctx, req.(*UpdateAdminOverrideRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_DeleteAdminOverride0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAdminOverrideRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageDeleteAdminOverride)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAdminOverride(ctx, req.(*DeleteAdminOverrideRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_ListAdminOverrides0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAdminOverridesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageListAdminOverrides)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAdminOverrides(ctx, req.(*ListAdminOverridesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAdminOverridesResponse)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_ImportAdminOverrides0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ImportAdminOverridesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageImportAdminOverrides)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ImportAdminOverrides(ctx, req.(*ImportAdminOverridesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_CreateConsumerOverride0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateConsumerOverrideRequest
		if err := ctx.Bind(&in.Override); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageCreateConsumerOverride)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateConsumerOverride(ctx, req.(*CreateConsumerOverrideRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_UpdateConsumerOverride0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateConsumerOverrideRequest
		if err := ctx.Bind(&in.Override); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageUpdateConsumerOverride)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateConsumerOverride(ctx, req.(*UpdateConsumerOverrideRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_DeleteConsumerOverride0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteConsumerOverrideRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageDeleteConsumerOverride)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteConsumerOverride(ctx, req.(*DeleteConsumerOverrideRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_ListConsumerOverrides0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListConsumerOverridesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageListConsumerOverrides)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListConsumerOverrides(ctx, req.(*ListConsumerOverridesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListConsumerOverridesResponse)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_ImportConsumerOverrides0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ImportConsumerOverridesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageImportConsumerOverrides)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ImportConsumerOverrides(ctx, req.(*ImportConsumerOverridesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceUsage_GenerateServiceIdentity0_HTTP_Handler(srv ServiceUsageHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateServiceIdentityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUsageGenerateServiceIdentity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateServiceIdentity(ctx, req.(*GenerateServiceIdentityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

type ServiceUsageHTTPClient interface {
	BatchEnableServices(ctx context.Context, req *BatchEnableServicesRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	CreateAdminOverride(ctx context.Context, req *CreateAdminOverrideRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	CreateConsumerOverride(ctx context.Context, req *CreateConsumerOverrideRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	DeleteAdminOverride(ctx context.Context, req *DeleteAdminOverrideRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	DeleteConsumerOverride(ctx context.Context, req *DeleteConsumerOverrideRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	DisableService(ctx context.Context, req *DisableServiceRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	EnableService(ctx context.Context, req *EnableServiceRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	GenerateServiceIdentity(ctx context.Context, req *GenerateServiceIdentityRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	GetConsumerQuotaLimit(ctx context.Context, req *GetConsumerQuotaLimitRequest, opts ...http.CallOption) (rsp *ConsumerQuotaLimit, err error)
	GetConsumerQuotaMetric(ctx context.Context, req *GetConsumerQuotaMetricRequest, opts ...http.CallOption) (rsp *ConsumerQuotaMetric, err error)
	GetService(ctx context.Context, req *GetServiceRequest, opts ...http.CallOption) (rsp *Service, err error)
	ImportAdminOverrides(ctx context.Context, req *ImportAdminOverridesRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	ImportConsumerOverrides(ctx context.Context, req *ImportConsumerOverridesRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	ListAdminOverrides(ctx context.Context, req *ListAdminOverridesRequest, opts ...http.CallOption) (rsp *ListAdminOverridesResponse, err error)
	ListConsumerOverrides(ctx context.Context, req *ListConsumerOverridesRequest, opts ...http.CallOption) (rsp *ListConsumerOverridesResponse, err error)
	ListConsumerQuotaMetrics(ctx context.Context, req *ListConsumerQuotaMetricsRequest, opts ...http.CallOption) (rsp *ListConsumerQuotaMetricsResponse, err error)
	ListServices(ctx context.Context, req *ListServicesRequest, opts ...http.CallOption) (rsp *ListServicesResponse, err error)
	UpdateAdminOverride(ctx context.Context, req *UpdateAdminOverrideRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	UpdateConsumerOverride(ctx context.Context, req *UpdateConsumerOverrideRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
}

type ServiceUsageHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceUsageHTTPClient(client *http.Client) ServiceUsageHTTPClient {
	return &ServiceUsageHTTPClientImpl{client}
}

func (c *ServiceUsageHTTPClientImpl) BatchEnableServices(ctx context.Context, in *BatchEnableServicesRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1beta1/{parent:.*/.*}/services:batchEnable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUsageBatchEnableServices))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) CreateAdminOverride(ctx context.Context, in *CreateAdminOverrideRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1beta1/{parent:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*}/adminOverrides"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUsageCreateAdminOverride))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Override, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) CreateConsumerOverride(ctx context.Context, in *CreateConsumerOverrideRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1beta1/{parent:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*}/consumerOverrides"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUsageCreateConsumerOverride))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Override, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) DeleteAdminOverride(ctx context.Context, in *DeleteAdminOverrideRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1beta1/{name:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*/adminOverrides/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceUsageDeleteAdminOverride))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) DeleteConsumerOverride(ctx context.Context, in *DeleteConsumerOverrideRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1beta1/{name:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*/consumerOverrides/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceUsageDeleteConsumerOverride))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) DisableService(ctx context.Context, in *DisableServiceRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1beta1/{name:.*/.*/services/.*}:disable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUsageDisableService))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) EnableService(ctx context.Context, in *EnableServiceRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1beta1/{name:.*/.*/services/.*}:enable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUsageEnableService))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) GenerateServiceIdentity(ctx context.Context, in *GenerateServiceIdentityRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1beta1/{parent:.*/.*/services/.*}:generateServiceIdentity"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceUsageGenerateServiceIdentity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) GetConsumerQuotaLimit(ctx context.Context, in *GetConsumerQuotaLimitRequest, opts ...http.CallOption) (*ConsumerQuotaLimit, error) {
	var out ConsumerQuotaLimit
	pattern := "/v1beta1/{name:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceUsageGetConsumerQuotaLimit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) GetConsumerQuotaMetric(ctx context.Context, in *GetConsumerQuotaMetricRequest, opts ...http.CallOption) (*ConsumerQuotaMetric, error) {
	var out ConsumerQuotaMetric
	pattern := "/v1beta1/{name:.*/.*/services/.*/consumerQuotaMetrics/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceUsageGetConsumerQuotaMetric))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) GetService(ctx context.Context, in *GetServiceRequest, opts ...http.CallOption) (*Service, error) {
	var out Service
	pattern := "/v1beta1/{name:.*/.*/services/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceUsageGetService))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) ImportAdminOverrides(ctx context.Context, in *ImportAdminOverridesRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1beta1/{parent:.*/.*/services/.*}/consumerQuotaMetrics:importAdminOverrides"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUsageImportAdminOverrides))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) ImportConsumerOverrides(ctx context.Context, in *ImportConsumerOverridesRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1beta1/{parent:.*/.*/services/.*}/consumerQuotaMetrics:importConsumerOverrides"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUsageImportConsumerOverrides))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) ListAdminOverrides(ctx context.Context, in *ListAdminOverridesRequest, opts ...http.CallOption) (*ListAdminOverridesResponse, error) {
	var out ListAdminOverridesResponse
	pattern := "/v1beta1/{parent:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*}/adminOverrides"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceUsageListAdminOverrides))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) ListConsumerOverrides(ctx context.Context, in *ListConsumerOverridesRequest, opts ...http.CallOption) (*ListConsumerOverridesResponse, error) {
	var out ListConsumerOverridesResponse
	pattern := "/v1beta1/{parent:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*}/consumerOverrides"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceUsageListConsumerOverrides))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) ListConsumerQuotaMetrics(ctx context.Context, in *ListConsumerQuotaMetricsRequest, opts ...http.CallOption) (*ListConsumerQuotaMetricsResponse, error) {
	var out ListConsumerQuotaMetricsResponse
	pattern := "/v1beta1/{parent:.*/.*/services/.*}/consumerQuotaMetrics"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceUsageListConsumerQuotaMetrics))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) ListServices(ctx context.Context, in *ListServicesRequest, opts ...http.CallOption) (*ListServicesResponse, error) {
	var out ListServicesResponse
	pattern := "/v1beta1/{parent:.*/.*}/services"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceUsageListServices))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) UpdateAdminOverride(ctx context.Context, in *UpdateAdminOverrideRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1beta1/{name:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*/adminOverrides/.*}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUsageUpdateAdminOverride))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in.Override, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceUsageHTTPClientImpl) UpdateConsumerOverride(ctx context.Context, in *UpdateConsumerOverrideRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1beta1/{name:.*/.*/services/.*/consumerQuotaMetrics/.*/limits/.*/consumerOverrides/.*}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUsageUpdateConsumerOverride))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in.Override, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
