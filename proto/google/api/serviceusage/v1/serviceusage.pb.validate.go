// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/serviceusage/v1/serviceusage.proto

package serviceusagepb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EnableServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableServiceRequestMultiError, or nil if none found.
func (m *EnableServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return EnableServiceRequestMultiError(errors)
	}

	return nil
}

// EnableServiceRequestMultiError is an error wrapping multiple validation
// errors returned by EnableServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type EnableServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableServiceRequestMultiError) AllErrors() []error { return m }

// EnableServiceRequestValidationError is the validation error returned by
// EnableServiceRequest.Validate if the designated constraints aren't met.
type EnableServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableServiceRequestValidationError) ErrorName() string {
	return "EnableServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableServiceRequestValidationError{}

// Validate checks the field values on EnableServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableServiceResponseMultiError, or nil if none found.
func (m *EnableServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnableServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnableServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnableServiceResponseValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EnableServiceResponseMultiError(errors)
	}

	return nil
}

// EnableServiceResponseMultiError is an error wrapping multiple validation
// errors returned by EnableServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type EnableServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableServiceResponseMultiError) AllErrors() []error { return m }

// EnableServiceResponseValidationError is the validation error returned by
// EnableServiceResponse.Validate if the designated constraints aren't met.
type EnableServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableServiceResponseValidationError) ErrorName() string {
	return "EnableServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableServiceResponseValidationError{}

// Validate checks the field values on DisableServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableServiceRequestMultiError, or nil if none found.
func (m *DisableServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisableDependentServices

	// no validation rules for CheckIfServiceHasUsage

	if len(errors) > 0 {
		return DisableServiceRequestMultiError(errors)
	}

	return nil
}

// DisableServiceRequestMultiError is an error wrapping multiple validation
// errors returned by DisableServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type DisableServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableServiceRequestMultiError) AllErrors() []error { return m }

// DisableServiceRequestValidationError is the validation error returned by
// DisableServiceRequest.Validate if the designated constraints aren't met.
type DisableServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableServiceRequestValidationError) ErrorName() string {
	return "DisableServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableServiceRequestValidationError{}

// Validate checks the field values on DisableServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableServiceResponseMultiError, or nil if none found.
func (m *DisableServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DisableServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DisableServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DisableServiceResponseValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DisableServiceResponseMultiError(errors)
	}

	return nil
}

// DisableServiceResponseMultiError is an error wrapping multiple validation
// errors returned by DisableServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type DisableServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableServiceResponseMultiError) AllErrors() []error { return m }

// DisableServiceResponseValidationError is the validation error returned by
// DisableServiceResponse.Validate if the designated constraints aren't met.
type DisableServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableServiceResponseValidationError) ErrorName() string {
	return "DisableServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableServiceResponseValidationError{}

// Validate checks the field values on GetServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceRequestMultiError, or nil if none found.
func (m *GetServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetServiceRequestMultiError(errors)
	}

	return nil
}

// GetServiceRequestMultiError is an error wrapping multiple validation errors
// returned by GetServiceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceRequestMultiError) AllErrors() []error { return m }

// GetServiceRequestValidationError is the validation error returned by
// GetServiceRequest.Validate if the designated constraints aren't met.
type GetServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceRequestValidationError) ErrorName() string {
	return "GetServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceRequestValidationError{}

// Validate checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesRequestMultiError, or nil if none found.
func (m *ListServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for Filter

	if len(errors) > 0 {
		return ListServicesRequestMultiError(errors)
	}

	return nil
}

// ListServicesRequestMultiError is an error wrapping multiple validation
// errors returned by ListServicesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesRequestMultiError) AllErrors() []error { return m }

// ListServicesRequestValidationError is the validation error returned by
// ListServicesRequest.Validate if the designated constraints aren't met.
type ListServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesRequestValidationError) ErrorName() string {
	return "ListServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesRequestValidationError{}

// Validate checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesResponseMultiError, or nil if none found.
func (m *ListServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListServicesResponseMultiError(errors)
	}

	return nil
}

// ListServicesResponseMultiError is an error wrapping multiple validation
// errors returned by ListServicesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesResponseMultiError) AllErrors() []error { return m }

// ListServicesResponseValidationError is the validation error returned by
// ListServicesResponse.Validate if the designated constraints aren't met.
type ListServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesResponseValidationError) ErrorName() string {
	return "ListServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesResponseValidationError{}

// Validate checks the field values on BatchEnableServicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchEnableServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchEnableServicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchEnableServicesRequestMultiError, or nil if none found.
func (m *BatchEnableServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchEnableServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if len(errors) > 0 {
		return BatchEnableServicesRequestMultiError(errors)
	}

	return nil
}

// BatchEnableServicesRequestMultiError is an error wrapping multiple
// validation errors returned by BatchEnableServicesRequest.ValidateAll() if
// the designated constraints aren't met.
type BatchEnableServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchEnableServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchEnableServicesRequestMultiError) AllErrors() []error { return m }

// BatchEnableServicesRequestValidationError is the validation error returned
// by BatchEnableServicesRequest.Validate if the designated constraints aren't met.
type BatchEnableServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchEnableServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchEnableServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchEnableServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchEnableServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchEnableServicesRequestValidationError) ErrorName() string {
	return "BatchEnableServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchEnableServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchEnableServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchEnableServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchEnableServicesRequestValidationError{}

// Validate checks the field values on BatchEnableServicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchEnableServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchEnableServicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchEnableServicesResponseMultiError, or nil if none found.
func (m *BatchEnableServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchEnableServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchEnableServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchEnableServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchEnableServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFailures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchEnableServicesResponseValidationError{
						field:  fmt.Sprintf("Failures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchEnableServicesResponseValidationError{
						field:  fmt.Sprintf("Failures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchEnableServicesResponseValidationError{
					field:  fmt.Sprintf("Failures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchEnableServicesResponseMultiError(errors)
	}

	return nil
}

// BatchEnableServicesResponseMultiError is an error wrapping multiple
// validation errors returned by BatchEnableServicesResponse.ValidateAll() if
// the designated constraints aren't met.
type BatchEnableServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchEnableServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchEnableServicesResponseMultiError) AllErrors() []error { return m }

// BatchEnableServicesResponseValidationError is the validation error returned
// by BatchEnableServicesResponse.Validate if the designated constraints
// aren't met.
type BatchEnableServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchEnableServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchEnableServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchEnableServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchEnableServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchEnableServicesResponseValidationError) ErrorName() string {
	return "BatchEnableServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchEnableServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchEnableServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchEnableServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchEnableServicesResponseValidationError{}

// Validate checks the field values on BatchGetServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchGetServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetServicesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchGetServicesRequestMultiError, or nil if none found.
func (m *BatchGetServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if len(errors) > 0 {
		return BatchGetServicesRequestMultiError(errors)
	}

	return nil
}

// BatchGetServicesRequestMultiError is an error wrapping multiple validation
// errors returned by BatchGetServicesRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchGetServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetServicesRequestMultiError) AllErrors() []error { return m }

// BatchGetServicesRequestValidationError is the validation error returned by
// BatchGetServicesRequest.Validate if the designated constraints aren't met.
type BatchGetServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetServicesRequestValidationError) ErrorName() string {
	return "BatchGetServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetServicesRequestValidationError{}

// Validate checks the field values on BatchGetServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchGetServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchGetServicesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchGetServicesResponseMultiError, or nil if none found.
func (m *BatchGetServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchGetServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchGetServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchGetServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchGetServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchGetServicesResponseMultiError(errors)
	}

	return nil
}

// BatchGetServicesResponseMultiError is an error wrapping multiple validation
// errors returned by BatchGetServicesResponse.ValidateAll() if the designated
// constraints aren't met.
type BatchGetServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchGetServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchGetServicesResponseMultiError) AllErrors() []error { return m }

// BatchGetServicesResponseValidationError is the validation error returned by
// BatchGetServicesResponse.Validate if the designated constraints aren't met.
type BatchGetServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchGetServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchGetServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchGetServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchGetServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchGetServicesResponseValidationError) ErrorName() string {
	return "BatchGetServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchGetServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchGetServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchGetServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchGetServicesResponseValidationError{}

// Validate checks the field values on
// BatchEnableServicesResponse_EnableFailure with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BatchEnableServicesResponse_EnableFailure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BatchEnableServicesResponse_EnableFailure with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BatchEnableServicesResponse_EnableFailureMultiError, or nil if none found.
func (m *BatchEnableServicesResponse_EnableFailure) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchEnableServicesResponse_EnableFailure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceId

	// no validation rules for ErrorMessage

	if len(errors) > 0 {
		return BatchEnableServicesResponse_EnableFailureMultiError(errors)
	}

	return nil
}

// BatchEnableServicesResponse_EnableFailureMultiError is an error wrapping
// multiple validation errors returned by
// BatchEnableServicesResponse_EnableFailure.ValidateAll() if the designated
// constraints aren't met.
type BatchEnableServicesResponse_EnableFailureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchEnableServicesResponse_EnableFailureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchEnableServicesResponse_EnableFailureMultiError) AllErrors() []error { return m }

// BatchEnableServicesResponse_EnableFailureValidationError is the validation
// error returned by BatchEnableServicesResponse_EnableFailure.Validate if the
// designated constraints aren't met.
type BatchEnableServicesResponse_EnableFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchEnableServicesResponse_EnableFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchEnableServicesResponse_EnableFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchEnableServicesResponse_EnableFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchEnableServicesResponse_EnableFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchEnableServicesResponse_EnableFailureValidationError) ErrorName() string {
	return "BatchEnableServicesResponse_EnableFailureValidationError"
}

// Error satisfies the builtin error interface
func (e BatchEnableServicesResponse_EnableFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchEnableServicesResponse_EnableFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchEnableServicesResponse_EnableFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchEnableServicesResponse_EnableFailureValidationError{}
