// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/api/servicemanagement/v1/servicemanager.proto

package servicemanagementpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesRequestMultiError, or nil if none found.
func (m *ListServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProducerProjectId

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for ConsumerId

	if len(errors) > 0 {
		return ListServicesRequestMultiError(errors)
	}

	return nil
}

// ListServicesRequestMultiError is an error wrapping multiple validation
// errors returned by ListServicesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesRequestMultiError) AllErrors() []error { return m }

// ListServicesRequestValidationError is the validation error returned by
// ListServicesRequest.Validate if the designated constraints aren't met.
type ListServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesRequestValidationError) ErrorName() string {
	return "ListServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesRequestValidationError{}

// Validate checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesResponseMultiError, or nil if none found.
func (m *ListServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListServicesResponseMultiError(errors)
	}

	return nil
}

// ListServicesResponseMultiError is an error wrapping multiple validation
// errors returned by ListServicesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesResponseMultiError) AllErrors() []error { return m }

// ListServicesResponseValidationError is the validation error returned by
// ListServicesResponse.Validate if the designated constraints aren't met.
type ListServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesResponseValidationError) ErrorName() string {
	return "ListServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesResponseValidationError{}

// Validate checks the field values on GetServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceRequestMultiError, or nil if none found.
func (m *GetServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return GetServiceRequestMultiError(errors)
	}

	return nil
}

// GetServiceRequestMultiError is an error wrapping multiple validation errors
// returned by GetServiceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceRequestMultiError) AllErrors() []error { return m }

// GetServiceRequestValidationError is the validation error returned by
// GetServiceRequest.Validate if the designated constraints aren't met.
type GetServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceRequestValidationError) ErrorName() string {
	return "GetServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceRequestValidationError{}

// Validate checks the field values on CreateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceRequestMultiError, or nil if none found.
func (m *CreateServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceRequestValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceRequestValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceRequestValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceRequestMultiError(errors)
	}

	return nil
}

// CreateServiceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceRequestMultiError) AllErrors() []error { return m }

// CreateServiceRequestValidationError is the validation error returned by
// CreateServiceRequest.Validate if the designated constraints aren't met.
type CreateServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceRequestValidationError) ErrorName() string {
	return "CreateServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceRequestValidationError{}

// Validate checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceRequestMultiError, or nil if none found.
func (m *DeleteServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return DeleteServiceRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceRequestMultiError) AllErrors() []error { return m }

// DeleteServiceRequestValidationError is the validation error returned by
// DeleteServiceRequest.Validate if the designated constraints aren't met.
type DeleteServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceRequestValidationError) ErrorName() string {
	return "DeleteServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceRequestValidationError{}

// Validate checks the field values on UndeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UndeleteServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UndeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UndeleteServiceRequestMultiError, or nil if none found.
func (m *UndeleteServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UndeleteServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if len(errors) > 0 {
		return UndeleteServiceRequestMultiError(errors)
	}

	return nil
}

// UndeleteServiceRequestMultiError is an error wrapping multiple validation
// errors returned by UndeleteServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type UndeleteServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndeleteServiceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndeleteServiceRequestMultiError) AllErrors() []error { return m }

// UndeleteServiceRequestValidationError is the validation error returned by
// UndeleteServiceRequest.Validate if the designated constraints aren't met.
type UndeleteServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndeleteServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndeleteServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndeleteServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndeleteServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndeleteServiceRequestValidationError) ErrorName() string {
	return "UndeleteServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UndeleteServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndeleteServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndeleteServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndeleteServiceRequestValidationError{}

// Validate checks the field values on UndeleteServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UndeleteServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UndeleteServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UndeleteServiceResponseMultiError, or nil if none found.
func (m *UndeleteServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UndeleteServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetService()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UndeleteServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UndeleteServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UndeleteServiceResponseValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UndeleteServiceResponseMultiError(errors)
	}

	return nil
}

// UndeleteServiceResponseMultiError is an error wrapping multiple validation
// errors returned by UndeleteServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type UndeleteServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndeleteServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndeleteServiceResponseMultiError) AllErrors() []error { return m }

// UndeleteServiceResponseValidationError is the validation error returned by
// UndeleteServiceResponse.Validate if the designated constraints aren't met.
type UndeleteServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndeleteServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndeleteServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndeleteServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndeleteServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndeleteServiceResponseValidationError) ErrorName() string {
	return "UndeleteServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UndeleteServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndeleteServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndeleteServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndeleteServiceResponseValidationError{}

// Validate checks the field values on GetServiceConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceConfigRequestMultiError, or nil if none found.
func (m *GetServiceConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for ConfigId

	// no validation rules for View

	if len(errors) > 0 {
		return GetServiceConfigRequestMultiError(errors)
	}

	return nil
}

// GetServiceConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GetServiceConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetServiceConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceConfigRequestMultiError) AllErrors() []error { return m }

// GetServiceConfigRequestValidationError is the validation error returned by
// GetServiceConfigRequest.Validate if the designated constraints aren't met.
type GetServiceConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceConfigRequestValidationError) ErrorName() string {
	return "GetServiceConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceConfigRequestValidationError{}

// Validate checks the field values on ListServiceConfigsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceConfigsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceConfigsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceConfigsRequestMultiError, or nil if none found.
func (m *ListServiceConfigsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceConfigsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListServiceConfigsRequestMultiError(errors)
	}

	return nil
}

// ListServiceConfigsRequestMultiError is an error wrapping multiple validation
// errors returned by ListServiceConfigsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListServiceConfigsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceConfigsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceConfigsRequestMultiError) AllErrors() []error { return m }

// ListServiceConfigsRequestValidationError is the validation error returned by
// ListServiceConfigsRequest.Validate if the designated constraints aren't met.
type ListServiceConfigsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceConfigsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceConfigsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceConfigsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceConfigsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceConfigsRequestValidationError) ErrorName() string {
	return "ListServiceConfigsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceConfigsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceConfigsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceConfigsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceConfigsRequestValidationError{}

// Validate checks the field values on ListServiceConfigsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceConfigsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceConfigsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceConfigsResponseMultiError, or nil if none found.
func (m *ListServiceConfigsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceConfigsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServiceConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServiceConfigsResponseValidationError{
						field:  fmt.Sprintf("ServiceConfigs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServiceConfigsResponseValidationError{
						field:  fmt.Sprintf("ServiceConfigs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceConfigsResponseValidationError{
					field:  fmt.Sprintf("ServiceConfigs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListServiceConfigsResponseMultiError(errors)
	}

	return nil
}

// ListServiceConfigsResponseMultiError is an error wrapping multiple
// validation errors returned by ListServiceConfigsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListServiceConfigsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceConfigsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceConfigsResponseMultiError) AllErrors() []error { return m }

// ListServiceConfigsResponseValidationError is the validation error returned
// by ListServiceConfigsResponse.Validate if the designated constraints aren't met.
type ListServiceConfigsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceConfigsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceConfigsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceConfigsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceConfigsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceConfigsResponseValidationError) ErrorName() string {
	return "ListServiceConfigsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceConfigsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceConfigsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceConfigsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceConfigsResponseValidationError{}

// Validate checks the field values on CreateServiceConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceConfigRequestMultiError, or nil if none found.
func (m *CreateServiceConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if all {
		switch v := interface{}(m.GetServiceConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceConfigRequestValidationError{
					field:  "ServiceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceConfigRequestValidationError{
					field:  "ServiceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceConfigRequestValidationError{
				field:  "ServiceConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceConfigRequestMultiError(errors)
	}

	return nil
}

// CreateServiceConfigRequestMultiError is an error wrapping multiple
// validation errors returned by CreateServiceConfigRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateServiceConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceConfigRequestMultiError) AllErrors() []error { return m }

// CreateServiceConfigRequestValidationError is the validation error returned
// by CreateServiceConfigRequest.Validate if the designated constraints aren't met.
type CreateServiceConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceConfigRequestValidationError) ErrorName() string {
	return "CreateServiceConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceConfigRequestValidationError{}

// Validate checks the field values on SubmitConfigSourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitConfigSourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitConfigSourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitConfigSourceRequestMultiError, or nil if none found.
func (m *SubmitConfigSourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitConfigSourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if all {
		switch v := interface{}(m.GetConfigSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitConfigSourceRequestValidationError{
					field:  "ConfigSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitConfigSourceRequestValidationError{
					field:  "ConfigSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitConfigSourceRequestValidationError{
				field:  "ConfigSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ValidateOnly

	if len(errors) > 0 {
		return SubmitConfigSourceRequestMultiError(errors)
	}

	return nil
}

// SubmitConfigSourceRequestMultiError is an error wrapping multiple validation
// errors returned by SubmitConfigSourceRequest.ValidateAll() if the
// designated constraints aren't met.
type SubmitConfigSourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitConfigSourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitConfigSourceRequestMultiError) AllErrors() []error { return m }

// SubmitConfigSourceRequestValidationError is the validation error returned by
// SubmitConfigSourceRequest.Validate if the designated constraints aren't met.
type SubmitConfigSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitConfigSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitConfigSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitConfigSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitConfigSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitConfigSourceRequestValidationError) ErrorName() string {
	return "SubmitConfigSourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitConfigSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitConfigSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitConfigSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitConfigSourceRequestValidationError{}

// Validate checks the field values on SubmitConfigSourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitConfigSourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitConfigSourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitConfigSourceResponseMultiError, or nil if none found.
func (m *SubmitConfigSourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitConfigSourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitConfigSourceResponseValidationError{
					field:  "ServiceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitConfigSourceResponseValidationError{
					field:  "ServiceConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitConfigSourceResponseValidationError{
				field:  "ServiceConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubmitConfigSourceResponseMultiError(errors)
	}

	return nil
}

// SubmitConfigSourceResponseMultiError is an error wrapping multiple
// validation errors returned by SubmitConfigSourceResponse.ValidateAll() if
// the designated constraints aren't met.
type SubmitConfigSourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitConfigSourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitConfigSourceResponseMultiError) AllErrors() []error { return m }

// SubmitConfigSourceResponseValidationError is the validation error returned
// by SubmitConfigSourceResponse.Validate if the designated constraints aren't met.
type SubmitConfigSourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitConfigSourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitConfigSourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitConfigSourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitConfigSourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitConfigSourceResponseValidationError) ErrorName() string {
	return "SubmitConfigSourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitConfigSourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitConfigSourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitConfigSourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitConfigSourceResponseValidationError{}

// Validate checks the field values on CreateServiceRolloutRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceRolloutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceRolloutRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceRolloutRequestMultiError, or nil if none found.
func (m *CreateServiceRolloutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceRolloutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	if all {
		switch v := interface{}(m.GetRollout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceRolloutRequestValidationError{
					field:  "Rollout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceRolloutRequestValidationError{
					field:  "Rollout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRollout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceRolloutRequestValidationError{
				field:  "Rollout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceRolloutRequestMultiError(errors)
	}

	return nil
}

// CreateServiceRolloutRequestMultiError is an error wrapping multiple
// validation errors returned by CreateServiceRolloutRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateServiceRolloutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceRolloutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceRolloutRequestMultiError) AllErrors() []error { return m }

// CreateServiceRolloutRequestValidationError is the validation error returned
// by CreateServiceRolloutRequest.Validate if the designated constraints
// aren't met.
type CreateServiceRolloutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceRolloutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceRolloutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceRolloutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceRolloutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceRolloutRequestValidationError) ErrorName() string {
	return "CreateServiceRolloutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceRolloutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceRolloutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceRolloutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceRolloutRequestValidationError{}

// Validate checks the field values on ListServiceRolloutsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceRolloutsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceRolloutsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceRolloutsRequestMultiError, or nil if none found.
func (m *ListServiceRolloutsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceRolloutsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for PageToken

	// no validation rules for PageSize

	// no validation rules for Filter

	if len(errors) > 0 {
		return ListServiceRolloutsRequestMultiError(errors)
	}

	return nil
}

// ListServiceRolloutsRequestMultiError is an error wrapping multiple
// validation errors returned by ListServiceRolloutsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListServiceRolloutsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceRolloutsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceRolloutsRequestMultiError) AllErrors() []error { return m }

// ListServiceRolloutsRequestValidationError is the validation error returned
// by ListServiceRolloutsRequest.Validate if the designated constraints aren't met.
type ListServiceRolloutsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceRolloutsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceRolloutsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceRolloutsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceRolloutsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceRolloutsRequestValidationError) ErrorName() string {
	return "ListServiceRolloutsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceRolloutsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceRolloutsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceRolloutsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceRolloutsRequestValidationError{}

// Validate checks the field values on ListServiceRolloutsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceRolloutsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceRolloutsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceRolloutsResponseMultiError, or nil if none found.
func (m *ListServiceRolloutsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceRolloutsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRollouts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServiceRolloutsResponseValidationError{
						field:  fmt.Sprintf("Rollouts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServiceRolloutsResponseValidationError{
						field:  fmt.Sprintf("Rollouts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceRolloutsResponseValidationError{
					field:  fmt.Sprintf("Rollouts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListServiceRolloutsResponseMultiError(errors)
	}

	return nil
}

// ListServiceRolloutsResponseMultiError is an error wrapping multiple
// validation errors returned by ListServiceRolloutsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListServiceRolloutsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceRolloutsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceRolloutsResponseMultiError) AllErrors() []error { return m }

// ListServiceRolloutsResponseValidationError is the validation error returned
// by ListServiceRolloutsResponse.Validate if the designated constraints
// aren't met.
type ListServiceRolloutsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceRolloutsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceRolloutsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceRolloutsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceRolloutsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceRolloutsResponseValidationError) ErrorName() string {
	return "ListServiceRolloutsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceRolloutsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceRolloutsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceRolloutsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceRolloutsResponseValidationError{}

// Validate checks the field values on GetServiceRolloutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceRolloutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceRolloutRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceRolloutRequestMultiError, or nil if none found.
func (m *GetServiceRolloutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceRolloutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for RolloutId

	if len(errors) > 0 {
		return GetServiceRolloutRequestMultiError(errors)
	}

	return nil
}

// GetServiceRolloutRequestMultiError is an error wrapping multiple validation
// errors returned by GetServiceRolloutRequest.ValidateAll() if the designated
// constraints aren't met.
type GetServiceRolloutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceRolloutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceRolloutRequestMultiError) AllErrors() []error { return m }

// GetServiceRolloutRequestValidationError is the validation error returned by
// GetServiceRolloutRequest.Validate if the designated constraints aren't met.
type GetServiceRolloutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceRolloutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceRolloutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceRolloutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceRolloutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceRolloutRequestValidationError) ErrorName() string {
	return "GetServiceRolloutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceRolloutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceRolloutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceRolloutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceRolloutRequestValidationError{}

// Validate checks the field values on EnableServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableServiceResponseMultiError, or nil if none found.
func (m *EnableServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableServiceResponseMultiError(errors)
	}

	return nil
}

// EnableServiceResponseMultiError is an error wrapping multiple validation
// errors returned by EnableServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type EnableServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableServiceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableServiceResponseMultiError) AllErrors() []error { return m }

// EnableServiceResponseValidationError is the validation error returned by
// EnableServiceResponse.Validate if the designated constraints aren't met.
type EnableServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableServiceResponseValidationError) ErrorName() string {
	return "EnableServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableServiceResponseValidationError{}

// Validate checks the field values on GenerateConfigReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateConfigReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateConfigReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateConfigReportRequestMultiError, or nil if none found.
func (m *GenerateConfigReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateConfigReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNewConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateConfigReportRequestValidationError{
					field:  "NewConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateConfigReportRequestValidationError{
					field:  "NewConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateConfigReportRequestValidationError{
				field:  "NewConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOldConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateConfigReportRequestValidationError{
					field:  "OldConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateConfigReportRequestValidationError{
					field:  "OldConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOldConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateConfigReportRequestValidationError{
				field:  "OldConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateConfigReportRequestMultiError(errors)
	}

	return nil
}

// GenerateConfigReportRequestMultiError is an error wrapping multiple
// validation errors returned by GenerateConfigReportRequest.ValidateAll() if
// the designated constraints aren't met.
type GenerateConfigReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateConfigReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateConfigReportRequestMultiError) AllErrors() []error { return m }

// GenerateConfigReportRequestValidationError is the validation error returned
// by GenerateConfigReportRequest.Validate if the designated constraints
// aren't met.
type GenerateConfigReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateConfigReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateConfigReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateConfigReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateConfigReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateConfigReportRequestValidationError) ErrorName() string {
	return "GenerateConfigReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateConfigReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateConfigReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateConfigReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateConfigReportRequestValidationError{}

// Validate checks the field values on GenerateConfigReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateConfigReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateConfigReportResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateConfigReportResponseMultiError, or nil if none found.
func (m *GenerateConfigReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateConfigReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceName

	// no validation rules for Id

	for idx, item := range m.GetChangeReports() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenerateConfigReportResponseValidationError{
						field:  fmt.Sprintf("ChangeReports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenerateConfigReportResponseValidationError{
						field:  fmt.Sprintf("ChangeReports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenerateConfigReportResponseValidationError{
					field:  fmt.Sprintf("ChangeReports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDiagnostics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenerateConfigReportResponseValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenerateConfigReportResponseValidationError{
						field:  fmt.Sprintf("Diagnostics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenerateConfigReportResponseValidationError{
					field:  fmt.Sprintf("Diagnostics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GenerateConfigReportResponseMultiError(errors)
	}

	return nil
}

// GenerateConfigReportResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateConfigReportResponse.ValidateAll() if
// the designated constraints aren't met.
type GenerateConfigReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateConfigReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateConfigReportResponseMultiError) AllErrors() []error { return m }

// GenerateConfigReportResponseValidationError is the validation error returned
// by GenerateConfigReportResponse.Validate if the designated constraints
// aren't met.
type GenerateConfigReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateConfigReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateConfigReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateConfigReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateConfigReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateConfigReportResponseValidationError) ErrorName() string {
	return "GenerateConfigReportResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateConfigReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateConfigReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateConfigReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateConfigReportResponseValidationError{}
