// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: google/api/servicemanagement/v1/servicemanager.proto

package servicemanagementpb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	serviceconfig "google.golang.org/genproto/googleapis/api/serviceconfig"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceManagerCreateService = "/google.api.servicemanagement.v1.ServiceManager/CreateService"
const OperationServiceManagerCreateServiceConfig = "/google.api.servicemanagement.v1.ServiceManager/CreateServiceConfig"
const OperationServiceManagerCreateServiceRollout = "/google.api.servicemanagement.v1.ServiceManager/CreateServiceRollout"
const OperationServiceManagerDeleteService = "/google.api.servicemanagement.v1.ServiceManager/DeleteService"
const OperationServiceManagerGenerateConfigReport = "/google.api.servicemanagement.v1.ServiceManager/GenerateConfigReport"
const OperationServiceManagerGetService = "/google.api.servicemanagement.v1.ServiceManager/GetService"
const OperationServiceManagerGetServiceConfig = "/google.api.servicemanagement.v1.ServiceManager/GetServiceConfig"
const OperationServiceManagerGetServiceRollout = "/google.api.servicemanagement.v1.ServiceManager/GetServiceRollout"
const OperationServiceManagerListServiceConfigs = "/google.api.servicemanagement.v1.ServiceManager/ListServiceConfigs"
const OperationServiceManagerListServiceRollouts = "/google.api.servicemanagement.v1.ServiceManager/ListServiceRollouts"
const OperationServiceManagerListServices = "/google.api.servicemanagement.v1.ServiceManager/ListServices"
const OperationServiceManagerSubmitConfigSource = "/google.api.servicemanagement.v1.ServiceManager/SubmitConfigSource"
const OperationServiceManagerUndeleteService = "/google.api.servicemanagement.v1.ServiceManager/UndeleteService"

type ServiceManagerHTTPServer interface {
	// CreateService Creates a new managed service.
	//
	// A managed service is immutable, and is subject to mandatory 30-day
	// data retention. You cannot move a service or recreate it within 30 days
	// after deletion.
	//
	// One producer project can own no more than 500 services. For security and
	// reliability purposes, a production service should be hosted in a
	// dedicated producer project.
	//
	// Operation<response: ManagedService>
	CreateService(context.Context, *CreateServiceRequest) (*longrunningpb.Operation, error)
	// CreateServiceConfig Creates a new service configuration (version) for a managed service.
	// This method only stores the service configuration. To roll out the service
	// configuration to backend systems please call
	// [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
	//
	// Only the 100 most recent service configurations and ones referenced by
	// existing rollouts are kept for each service. The rest will be deleted
	// eventually.
	CreateServiceConfig(context.Context, *CreateServiceConfigRequest) (*serviceconfig.Service, error)
	// CreateServiceRollout Creates a new service configuration rollout. Based on rollout, the
	// Google Service Management will roll out the service configurations to
	// different backend services. For example, the logging configuration will be
	// pushed to Google Cloud Logging.
	//
	// Please note that any previous pending and running Rollouts and associated
	// Operations will be automatically cancelled so that the latest Rollout will
	// not be blocked by previous Rollouts.
	//
	// Only the 100 most recent (in any state) and the last 10 successful (if not
	// already part of the set of 100 most recent) rollouts are kept for each
	// service. The rest will be deleted eventually.
	//
	// Operation<response: Rollout>
	CreateServiceRollout(context.Context, *CreateServiceRolloutRequest) (*longrunningpb.Operation, error)
	// DeleteService Deletes a managed service. This method will change the service to the
	// `Soft-Delete` state for 30 days. Within this period, service producers may
	// call
	// [UndeleteService][google.api.servicemanagement.v1.ServiceManager.UndeleteService]
	// to restore the service. After 30 days, the service will be permanently
	// deleted.
	//
	// Operation<response: google.protobuf.Empty>
	DeleteService(context.Context, *DeleteServiceRequest) (*longrunningpb.Operation, error)
	// GenerateConfigReport Generates and returns a report (errors, warnings and changes from
	// existing configurations) associated with
	// GenerateConfigReportRequest.new_value
	//
	// If GenerateConfigReportRequest.old_value is specified,
	// GenerateConfigReportRequest will contain a single ChangeReport based on the
	// comparison between GenerateConfigReportRequest.new_value and
	// GenerateConfigReportRequest.old_value.
	// If GenerateConfigReportRequest.old_value is not specified, this method
	// will compare GenerateConfigReportRequest.new_value with the last pushed
	// service configuration.
	GenerateConfigReport(context.Context, *GenerateConfigReportRequest) (*GenerateConfigReportResponse, error)
	// GetService Gets a managed service. Authentication is required unless the service is
	// public.
	GetService(context.Context, *GetServiceRequest) (*ManagedService, error)
	// GetServiceConfig Gets a service configuration (version) for a managed service.
	GetServiceConfig(context.Context, *GetServiceConfigRequest) (*serviceconfig.Service, error)
	// GetServiceRollout Gets a service configuration
	// [rollout][google.api.servicemanagement.v1.Rollout].
	GetServiceRollout(context.Context, *GetServiceRolloutRequest) (*Rollout, error)
	// ListServiceConfigs Lists the history of the service configuration for a managed service,
	// from the newest to the oldest.
	ListServiceConfigs(context.Context, *ListServiceConfigsRequest) (*ListServiceConfigsResponse, error)
	// ListServiceRollouts Lists the history of the service configuration rollouts for a managed
	// service, from the newest to the oldest.
	ListServiceRollouts(context.Context, *ListServiceRolloutsRequest) (*ListServiceRolloutsResponse, error)
	// ListServices Lists managed services.
	//
	// Returns all public services. For authenticated users, also returns all
	// services the calling user has "servicemanagement.services.get" permission
	// for.
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
	// SubmitConfigSource Creates a new service configuration (version) for a managed service based
	// on
	// user-supplied configuration source files (for example: OpenAPI
	// Specification). This method stores the source configurations as well as the
	// generated service configuration. To rollout the service configuration to
	// other services,
	// please call
	// [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
	//
	// Only the 100 most recent configuration sources and ones referenced by
	// existing service configurtions are kept for each service. The rest will be
	// deleted eventually.
	//
	// Operation<response: SubmitConfigSourceResponse>
	SubmitConfigSource(context.Context, *SubmitConfigSourceRequest) (*longrunningpb.Operation, error)
	// UndeleteService Revives a previously deleted managed service. The method restores the
	// service using the configuration at the time the service was deleted.
	// The target service must exist and must have been deleted within the
	// last 30 days.
	//
	// Operation<response: UndeleteServiceResponse>
	UndeleteService(context.Context, *UndeleteServiceRequest) (*longrunningpb.Operation, error)
}

func RegisterServiceManagerHTTPServer(s *http.Server, srv ServiceManagerHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/services", _ServiceManager_ListServices0_HTTP_Handler(srv))
	r.GET("/v1/services/{service_name}", _ServiceManager_GetService0_HTTP_Handler(srv))
	r.POST("/v1/services", _ServiceManager_CreateService0_HTTP_Handler(srv))
	r.DELETE("/v1/services/{service_name}", _ServiceManager_DeleteService0_HTTP_Handler(srv))
	r.POST("/v1/services/{service_name}:undelete", _ServiceManager_UndeleteService0_HTTP_Handler(srv))
	r.GET("/v1/services/{service_name}/configs", _ServiceManager_ListServiceConfigs0_HTTP_Handler(srv))
	r.GET("/v1/services/{service_name}/config", _ServiceManager_GetServiceConfig0_HTTP_Handler(srv))
	r.GET("/v1/services/{service_name}/configs/{config_id}", _ServiceManager_GetServiceConfig1_HTTP_Handler(srv))
	r.POST("/v1/services/{service_name}/configs", _ServiceManager_CreateServiceConfig0_HTTP_Handler(srv))
	r.POST("/v1/services/{service_name}/configs:submit", _ServiceManager_SubmitConfigSource0_HTTP_Handler(srv))
	r.GET("/v1/services/{service_name}/rollouts", _ServiceManager_ListServiceRollouts0_HTTP_Handler(srv))
	r.GET("/v1/services/{service_name}/rollouts/{rollout_id}", _ServiceManager_GetServiceRollout0_HTTP_Handler(srv))
	r.POST("/v1/services/{service_name}/rollouts", _ServiceManager_CreateServiceRollout0_HTTP_Handler(srv))
	r.POST("/v1/services:generateConfigReport", _ServiceManager_GenerateConfigReport0_HTTP_Handler(srv))
}

func _ServiceManager_ListServices0_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListServicesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerListServices)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListServices(ctx, req.(*ListServicesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListServicesResponse)
		return ctx.Result(200, reply)
	}
}

func _ServiceManager_GetService0_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetServiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerGetService)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetService(ctx, req.(*GetServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ManagedService)
		return ctx.Result(200, reply)
	}
}

func _ServiceManager_CreateService0_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateServiceRequest
		if err := ctx.Bind(&in.Service); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerCreateService)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateService(ctx, req.(*CreateServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceManager_DeleteService0_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteServiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerDeleteService)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteService(ctx, req.(*DeleteServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceManager_UndeleteService0_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UndeleteServiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerUndeleteService)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UndeleteService(ctx, req.(*UndeleteServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceManager_ListServiceConfigs0_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListServiceConfigsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerListServiceConfigs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListServiceConfigs(ctx, req.(*ListServiceConfigsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListServiceConfigsResponse)
		return ctx.Result(200, reply)
	}
}

func _ServiceManager_GetServiceConfig0_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetServiceConfigRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerGetServiceConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetServiceConfig(ctx, req.(*GetServiceConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*serviceconfig.Service)
		return ctx.Result(200, reply)
	}
}

func _ServiceManager_GetServiceConfig1_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetServiceConfigRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerGetServiceConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetServiceConfig(ctx, req.(*GetServiceConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*serviceconfig.Service)
		return ctx.Result(200, reply)
	}
}

func _ServiceManager_CreateServiceConfig0_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateServiceConfigRequest
		if err := ctx.Bind(&in.ServiceConfig); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerCreateServiceConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateServiceConfig(ctx, req.(*CreateServiceConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*serviceconfig.Service)
		return ctx.Result(200, reply)
	}
}

func _ServiceManager_SubmitConfigSource0_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitConfigSourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerSubmitConfigSource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitConfigSource(ctx, req.(*SubmitConfigSourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceManager_ListServiceRollouts0_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListServiceRolloutsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerListServiceRollouts)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListServiceRollouts(ctx, req.(*ListServiceRolloutsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListServiceRolloutsResponse)
		return ctx.Result(200, reply)
	}
}

func _ServiceManager_GetServiceRollout0_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetServiceRolloutRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerGetServiceRollout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetServiceRollout(ctx, req.(*GetServiceRolloutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Rollout)
		return ctx.Result(200, reply)
	}
}

func _ServiceManager_CreateServiceRollout0_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateServiceRolloutRequest
		if err := ctx.Bind(&in.Rollout); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerCreateServiceRollout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateServiceRollout(ctx, req.(*CreateServiceRolloutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ServiceManager_GenerateConfigReport0_HTTP_Handler(srv ServiceManagerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateConfigReportRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceManagerGenerateConfigReport)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateConfigReport(ctx, req.(*GenerateConfigReportRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateConfigReportResponse)
		return ctx.Result(200, reply)
	}
}

type ServiceManagerHTTPClient interface {
	CreateService(ctx context.Context, req *CreateServiceRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	CreateServiceConfig(ctx context.Context, req *CreateServiceConfigRequest, opts ...http.CallOption) (rsp *serviceconfig.Service, err error)
	CreateServiceRollout(ctx context.Context, req *CreateServiceRolloutRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	DeleteService(ctx context.Context, req *DeleteServiceRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	GenerateConfigReport(ctx context.Context, req *GenerateConfigReportRequest, opts ...http.CallOption) (rsp *GenerateConfigReportResponse, err error)
	GetService(ctx context.Context, req *GetServiceRequest, opts ...http.CallOption) (rsp *ManagedService, err error)
	GetServiceConfig(ctx context.Context, req *GetServiceConfigRequest, opts ...http.CallOption) (rsp *serviceconfig.Service, err error)
	GetServiceRollout(ctx context.Context, req *GetServiceRolloutRequest, opts ...http.CallOption) (rsp *Rollout, err error)
	ListServiceConfigs(ctx context.Context, req *ListServiceConfigsRequest, opts ...http.CallOption) (rsp *ListServiceConfigsResponse, err error)
	ListServiceRollouts(ctx context.Context, req *ListServiceRolloutsRequest, opts ...http.CallOption) (rsp *ListServiceRolloutsResponse, err error)
	ListServices(ctx context.Context, req *ListServicesRequest, opts ...http.CallOption) (rsp *ListServicesResponse, err error)
	SubmitConfigSource(ctx context.Context, req *SubmitConfigSourceRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	UndeleteService(ctx context.Context, req *UndeleteServiceRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
}

type ServiceManagerHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceManagerHTTPClient(client *http.Client) ServiceManagerHTTPClient {
	return &ServiceManagerHTTPClientImpl{client}
}

func (c *ServiceManagerHTTPClientImpl) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1/services"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceManagerCreateService))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Service, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceManagerHTTPClientImpl) CreateServiceConfig(ctx context.Context, in *CreateServiceConfigRequest, opts ...http.CallOption) (*serviceconfig.Service, error) {
	var out serviceconfig.Service
	pattern := "/v1/services/{service_name}/configs"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceManagerCreateServiceConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.ServiceConfig, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceManagerHTTPClientImpl) CreateServiceRollout(ctx context.Context, in *CreateServiceRolloutRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1/services/{service_name}/rollouts"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceManagerCreateServiceRollout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Rollout, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceManagerHTTPClientImpl) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1/services/{service_name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceManagerDeleteService))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceManagerHTTPClientImpl) GenerateConfigReport(ctx context.Context, in *GenerateConfigReportRequest, opts ...http.CallOption) (*GenerateConfigReportResponse, error) {
	var out GenerateConfigReportResponse
	pattern := "/v1/services:generateConfigReport"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceManagerGenerateConfigReport))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceManagerHTTPClientImpl) GetService(ctx context.Context, in *GetServiceRequest, opts ...http.CallOption) (*ManagedService, error) {
	var out ManagedService
	pattern := "/v1/services/{service_name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceManagerGetService))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceManagerHTTPClientImpl) GetServiceConfig(ctx context.Context, in *GetServiceConfigRequest, opts ...http.CallOption) (*serviceconfig.Service, error) {
	var out serviceconfig.Service
	pattern := "/v1/services/{service_name}/configs/{config_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceManagerGetServiceConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceManagerHTTPClientImpl) GetServiceRollout(ctx context.Context, in *GetServiceRolloutRequest, opts ...http.CallOption) (*Rollout, error) {
	var out Rollout
	pattern := "/v1/services/{service_name}/rollouts/{rollout_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceManagerGetServiceRollout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceManagerHTTPClientImpl) ListServiceConfigs(ctx context.Context, in *ListServiceConfigsRequest, opts ...http.CallOption) (*ListServiceConfigsResponse, error) {
	var out ListServiceConfigsResponse
	pattern := "/v1/services/{service_name}/configs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceManagerListServiceConfigs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceManagerHTTPClientImpl) ListServiceRollouts(ctx context.Context, in *ListServiceRolloutsRequest, opts ...http.CallOption) (*ListServiceRolloutsResponse, error) {
	var out ListServiceRolloutsResponse
	pattern := "/v1/services/{service_name}/rollouts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceManagerListServiceRollouts))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceManagerHTTPClientImpl) ListServices(ctx context.Context, in *ListServicesRequest, opts ...http.CallOption) (*ListServicesResponse, error) {
	var out ListServicesResponse
	pattern := "/v1/services"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceManagerListServices))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceManagerHTTPClientImpl) SubmitConfigSource(ctx context.Context, in *SubmitConfigSourceRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1/services/{service_name}/configs:submit"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceManagerSubmitConfigSource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ServiceManagerHTTPClientImpl) UndeleteService(ctx context.Context, in *UndeleteServiceRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v1/services/{service_name}:undelete"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceManagerUndeleteService))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
