// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/logging/v2/logging_config.proto

package loggingpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IndexConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IndexConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IndexConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IndexConfigMultiError, or
// nil if none found.
func (m *IndexConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IndexConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FieldPath

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IndexConfigValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IndexConfigValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IndexConfigValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IndexConfigMultiError(errors)
	}

	return nil
}

// IndexConfigMultiError is an error wrapping multiple validation errors
// returned by IndexConfig.ValidateAll() if the designated constraints aren't met.
type IndexConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IndexConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IndexConfigMultiError) AllErrors() []error { return m }

// IndexConfigValidationError is the validation error returned by
// IndexConfig.Validate if the designated constraints aren't met.
type IndexConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndexConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndexConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndexConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndexConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndexConfigValidationError) ErrorName() string { return "IndexConfigValidationError" }

// Error satisfies the builtin error interface
func (e IndexConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndexConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndexConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndexConfigValidationError{}

// Validate checks the field values on LogBucket with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogBucket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogBucket with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogBucketMultiError, or nil
// if none found.
func (m *LogBucket) ValidateAll() error {
	return m.validate(true)
}

func (m *LogBucket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogBucketValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogBucketValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogBucketValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogBucketValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogBucketValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogBucketValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RetentionDays

	// no validation rules for Locked

	// no validation rules for LifecycleState

	// no validation rules for AnalyticsEnabled

	for idx, item := range m.GetIndexConfigs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogBucketValidationError{
						field:  fmt.Sprintf("IndexConfigs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogBucketValidationError{
						field:  fmt.Sprintf("IndexConfigs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogBucketValidationError{
					field:  fmt.Sprintf("IndexConfigs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCmekSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogBucketValidationError{
					field:  "CmekSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogBucketValidationError{
					field:  "CmekSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCmekSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogBucketValidationError{
				field:  "CmekSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LogBucketMultiError(errors)
	}

	return nil
}

// LogBucketMultiError is an error wrapping multiple validation errors returned
// by LogBucket.ValidateAll() if the designated constraints aren't met.
type LogBucketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogBucketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogBucketMultiError) AllErrors() []error { return m }

// LogBucketValidationError is the validation error returned by
// LogBucket.Validate if the designated constraints aren't met.
type LogBucketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogBucketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogBucketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogBucketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogBucketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogBucketValidationError) ErrorName() string { return "LogBucketValidationError" }

// Error satisfies the builtin error interface
func (e LogBucketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogBucket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogBucketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogBucketValidationError{}

// Validate checks the field values on LogView with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogView) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogView with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogViewMultiError, or nil if none found.
func (m *LogView) ValidateAll() error {
	return m.validate(true)
}

func (m *LogView) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogViewValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogViewValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogViewValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogViewValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogViewValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogViewValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Filter

	if len(errors) > 0 {
		return LogViewMultiError(errors)
	}

	return nil
}

// LogViewMultiError is an error wrapping multiple validation errors returned
// by LogView.ValidateAll() if the designated constraints aren't met.
type LogViewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogViewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogViewMultiError) AllErrors() []error { return m }

// LogViewValidationError is the validation error returned by LogView.Validate
// if the designated constraints aren't met.
type LogViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogViewValidationError) ErrorName() string { return "LogViewValidationError" }

// Error satisfies the builtin error interface
func (e LogViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogViewValidationError{}

// Validate checks the field values on LogSink with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogSink) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogSink with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogSinkMultiError, or nil if none found.
func (m *LogSink) ValidateAll() error {
	return m.validate(true)
}

func (m *LogSink) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Destination

	// no validation rules for Filter

	// no validation rules for Description

	// no validation rules for Disabled

	for idx, item := range m.GetExclusions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogSinkValidationError{
						field:  fmt.Sprintf("Exclusions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogSinkValidationError{
						field:  fmt.Sprintf("Exclusions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogSinkValidationError{
					field:  fmt.Sprintf("Exclusions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for OutputVersionFormat

	// no validation rules for WriterIdentity

	// no validation rules for IncludeChildren

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogSinkValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogSinkValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogSinkValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogSinkValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogSinkValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogSinkValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Options.(type) {
	case *LogSink_BigqueryOptions:
		if v == nil {
			err := LogSinkValidationError{
				field:  "Options",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBigqueryOptions()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogSinkValidationError{
						field:  "BigqueryOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogSinkValidationError{
						field:  "BigqueryOptions",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBigqueryOptions()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogSinkValidationError{
					field:  "BigqueryOptions",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LogSinkMultiError(errors)
	}

	return nil
}

// LogSinkMultiError is an error wrapping multiple validation errors returned
// by LogSink.ValidateAll() if the designated constraints aren't met.
type LogSinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogSinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogSinkMultiError) AllErrors() []error { return m }

// LogSinkValidationError is the validation error returned by LogSink.Validate
// if the designated constraints aren't met.
type LogSinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogSinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogSinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogSinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogSinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogSinkValidationError) ErrorName() string { return "LogSinkValidationError" }

// Error satisfies the builtin error interface
func (e LogSinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogSink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogSinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogSinkValidationError{}

// Validate checks the field values on BigQueryDataset with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BigQueryDataset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BigQueryDataset with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BigQueryDatasetMultiError, or nil if none found.
func (m *BigQueryDataset) ValidateAll() error {
	return m.validate(true)
}

func (m *BigQueryDataset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DatasetId

	if len(errors) > 0 {
		return BigQueryDatasetMultiError(errors)
	}

	return nil
}

// BigQueryDatasetMultiError is an error wrapping multiple validation errors
// returned by BigQueryDataset.ValidateAll() if the designated constraints
// aren't met.
type BigQueryDatasetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BigQueryDatasetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BigQueryDatasetMultiError) AllErrors() []error { return m }

// BigQueryDatasetValidationError is the validation error returned by
// BigQueryDataset.Validate if the designated constraints aren't met.
type BigQueryDatasetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BigQueryDatasetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BigQueryDatasetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BigQueryDatasetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BigQueryDatasetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BigQueryDatasetValidationError) ErrorName() string { return "BigQueryDatasetValidationError" }

// Error satisfies the builtin error interface
func (e BigQueryDatasetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBigQueryDataset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BigQueryDatasetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BigQueryDatasetValidationError{}

// Validate checks the field values on Link with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Link) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Link with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LinkMultiError, or nil if none found.
func (m *Link) ValidateAll() error {
	return m.validate(true)
}

func (m *Link) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LifecycleState

	if all {
		switch v := interface{}(m.GetBigqueryDataset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkValidationError{
					field:  "BigqueryDataset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkValidationError{
					field:  "BigqueryDataset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBigqueryDataset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkValidationError{
				field:  "BigqueryDataset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LinkMultiError(errors)
	}

	return nil
}

// LinkMultiError is an error wrapping multiple validation errors returned by
// Link.ValidateAll() if the designated constraints aren't met.
type LinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkMultiError) AllErrors() []error { return m }

// LinkValidationError is the validation error returned by Link.Validate if the
// designated constraints aren't met.
type LinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkValidationError) ErrorName() string { return "LinkValidationError" }

// Error satisfies the builtin error interface
func (e LinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkValidationError{}

// Validate checks the field values on BigQueryOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BigQueryOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BigQueryOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BigQueryOptionsMultiError, or nil if none found.
func (m *BigQueryOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *BigQueryOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UsePartitionedTables

	// no validation rules for UsesTimestampColumnPartitioning

	if len(errors) > 0 {
		return BigQueryOptionsMultiError(errors)
	}

	return nil
}

// BigQueryOptionsMultiError is an error wrapping multiple validation errors
// returned by BigQueryOptions.ValidateAll() if the designated constraints
// aren't met.
type BigQueryOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BigQueryOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BigQueryOptionsMultiError) AllErrors() []error { return m }

// BigQueryOptionsValidationError is the validation error returned by
// BigQueryOptions.Validate if the designated constraints aren't met.
type BigQueryOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BigQueryOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BigQueryOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BigQueryOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BigQueryOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BigQueryOptionsValidationError) ErrorName() string { return "BigQueryOptionsValidationError" }

// Error satisfies the builtin error interface
func (e BigQueryOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBigQueryOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BigQueryOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BigQueryOptionsValidationError{}

// Validate checks the field values on ListBucketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBucketsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBucketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBucketsRequestMultiError, or nil if none found.
func (m *ListBucketsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBucketsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListBucketsRequestMultiError(errors)
	}

	return nil
}

// ListBucketsRequestMultiError is an error wrapping multiple validation errors
// returned by ListBucketsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListBucketsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBucketsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBucketsRequestMultiError) AllErrors() []error { return m }

// ListBucketsRequestValidationError is the validation error returned by
// ListBucketsRequest.Validate if the designated constraints aren't met.
type ListBucketsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBucketsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBucketsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBucketsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBucketsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBucketsRequestValidationError) ErrorName() string {
	return "ListBucketsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBucketsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBucketsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBucketsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBucketsRequestValidationError{}

// Validate checks the field values on ListBucketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBucketsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBucketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBucketsResponseMultiError, or nil if none found.
func (m *ListBucketsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBucketsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBuckets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBucketsResponseValidationError{
						field:  fmt.Sprintf("Buckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBucketsResponseValidationError{
						field:  fmt.Sprintf("Buckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBucketsResponseValidationError{
					field:  fmt.Sprintf("Buckets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListBucketsResponseMultiError(errors)
	}

	return nil
}

// ListBucketsResponseMultiError is an error wrapping multiple validation
// errors returned by ListBucketsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBucketsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBucketsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBucketsResponseMultiError) AllErrors() []error { return m }

// ListBucketsResponseValidationError is the validation error returned by
// ListBucketsResponse.Validate if the designated constraints aren't met.
type ListBucketsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBucketsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBucketsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBucketsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBucketsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBucketsResponseValidationError) ErrorName() string {
	return "ListBucketsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBucketsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBucketsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBucketsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBucketsResponseValidationError{}

// Validate checks the field values on CreateBucketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBucketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBucketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBucketRequestMultiError, or nil if none found.
func (m *CreateBucketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBucketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for BucketId

	if all {
		switch v := interface{}(m.GetBucket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBucketRequestValidationError{
					field:  "Bucket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBucketRequestValidationError{
					field:  "Bucket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBucket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBucketRequestValidationError{
				field:  "Bucket",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBucketRequestMultiError(errors)
	}

	return nil
}

// CreateBucketRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBucketRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBucketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBucketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBucketRequestMultiError) AllErrors() []error { return m }

// CreateBucketRequestValidationError is the validation error returned by
// CreateBucketRequest.Validate if the designated constraints aren't met.
type CreateBucketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBucketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBucketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBucketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBucketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBucketRequestValidationError) ErrorName() string {
	return "CreateBucketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBucketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBucketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBucketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBucketRequestValidationError{}

// Validate checks the field values on UpdateBucketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBucketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBucketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBucketRequestMultiError, or nil if none found.
func (m *UpdateBucketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBucketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetBucket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBucketRequestValidationError{
					field:  "Bucket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBucketRequestValidationError{
					field:  "Bucket",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBucket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBucketRequestValidationError{
				field:  "Bucket",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBucketRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBucketRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBucketRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBucketRequestMultiError(errors)
	}

	return nil
}

// UpdateBucketRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBucketRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBucketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBucketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBucketRequestMultiError) AllErrors() []error { return m }

// UpdateBucketRequestValidationError is the validation error returned by
// UpdateBucketRequest.Validate if the designated constraints aren't met.
type UpdateBucketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBucketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBucketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBucketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBucketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBucketRequestValidationError) ErrorName() string {
	return "UpdateBucketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBucketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBucketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBucketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBucketRequestValidationError{}

// Validate checks the field values on GetBucketRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBucketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBucketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBucketRequestMultiError, or nil if none found.
func (m *GetBucketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBucketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetBucketRequestMultiError(errors)
	}

	return nil
}

// GetBucketRequestMultiError is an error wrapping multiple validation errors
// returned by GetBucketRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBucketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBucketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBucketRequestMultiError) AllErrors() []error { return m }

// GetBucketRequestValidationError is the validation error returned by
// GetBucketRequest.Validate if the designated constraints aren't met.
type GetBucketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBucketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBucketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBucketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBucketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBucketRequestValidationError) ErrorName() string { return "GetBucketRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBucketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBucketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBucketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBucketRequestValidationError{}

// Validate checks the field values on DeleteBucketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBucketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBucketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBucketRequestMultiError, or nil if none found.
func (m *DeleteBucketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBucketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteBucketRequestMultiError(errors)
	}

	return nil
}

// DeleteBucketRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBucketRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBucketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBucketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBucketRequestMultiError) AllErrors() []error { return m }

// DeleteBucketRequestValidationError is the validation error returned by
// DeleteBucketRequest.Validate if the designated constraints aren't met.
type DeleteBucketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBucketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBucketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBucketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBucketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBucketRequestValidationError) ErrorName() string {
	return "DeleteBucketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBucketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBucketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBucketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBucketRequestValidationError{}

// Validate checks the field values on UndeleteBucketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UndeleteBucketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UndeleteBucketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UndeleteBucketRequestMultiError, or nil if none found.
func (m *UndeleteBucketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UndeleteBucketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return UndeleteBucketRequestMultiError(errors)
	}

	return nil
}

// UndeleteBucketRequestMultiError is an error wrapping multiple validation
// errors returned by UndeleteBucketRequest.ValidateAll() if the designated
// constraints aren't met.
type UndeleteBucketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndeleteBucketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndeleteBucketRequestMultiError) AllErrors() []error { return m }

// UndeleteBucketRequestValidationError is the validation error returned by
// UndeleteBucketRequest.Validate if the designated constraints aren't met.
type UndeleteBucketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndeleteBucketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndeleteBucketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndeleteBucketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndeleteBucketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndeleteBucketRequestValidationError) ErrorName() string {
	return "UndeleteBucketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UndeleteBucketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndeleteBucketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndeleteBucketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndeleteBucketRequestValidationError{}

// Validate checks the field values on ListViewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListViewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListViewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListViewsRequestMultiError, or nil if none found.
func (m *ListViewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListViewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListViewsRequestMultiError(errors)
	}

	return nil
}

// ListViewsRequestMultiError is an error wrapping multiple validation errors
// returned by ListViewsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListViewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListViewsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListViewsRequestMultiError) AllErrors() []error { return m }

// ListViewsRequestValidationError is the validation error returned by
// ListViewsRequest.Validate if the designated constraints aren't met.
type ListViewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListViewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListViewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListViewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListViewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListViewsRequestValidationError) ErrorName() string { return "ListViewsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListViewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListViewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListViewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListViewsRequestValidationError{}

// Validate checks the field values on ListViewsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListViewsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListViewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListViewsResponseMultiError, or nil if none found.
func (m *ListViewsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListViewsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetViews() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListViewsResponseValidationError{
						field:  fmt.Sprintf("Views[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListViewsResponseValidationError{
						field:  fmt.Sprintf("Views[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListViewsResponseValidationError{
					field:  fmt.Sprintf("Views[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListViewsResponseMultiError(errors)
	}

	return nil
}

// ListViewsResponseMultiError is an error wrapping multiple validation errors
// returned by ListViewsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListViewsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListViewsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListViewsResponseMultiError) AllErrors() []error { return m }

// ListViewsResponseValidationError is the validation error returned by
// ListViewsResponse.Validate if the designated constraints aren't met.
type ListViewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListViewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListViewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListViewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListViewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListViewsResponseValidationError) ErrorName() string {
	return "ListViewsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListViewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListViewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListViewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListViewsResponseValidationError{}

// Validate checks the field values on CreateViewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateViewRequestMultiError, or nil if none found.
func (m *CreateViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for ViewId

	if all {
		switch v := interface{}(m.GetView()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateViewRequestValidationError{
					field:  "View",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateViewRequestValidationError{
					field:  "View",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetView()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateViewRequestValidationError{
				field:  "View",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateViewRequestMultiError(errors)
	}

	return nil
}

// CreateViewRequestMultiError is an error wrapping multiple validation errors
// returned by CreateViewRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateViewRequestMultiError) AllErrors() []error { return m }

// CreateViewRequestValidationError is the validation error returned by
// CreateViewRequest.Validate if the designated constraints aren't met.
type CreateViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateViewRequestValidationError) ErrorName() string {
	return "CreateViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateViewRequestValidationError{}

// Validate checks the field values on UpdateViewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateViewRequestMultiError, or nil if none found.
func (m *UpdateViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetView()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateViewRequestValidationError{
					field:  "View",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateViewRequestValidationError{
					field:  "View",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetView()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateViewRequestValidationError{
				field:  "View",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateViewRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateViewRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateViewRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateViewRequestMultiError(errors)
	}

	return nil
}

// UpdateViewRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateViewRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateViewRequestMultiError) AllErrors() []error { return m }

// UpdateViewRequestValidationError is the validation error returned by
// UpdateViewRequest.Validate if the designated constraints aren't met.
type UpdateViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateViewRequestValidationError) ErrorName() string {
	return "UpdateViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateViewRequestValidationError{}

// Validate checks the field values on GetViewRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetViewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetViewRequestMultiError,
// or nil if none found.
func (m *GetViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetViewRequestMultiError(errors)
	}

	return nil
}

// GetViewRequestMultiError is an error wrapping multiple validation errors
// returned by GetViewRequest.ValidateAll() if the designated constraints
// aren't met.
type GetViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetViewRequestMultiError) AllErrors() []error { return m }

// GetViewRequestValidationError is the validation error returned by
// GetViewRequest.Validate if the designated constraints aren't met.
type GetViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetViewRequestValidationError) ErrorName() string { return "GetViewRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetViewRequestValidationError{}

// Validate checks the field values on DeleteViewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteViewRequestMultiError, or nil if none found.
func (m *DeleteViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteViewRequestMultiError(errors)
	}

	return nil
}

// DeleteViewRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteViewRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteViewRequestMultiError) AllErrors() []error { return m }

// DeleteViewRequestValidationError is the validation error returned by
// DeleteViewRequest.Validate if the designated constraints aren't met.
type DeleteViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteViewRequestValidationError) ErrorName() string {
	return "DeleteViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteViewRequestValidationError{}

// Validate checks the field values on ListSinksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSinksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSinksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSinksRequestMultiError, or nil if none found.
func (m *ListSinksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSinksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListSinksRequestMultiError(errors)
	}

	return nil
}

// ListSinksRequestMultiError is an error wrapping multiple validation errors
// returned by ListSinksRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSinksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSinksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSinksRequestMultiError) AllErrors() []error { return m }

// ListSinksRequestValidationError is the validation error returned by
// ListSinksRequest.Validate if the designated constraints aren't met.
type ListSinksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSinksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSinksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSinksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSinksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSinksRequestValidationError) ErrorName() string { return "ListSinksRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListSinksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSinksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSinksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSinksRequestValidationError{}

// Validate checks the field values on ListSinksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSinksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSinksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSinksResponseMultiError, or nil if none found.
func (m *ListSinksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSinksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSinks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSinksResponseValidationError{
						field:  fmt.Sprintf("Sinks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSinksResponseValidationError{
						field:  fmt.Sprintf("Sinks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSinksResponseValidationError{
					field:  fmt.Sprintf("Sinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListSinksResponseMultiError(errors)
	}

	return nil
}

// ListSinksResponseMultiError is an error wrapping multiple validation errors
// returned by ListSinksResponse.ValidateAll() if the designated constraints
// aren't met.
type ListSinksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSinksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSinksResponseMultiError) AllErrors() []error { return m }

// ListSinksResponseValidationError is the validation error returned by
// ListSinksResponse.Validate if the designated constraints aren't met.
type ListSinksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSinksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSinksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSinksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSinksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSinksResponseValidationError) ErrorName() string {
	return "ListSinksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSinksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSinksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSinksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSinksResponseValidationError{}

// Validate checks the field values on GetSinkRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSinkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSinkRequestMultiError,
// or nil if none found.
func (m *GetSinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SinkName

	if len(errors) > 0 {
		return GetSinkRequestMultiError(errors)
	}

	return nil
}

// GetSinkRequestMultiError is an error wrapping multiple validation errors
// returned by GetSinkRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSinkRequestMultiError) AllErrors() []error { return m }

// GetSinkRequestValidationError is the validation error returned by
// GetSinkRequest.Validate if the designated constraints aren't met.
type GetSinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSinkRequestValidationError) ErrorName() string { return "GetSinkRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSinkRequestValidationError{}

// Validate checks the field values on CreateSinkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSinkRequestMultiError, or nil if none found.
func (m *CreateSinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetSink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSinkRequestValidationError{
					field:  "Sink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSinkRequestValidationError{
					field:  "Sink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSinkRequestValidationError{
				field:  "Sink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UniqueWriterIdentity

	if len(errors) > 0 {
		return CreateSinkRequestMultiError(errors)
	}

	return nil
}

// CreateSinkRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSinkRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSinkRequestMultiError) AllErrors() []error { return m }

// CreateSinkRequestValidationError is the validation error returned by
// CreateSinkRequest.Validate if the designated constraints aren't met.
type CreateSinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSinkRequestValidationError) ErrorName() string {
	return "CreateSinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSinkRequestValidationError{}

// Validate checks the field values on UpdateSinkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateSinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSinkRequestMultiError, or nil if none found.
func (m *UpdateSinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SinkName

	if all {
		switch v := interface{}(m.GetSink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSinkRequestValidationError{
					field:  "Sink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSinkRequestValidationError{
					field:  "Sink",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSinkRequestValidationError{
				field:  "Sink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UniqueWriterIdentity

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSinkRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSinkRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSinkRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSinkRequestMultiError(errors)
	}

	return nil
}

// UpdateSinkRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateSinkRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateSinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSinkRequestMultiError) AllErrors() []error { return m }

// UpdateSinkRequestValidationError is the validation error returned by
// UpdateSinkRequest.Validate if the designated constraints aren't met.
type UpdateSinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSinkRequestValidationError) ErrorName() string {
	return "UpdateSinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSinkRequestValidationError{}

// Validate checks the field values on DeleteSinkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteSinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSinkRequestMultiError, or nil if none found.
func (m *DeleteSinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SinkName

	if len(errors) > 0 {
		return DeleteSinkRequestMultiError(errors)
	}

	return nil
}

// DeleteSinkRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteSinkRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteSinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSinkRequestMultiError) AllErrors() []error { return m }

// DeleteSinkRequestValidationError is the validation error returned by
// DeleteSinkRequest.Validate if the designated constraints aren't met.
type DeleteSinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSinkRequestValidationError) ErrorName() string {
	return "DeleteSinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSinkRequestValidationError{}

// Validate checks the field values on CreateLinkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLinkRequestMultiError, or nil if none found.
func (m *CreateLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetLink()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLinkRequestValidationError{
					field:  "Link",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLinkRequestValidationError{
					field:  "Link",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLinkRequestValidationError{
				field:  "Link",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LinkId

	if len(errors) > 0 {
		return CreateLinkRequestMultiError(errors)
	}

	return nil
}

// CreateLinkRequestMultiError is an error wrapping multiple validation errors
// returned by CreateLinkRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLinkRequestMultiError) AllErrors() []error { return m }

// CreateLinkRequestValidationError is the validation error returned by
// CreateLinkRequest.Validate if the designated constraints aren't met.
type CreateLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLinkRequestValidationError) ErrorName() string {
	return "CreateLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLinkRequestValidationError{}

// Validate checks the field values on DeleteLinkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLinkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLinkRequestMultiError, or nil if none found.
func (m *DeleteLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteLinkRequestMultiError(errors)
	}

	return nil
}

// DeleteLinkRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteLinkRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLinkRequestMultiError) AllErrors() []error { return m }

// DeleteLinkRequestValidationError is the validation error returned by
// DeleteLinkRequest.Validate if the designated constraints aren't met.
type DeleteLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLinkRequestValidationError) ErrorName() string {
	return "DeleteLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLinkRequestValidationError{}

// Validate checks the field values on ListLinksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLinksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLinksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLinksRequestMultiError, or nil if none found.
func (m *ListLinksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLinksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListLinksRequestMultiError(errors)
	}

	return nil
}

// ListLinksRequestMultiError is an error wrapping multiple validation errors
// returned by ListLinksRequest.ValidateAll() if the designated constraints
// aren't met.
type ListLinksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLinksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLinksRequestMultiError) AllErrors() []error { return m }

// ListLinksRequestValidationError is the validation error returned by
// ListLinksRequest.Validate if the designated constraints aren't met.
type ListLinksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLinksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLinksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLinksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLinksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLinksRequestValidationError) ErrorName() string { return "ListLinksRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListLinksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLinksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLinksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLinksRequestValidationError{}

// Validate checks the field values on ListLinksResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLinksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLinksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLinksResponseMultiError, or nil if none found.
func (m *ListLinksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLinksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLinks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLinksResponseValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLinksResponseValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLinksResponseValidationError{
					field:  fmt.Sprintf("Links[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListLinksResponseMultiError(errors)
	}

	return nil
}

// ListLinksResponseMultiError is an error wrapping multiple validation errors
// returned by ListLinksResponse.ValidateAll() if the designated constraints
// aren't met.
type ListLinksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLinksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLinksResponseMultiError) AllErrors() []error { return m }

// ListLinksResponseValidationError is the validation error returned by
// ListLinksResponse.Validate if the designated constraints aren't met.
type ListLinksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLinksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLinksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLinksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLinksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLinksResponseValidationError) ErrorName() string {
	return "ListLinksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLinksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLinksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLinksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLinksResponseValidationError{}

// Validate checks the field values on GetLinkRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLinkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLinkRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLinkRequestMultiError,
// or nil if none found.
func (m *GetLinkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLinkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetLinkRequestMultiError(errors)
	}

	return nil
}

// GetLinkRequestMultiError is an error wrapping multiple validation errors
// returned by GetLinkRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLinkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLinkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLinkRequestMultiError) AllErrors() []error { return m }

// GetLinkRequestValidationError is the validation error returned by
// GetLinkRequest.Validate if the designated constraints aren't met.
type GetLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLinkRequestValidationError) ErrorName() string { return "GetLinkRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLinkRequestValidationError{}

// Validate checks the field values on LogExclusion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogExclusion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogExclusion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogExclusionMultiError, or
// nil if none found.
func (m *LogExclusion) ValidateAll() error {
	return m.validate(true)
}

func (m *LogExclusion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Filter

	// no validation rules for Disabled

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogExclusionValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogExclusionValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogExclusionValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogExclusionValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogExclusionValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogExclusionValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LogExclusionMultiError(errors)
	}

	return nil
}

// LogExclusionMultiError is an error wrapping multiple validation errors
// returned by LogExclusion.ValidateAll() if the designated constraints aren't met.
type LogExclusionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogExclusionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogExclusionMultiError) AllErrors() []error { return m }

// LogExclusionValidationError is the validation error returned by
// LogExclusion.Validate if the designated constraints aren't met.
type LogExclusionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogExclusionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogExclusionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogExclusionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogExclusionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogExclusionValidationError) ErrorName() string { return "LogExclusionValidationError" }

// Error satisfies the builtin error interface
func (e LogExclusionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogExclusion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogExclusionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogExclusionValidationError{}

// Validate checks the field values on ListExclusionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListExclusionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListExclusionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListExclusionsRequestMultiError, or nil if none found.
func (m *ListExclusionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListExclusionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListExclusionsRequestMultiError(errors)
	}

	return nil
}

// ListExclusionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListExclusionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListExclusionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListExclusionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListExclusionsRequestMultiError) AllErrors() []error { return m }

// ListExclusionsRequestValidationError is the validation error returned by
// ListExclusionsRequest.Validate if the designated constraints aren't met.
type ListExclusionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExclusionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExclusionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExclusionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExclusionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExclusionsRequestValidationError) ErrorName() string {
	return "ListExclusionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListExclusionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExclusionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExclusionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExclusionsRequestValidationError{}

// Validate checks the field values on ListExclusionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListExclusionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListExclusionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListExclusionsResponseMultiError, or nil if none found.
func (m *ListExclusionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListExclusionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExclusions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListExclusionsResponseValidationError{
						field:  fmt.Sprintf("Exclusions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListExclusionsResponseValidationError{
						field:  fmt.Sprintf("Exclusions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListExclusionsResponseValidationError{
					field:  fmt.Sprintf("Exclusions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListExclusionsResponseMultiError(errors)
	}

	return nil
}

// ListExclusionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListExclusionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListExclusionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListExclusionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListExclusionsResponseMultiError) AllErrors() []error { return m }

// ListExclusionsResponseValidationError is the validation error returned by
// ListExclusionsResponse.Validate if the designated constraints aren't met.
type ListExclusionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListExclusionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListExclusionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListExclusionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListExclusionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListExclusionsResponseValidationError) ErrorName() string {
	return "ListExclusionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListExclusionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListExclusionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListExclusionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListExclusionsResponseValidationError{}

// Validate checks the field values on GetExclusionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExclusionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExclusionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExclusionRequestMultiError, or nil if none found.
func (m *GetExclusionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExclusionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetExclusionRequestMultiError(errors)
	}

	return nil
}

// GetExclusionRequestMultiError is an error wrapping multiple validation
// errors returned by GetExclusionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetExclusionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExclusionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExclusionRequestMultiError) AllErrors() []error { return m }

// GetExclusionRequestValidationError is the validation error returned by
// GetExclusionRequest.Validate if the designated constraints aren't met.
type GetExclusionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExclusionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExclusionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExclusionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExclusionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExclusionRequestValidationError) ErrorName() string {
	return "GetExclusionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExclusionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExclusionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExclusionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExclusionRequestValidationError{}

// Validate checks the field values on CreateExclusionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateExclusionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExclusionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExclusionRequestMultiError, or nil if none found.
func (m *CreateExclusionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExclusionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetExclusion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateExclusionRequestValidationError{
					field:  "Exclusion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateExclusionRequestValidationError{
					field:  "Exclusion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExclusion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateExclusionRequestValidationError{
				field:  "Exclusion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateExclusionRequestMultiError(errors)
	}

	return nil
}

// CreateExclusionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateExclusionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateExclusionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExclusionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExclusionRequestMultiError) AllErrors() []error { return m }

// CreateExclusionRequestValidationError is the validation error returned by
// CreateExclusionRequest.Validate if the designated constraints aren't met.
type CreateExclusionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExclusionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExclusionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExclusionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExclusionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExclusionRequestValidationError) ErrorName() string {
	return "CreateExclusionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExclusionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExclusionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExclusionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExclusionRequestValidationError{}

// Validate checks the field values on UpdateExclusionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateExclusionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateExclusionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateExclusionRequestMultiError, or nil if none found.
func (m *UpdateExclusionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExclusionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetExclusion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateExclusionRequestValidationError{
					field:  "Exclusion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateExclusionRequestValidationError{
					field:  "Exclusion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExclusion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExclusionRequestValidationError{
				field:  "Exclusion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateExclusionRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateExclusionRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExclusionRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateExclusionRequestMultiError(errors)
	}

	return nil
}

// UpdateExclusionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateExclusionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateExclusionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExclusionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExclusionRequestMultiError) AllErrors() []error { return m }

// UpdateExclusionRequestValidationError is the validation error returned by
// UpdateExclusionRequest.Validate if the designated constraints aren't met.
type UpdateExclusionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExclusionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExclusionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExclusionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExclusionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExclusionRequestValidationError) ErrorName() string {
	return "UpdateExclusionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateExclusionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExclusionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExclusionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExclusionRequestValidationError{}

// Validate checks the field values on DeleteExclusionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteExclusionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteExclusionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteExclusionRequestMultiError, or nil if none found.
func (m *DeleteExclusionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteExclusionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteExclusionRequestMultiError(errors)
	}

	return nil
}

// DeleteExclusionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteExclusionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteExclusionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteExclusionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteExclusionRequestMultiError) AllErrors() []error { return m }

// DeleteExclusionRequestValidationError is the validation error returned by
// DeleteExclusionRequest.Validate if the designated constraints aren't met.
type DeleteExclusionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteExclusionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteExclusionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteExclusionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteExclusionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteExclusionRequestValidationError) ErrorName() string {
	return "DeleteExclusionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteExclusionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteExclusionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteExclusionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteExclusionRequestValidationError{}

// Validate checks the field values on GetCmekSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCmekSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCmekSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCmekSettingsRequestMultiError, or nil if none found.
func (m *GetCmekSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCmekSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetCmekSettingsRequestMultiError(errors)
	}

	return nil
}

// GetCmekSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by GetCmekSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCmekSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCmekSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCmekSettingsRequestMultiError) AllErrors() []error { return m }

// GetCmekSettingsRequestValidationError is the validation error returned by
// GetCmekSettingsRequest.Validate if the designated constraints aren't met.
type GetCmekSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCmekSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCmekSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCmekSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCmekSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCmekSettingsRequestValidationError) ErrorName() string {
	return "GetCmekSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCmekSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCmekSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCmekSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCmekSettingsRequestValidationError{}

// Validate checks the field values on UpdateCmekSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCmekSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCmekSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCmekSettingsRequestMultiError, or nil if none found.
func (m *UpdateCmekSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCmekSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetCmekSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCmekSettingsRequestValidationError{
					field:  "CmekSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCmekSettingsRequestValidationError{
					field:  "CmekSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCmekSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCmekSettingsRequestValidationError{
				field:  "CmekSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCmekSettingsRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCmekSettingsRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCmekSettingsRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCmekSettingsRequestMultiError(errors)
	}

	return nil
}

// UpdateCmekSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCmekSettingsRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateCmekSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCmekSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCmekSettingsRequestMultiError) AllErrors() []error { return m }

// UpdateCmekSettingsRequestValidationError is the validation error returned by
// UpdateCmekSettingsRequest.Validate if the designated constraints aren't met.
type UpdateCmekSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCmekSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCmekSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCmekSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCmekSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCmekSettingsRequestValidationError) ErrorName() string {
	return "UpdateCmekSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCmekSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCmekSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCmekSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCmekSettingsRequestValidationError{}

// Validate checks the field values on CmekSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CmekSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CmekSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CmekSettingsMultiError, or
// nil if none found.
func (m *CmekSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *CmekSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for KmsKeyName

	// no validation rules for KmsKeyVersionName

	// no validation rules for ServiceAccountId

	if len(errors) > 0 {
		return CmekSettingsMultiError(errors)
	}

	return nil
}

// CmekSettingsMultiError is an error wrapping multiple validation errors
// returned by CmekSettings.ValidateAll() if the designated constraints aren't met.
type CmekSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CmekSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CmekSettingsMultiError) AllErrors() []error { return m }

// CmekSettingsValidationError is the validation error returned by
// CmekSettings.Validate if the designated constraints aren't met.
type CmekSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CmekSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CmekSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CmekSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CmekSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CmekSettingsValidationError) ErrorName() string { return "CmekSettingsValidationError" }

// Error satisfies the builtin error interface
func (e CmekSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCmekSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CmekSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CmekSettingsValidationError{}

// Validate checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsRequestMultiError, or nil if none found.
func (m *GetSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetSettingsRequestMultiError(errors)
	}

	return nil
}

// GetSettingsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSettingsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsRequestMultiError) AllErrors() []error { return m }

// GetSettingsRequestValidationError is the validation error returned by
// GetSettingsRequest.Validate if the designated constraints aren't met.
type GetSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsRequestValidationError) ErrorName() string {
	return "GetSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsRequestValidationError{}

// Validate checks the field values on UpdateSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSettingsRequestMultiError, or nil if none found.
func (m *UpdateSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSettingsRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSettingsRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSettingsRequestValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSettingsRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSettingsRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSettingsRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSettingsRequestMultiError(errors)
	}

	return nil
}

// UpdateSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSettingsRequestMultiError) AllErrors() []error { return m }

// UpdateSettingsRequestValidationError is the validation error returned by
// UpdateSettingsRequest.Validate if the designated constraints aren't met.
type UpdateSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSettingsRequestValidationError) ErrorName() string {
	return "UpdateSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSettingsRequestValidationError{}

// Validate checks the field values on Settings with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Settings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Settings with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SettingsMultiError, or nil
// if none found.
func (m *Settings) ValidateAll() error {
	return m.validate(true)
}

func (m *Settings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for KmsKeyName

	// no validation rules for KmsServiceAccountId

	// no validation rules for StorageLocation

	// no validation rules for DisableDefaultSink

	if len(errors) > 0 {
		return SettingsMultiError(errors)
	}

	return nil
}

// SettingsMultiError is an error wrapping multiple validation errors returned
// by Settings.ValidateAll() if the designated constraints aren't met.
type SettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingsMultiError) AllErrors() []error { return m }

// SettingsValidationError is the validation error returned by
// Settings.Validate if the designated constraints aren't met.
type SettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsValidationError) ErrorName() string { return "SettingsValidationError" }

// Error satisfies the builtin error interface
func (e SettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsValidationError{}

// Validate checks the field values on CopyLogEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CopyLogEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyLogEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyLogEntriesRequestMultiError, or nil if none found.
func (m *CopyLogEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyLogEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Filter

	// no validation rules for Destination

	if len(errors) > 0 {
		return CopyLogEntriesRequestMultiError(errors)
	}

	return nil
}

// CopyLogEntriesRequestMultiError is an error wrapping multiple validation
// errors returned by CopyLogEntriesRequest.ValidateAll() if the designated
// constraints aren't met.
type CopyLogEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyLogEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyLogEntriesRequestMultiError) AllErrors() []error { return m }

// CopyLogEntriesRequestValidationError is the validation error returned by
// CopyLogEntriesRequest.Validate if the designated constraints aren't met.
type CopyLogEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyLogEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyLogEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyLogEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyLogEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyLogEntriesRequestValidationError) ErrorName() string {
	return "CopyLogEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CopyLogEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyLogEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyLogEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyLogEntriesRequestValidationError{}

// Validate checks the field values on CopyLogEntriesMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CopyLogEntriesMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyLogEntriesMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyLogEntriesMetadataMultiError, or nil if none found.
func (m *CopyLogEntriesMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyLogEntriesMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CopyLogEntriesMetadataValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CopyLogEntriesMetadataValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CopyLogEntriesMetadataValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CopyLogEntriesMetadataValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CopyLogEntriesMetadataValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CopyLogEntriesMetadataValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	// no validation rules for CancellationRequested

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CopyLogEntriesMetadataValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CopyLogEntriesMetadataValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CopyLogEntriesMetadataValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Progress

	// no validation rules for WriterIdentity

	if len(errors) > 0 {
		return CopyLogEntriesMetadataMultiError(errors)
	}

	return nil
}

// CopyLogEntriesMetadataMultiError is an error wrapping multiple validation
// errors returned by CopyLogEntriesMetadata.ValidateAll() if the designated
// constraints aren't met.
type CopyLogEntriesMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyLogEntriesMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyLogEntriesMetadataMultiError) AllErrors() []error { return m }

// CopyLogEntriesMetadataValidationError is the validation error returned by
// CopyLogEntriesMetadata.Validate if the designated constraints aren't met.
type CopyLogEntriesMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyLogEntriesMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyLogEntriesMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyLogEntriesMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyLogEntriesMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyLogEntriesMetadataValidationError) ErrorName() string {
	return "CopyLogEntriesMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e CopyLogEntriesMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyLogEntriesMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyLogEntriesMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyLogEntriesMetadataValidationError{}

// Validate checks the field values on CopyLogEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CopyLogEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyLogEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CopyLogEntriesResponseMultiError, or nil if none found.
func (m *CopyLogEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyLogEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogEntriesCopiedCount

	if len(errors) > 0 {
		return CopyLogEntriesResponseMultiError(errors)
	}

	return nil
}

// CopyLogEntriesResponseMultiError is an error wrapping multiple validation
// errors returned by CopyLogEntriesResponse.ValidateAll() if the designated
// constraints aren't met.
type CopyLogEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyLogEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyLogEntriesResponseMultiError) AllErrors() []error { return m }

// CopyLogEntriesResponseValidationError is the validation error returned by
// CopyLogEntriesResponse.Validate if the designated constraints aren't met.
type CopyLogEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyLogEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyLogEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyLogEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyLogEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyLogEntriesResponseValidationError) ErrorName() string {
	return "CopyLogEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CopyLogEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyLogEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyLogEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyLogEntriesResponseValidationError{}

// Validate checks the field values on BucketMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BucketMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BucketMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BucketMetadataMultiError,
// or nil if none found.
func (m *BucketMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *BucketMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketMetadataValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketMetadataValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketMetadataValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BucketMetadataValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BucketMetadataValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BucketMetadataValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	switch v := m.Request.(type) {
	case *BucketMetadata_CreateBucketRequest:
		if v == nil {
			err := BucketMetadataValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreateBucketRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BucketMetadataValidationError{
						field:  "CreateBucketRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BucketMetadataValidationError{
						field:  "CreateBucketRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateBucketRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BucketMetadataValidationError{
					field:  "CreateBucketRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BucketMetadata_UpdateBucketRequest:
		if v == nil {
			err := BucketMetadataValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUpdateBucketRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BucketMetadataValidationError{
						field:  "UpdateBucketRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BucketMetadataValidationError{
						field:  "UpdateBucketRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdateBucketRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BucketMetadataValidationError{
					field:  "UpdateBucketRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return BucketMetadataMultiError(errors)
	}

	return nil
}

// BucketMetadataMultiError is an error wrapping multiple validation errors
// returned by BucketMetadata.ValidateAll() if the designated constraints
// aren't met.
type BucketMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BucketMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BucketMetadataMultiError) AllErrors() []error { return m }

// BucketMetadataValidationError is the validation error returned by
// BucketMetadata.Validate if the designated constraints aren't met.
type BucketMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BucketMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BucketMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BucketMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BucketMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BucketMetadataValidationError) ErrorName() string { return "BucketMetadataValidationError" }

// Error satisfies the builtin error interface
func (e BucketMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBucketMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BucketMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BucketMetadataValidationError{}

// Validate checks the field values on LinkMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LinkMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LinkMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LinkMetadataMultiError, or
// nil if none found.
func (m *LinkMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *LinkMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkMetadataValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkMetadataValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkMetadataValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LinkMetadataValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LinkMetadataValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LinkMetadataValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	switch v := m.Request.(type) {
	case *LinkMetadata_CreateLinkRequest:
		if v == nil {
			err := LinkMetadataValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCreateLinkRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LinkMetadataValidationError{
						field:  "CreateLinkRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LinkMetadataValidationError{
						field:  "CreateLinkRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreateLinkRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LinkMetadataValidationError{
					field:  "CreateLinkRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LinkMetadata_DeleteLinkRequest:
		if v == nil {
			err := LinkMetadataValidationError{
				field:  "Request",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDeleteLinkRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LinkMetadataValidationError{
						field:  "DeleteLinkRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LinkMetadataValidationError{
						field:  "DeleteLinkRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeleteLinkRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LinkMetadataValidationError{
					field:  "DeleteLinkRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LinkMetadataMultiError(errors)
	}

	return nil
}

// LinkMetadataMultiError is an error wrapping multiple validation errors
// returned by LinkMetadata.ValidateAll() if the designated constraints aren't met.
type LinkMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinkMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinkMetadataMultiError) AllErrors() []error { return m }

// LinkMetadataValidationError is the validation error returned by
// LinkMetadata.Validate if the designated constraints aren't met.
type LinkMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinkMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinkMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinkMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinkMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinkMetadataValidationError) ErrorName() string { return "LinkMetadataValidationError" }

// Error satisfies the builtin error interface
func (e LinkMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinkMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinkMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinkMetadataValidationError{}

// Validate checks the field values on LocationMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LocationMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocationMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LocationMetadataMultiError, or nil if none found.
func (m *LocationMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *LocationMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogAnalyticsEnabled

	if len(errors) > 0 {
		return LocationMetadataMultiError(errors)
	}

	return nil
}

// LocationMetadataMultiError is an error wrapping multiple validation errors
// returned by LocationMetadata.ValidateAll() if the designated constraints
// aren't met.
type LocationMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMetadataMultiError) AllErrors() []error { return m }

// LocationMetadataValidationError is the validation error returned by
// LocationMetadata.Validate if the designated constraints aren't met.
type LocationMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationMetadataValidationError) ErrorName() string { return "LocationMetadataValidationError" }

// Error satisfies the builtin error interface
func (e LocationMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocationMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationMetadataValidationError{}
