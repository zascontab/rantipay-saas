// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/logging/v2/logging.proto

package loggingpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeleteLogRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLogRequestMultiError, or nil if none found.
func (m *DeleteLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogName

	if len(errors) > 0 {
		return DeleteLogRequestMultiError(errors)
	}

	return nil
}

// DeleteLogRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteLogRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLogRequestMultiError) AllErrors() []error { return m }

// DeleteLogRequestValidationError is the validation error returned by
// DeleteLogRequest.Validate if the designated constraints aren't met.
type DeleteLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLogRequestValidationError) ErrorName() string { return "DeleteLogRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLogRequestValidationError{}

// Validate checks the field values on WriteLogEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteLogEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteLogEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteLogEntriesRequestMultiError, or nil if none found.
func (m *WriteLogEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteLogEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogName

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WriteLogEntriesRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WriteLogEntriesRequestValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WriteLogEntriesRequestValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Labels

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WriteLogEntriesRequestValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WriteLogEntriesRequestValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WriteLogEntriesRequestValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PartialSuccess

	// no validation rules for DryRun

	if len(errors) > 0 {
		return WriteLogEntriesRequestMultiError(errors)
	}

	return nil
}

// WriteLogEntriesRequestMultiError is an error wrapping multiple validation
// errors returned by WriteLogEntriesRequest.ValidateAll() if the designated
// constraints aren't met.
type WriteLogEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteLogEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteLogEntriesRequestMultiError) AllErrors() []error { return m }

// WriteLogEntriesRequestValidationError is the validation error returned by
// WriteLogEntriesRequest.Validate if the designated constraints aren't met.
type WriteLogEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteLogEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteLogEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteLogEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteLogEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteLogEntriesRequestValidationError) ErrorName() string {
	return "WriteLogEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WriteLogEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteLogEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteLogEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteLogEntriesRequestValidationError{}

// Validate checks the field values on WriteLogEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteLogEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteLogEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteLogEntriesResponseMultiError, or nil if none found.
func (m *WriteLogEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteLogEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WriteLogEntriesResponseMultiError(errors)
	}

	return nil
}

// WriteLogEntriesResponseMultiError is an error wrapping multiple validation
// errors returned by WriteLogEntriesResponse.ValidateAll() if the designated
// constraints aren't met.
type WriteLogEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteLogEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteLogEntriesResponseMultiError) AllErrors() []error { return m }

// WriteLogEntriesResponseValidationError is the validation error returned by
// WriteLogEntriesResponse.Validate if the designated constraints aren't met.
type WriteLogEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteLogEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteLogEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteLogEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteLogEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteLogEntriesResponseValidationError) ErrorName() string {
	return "WriteLogEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WriteLogEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteLogEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteLogEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteLogEntriesResponseValidationError{}

// Validate checks the field values on WriteLogEntriesPartialErrors with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteLogEntriesPartialErrors) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteLogEntriesPartialErrors with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteLogEntriesPartialErrorsMultiError, or nil if none found.
func (m *WriteLogEntriesPartialErrors) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteLogEntriesPartialErrors) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]int32, len(m.GetLogEntryErrors()))
		i := 0
		for key := range m.GetLogEntryErrors() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLogEntryErrors()[key]
			_ = val

			// no validation rules for LogEntryErrors[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, WriteLogEntriesPartialErrorsValidationError{
							field:  fmt.Sprintf("LogEntryErrors[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, WriteLogEntriesPartialErrorsValidationError{
							field:  fmt.Sprintf("LogEntryErrors[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return WriteLogEntriesPartialErrorsValidationError{
						field:  fmt.Sprintf("LogEntryErrors[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return WriteLogEntriesPartialErrorsMultiError(errors)
	}

	return nil
}

// WriteLogEntriesPartialErrorsMultiError is an error wrapping multiple
// validation errors returned by WriteLogEntriesPartialErrors.ValidateAll() if
// the designated constraints aren't met.
type WriteLogEntriesPartialErrorsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteLogEntriesPartialErrorsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteLogEntriesPartialErrorsMultiError) AllErrors() []error { return m }

// WriteLogEntriesPartialErrorsValidationError is the validation error returned
// by WriteLogEntriesPartialErrors.Validate if the designated constraints
// aren't met.
type WriteLogEntriesPartialErrorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteLogEntriesPartialErrorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteLogEntriesPartialErrorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteLogEntriesPartialErrorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteLogEntriesPartialErrorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteLogEntriesPartialErrorsValidationError) ErrorName() string {
	return "WriteLogEntriesPartialErrorsValidationError"
}

// Error satisfies the builtin error interface
func (e WriteLogEntriesPartialErrorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteLogEntriesPartialErrors.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteLogEntriesPartialErrorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteLogEntriesPartialErrorsValidationError{}

// Validate checks the field values on ListLogEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLogEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLogEntriesRequestMultiError, or nil if none found.
func (m *ListLogEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Filter

	// no validation rules for OrderBy

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListLogEntriesRequestMultiError(errors)
	}

	return nil
}

// ListLogEntriesRequestMultiError is an error wrapping multiple validation
// errors returned by ListLogEntriesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLogEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogEntriesRequestMultiError) AllErrors() []error { return m }

// ListLogEntriesRequestValidationError is the validation error returned by
// ListLogEntriesRequest.Validate if the designated constraints aren't met.
type ListLogEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogEntriesRequestValidationError) ErrorName() string {
	return "ListLogEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLogEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogEntriesRequestValidationError{}

// Validate checks the field values on ListLogEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLogEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLogEntriesResponseMultiError, or nil if none found.
func (m *ListLogEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLogEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLogEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLogEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListLogEntriesResponseMultiError(errors)
	}

	return nil
}

// ListLogEntriesResponseMultiError is an error wrapping multiple validation
// errors returned by ListLogEntriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLogEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogEntriesResponseMultiError) AllErrors() []error { return m }

// ListLogEntriesResponseValidationError is the validation error returned by
// ListLogEntriesResponse.Validate if the designated constraints aren't met.
type ListLogEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogEntriesResponseValidationError) ErrorName() string {
	return "ListLogEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLogEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogEntriesResponseValidationError{}

// Validate checks the field values on ListMonitoredResourceDescriptorsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListMonitoredResourceDescriptorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListMonitoredResourceDescriptorsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListMonitoredResourceDescriptorsRequestMultiError, or nil if none found.
func (m *ListMonitoredResourceDescriptorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMonitoredResourceDescriptorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListMonitoredResourceDescriptorsRequestMultiError(errors)
	}

	return nil
}

// ListMonitoredResourceDescriptorsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListMonitoredResourceDescriptorsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMonitoredResourceDescriptorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMonitoredResourceDescriptorsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMonitoredResourceDescriptorsRequestMultiError) AllErrors() []error { return m }

// ListMonitoredResourceDescriptorsRequestValidationError is the validation
// error returned by ListMonitoredResourceDescriptorsRequest.Validate if the
// designated constraints aren't met.
type ListMonitoredResourceDescriptorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMonitoredResourceDescriptorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMonitoredResourceDescriptorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMonitoredResourceDescriptorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMonitoredResourceDescriptorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMonitoredResourceDescriptorsRequestValidationError) ErrorName() string {
	return "ListMonitoredResourceDescriptorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMonitoredResourceDescriptorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMonitoredResourceDescriptorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMonitoredResourceDescriptorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMonitoredResourceDescriptorsRequestValidationError{}

// Validate checks the field values on ListMonitoredResourceDescriptorsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListMonitoredResourceDescriptorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListMonitoredResourceDescriptorsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListMonitoredResourceDescriptorsResponseMultiError, or nil if none found.
func (m *ListMonitoredResourceDescriptorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMonitoredResourceDescriptorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResourceDescriptors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMonitoredResourceDescriptorsResponseValidationError{
						field:  fmt.Sprintf("ResourceDescriptors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMonitoredResourceDescriptorsResponseValidationError{
						field:  fmt.Sprintf("ResourceDescriptors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMonitoredResourceDescriptorsResponseValidationError{
					field:  fmt.Sprintf("ResourceDescriptors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListMonitoredResourceDescriptorsResponseMultiError(errors)
	}

	return nil
}

// ListMonitoredResourceDescriptorsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListMonitoredResourceDescriptorsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMonitoredResourceDescriptorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMonitoredResourceDescriptorsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMonitoredResourceDescriptorsResponseMultiError) AllErrors() []error { return m }

// ListMonitoredResourceDescriptorsResponseValidationError is the validation
// error returned by ListMonitoredResourceDescriptorsResponse.Validate if the
// designated constraints aren't met.
type ListMonitoredResourceDescriptorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMonitoredResourceDescriptorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMonitoredResourceDescriptorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMonitoredResourceDescriptorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMonitoredResourceDescriptorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMonitoredResourceDescriptorsResponseValidationError) ErrorName() string {
	return "ListMonitoredResourceDescriptorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMonitoredResourceDescriptorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMonitoredResourceDescriptorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMonitoredResourceDescriptorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMonitoredResourceDescriptorsResponseValidationError{}

// Validate checks the field values on ListLogsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLogsRequestMultiError, or nil if none found.
func (m *ListLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListLogsRequestMultiError(errors)
	}

	return nil
}

// ListLogsRequestMultiError is an error wrapping multiple validation errors
// returned by ListLogsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogsRequestMultiError) AllErrors() []error { return m }

// ListLogsRequestValidationError is the validation error returned by
// ListLogsRequest.Validate if the designated constraints aren't met.
type ListLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogsRequestValidationError) ErrorName() string { return "ListLogsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogsRequestValidationError{}

// Validate checks the field values on ListLogsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLogsResponseMultiError, or nil if none found.
func (m *ListLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListLogsResponseMultiError(errors)
	}

	return nil
}

// ListLogsResponseMultiError is an error wrapping multiple validation errors
// returned by ListLogsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogsResponseMultiError) AllErrors() []error { return m }

// ListLogsResponseValidationError is the validation error returned by
// ListLogsResponse.Validate if the designated constraints aren't met.
type ListLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogsResponseValidationError) ErrorName() string { return "ListLogsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogsResponseValidationError{}

// Validate checks the field values on TailLogEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TailLogEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TailLogEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TailLogEntriesRequestMultiError, or nil if none found.
func (m *TailLogEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TailLogEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Filter

	if all {
		switch v := interface{}(m.GetBufferWindow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TailLogEntriesRequestValidationError{
					field:  "BufferWindow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TailLogEntriesRequestValidationError{
					field:  "BufferWindow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBufferWindow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TailLogEntriesRequestValidationError{
				field:  "BufferWindow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TailLogEntriesRequestMultiError(errors)
	}

	return nil
}

// TailLogEntriesRequestMultiError is an error wrapping multiple validation
// errors returned by TailLogEntriesRequest.ValidateAll() if the designated
// constraints aren't met.
type TailLogEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TailLogEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TailLogEntriesRequestMultiError) AllErrors() []error { return m }

// TailLogEntriesRequestValidationError is the validation error returned by
// TailLogEntriesRequest.Validate if the designated constraints aren't met.
type TailLogEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TailLogEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TailLogEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TailLogEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TailLogEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TailLogEntriesRequestValidationError) ErrorName() string {
	return "TailLogEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TailLogEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTailLogEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TailLogEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TailLogEntriesRequestValidationError{}

// Validate checks the field values on TailLogEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TailLogEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TailLogEntriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TailLogEntriesResponseMultiError, or nil if none found.
func (m *TailLogEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TailLogEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TailLogEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TailLogEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TailLogEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSuppressionInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TailLogEntriesResponseValidationError{
						field:  fmt.Sprintf("SuppressionInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TailLogEntriesResponseValidationError{
						field:  fmt.Sprintf("SuppressionInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TailLogEntriesResponseValidationError{
					field:  fmt.Sprintf("SuppressionInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TailLogEntriesResponseMultiError(errors)
	}

	return nil
}

// TailLogEntriesResponseMultiError is an error wrapping multiple validation
// errors returned by TailLogEntriesResponse.ValidateAll() if the designated
// constraints aren't met.
type TailLogEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TailLogEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TailLogEntriesResponseMultiError) AllErrors() []error { return m }

// TailLogEntriesResponseValidationError is the validation error returned by
// TailLogEntriesResponse.Validate if the designated constraints aren't met.
type TailLogEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TailLogEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TailLogEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TailLogEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TailLogEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TailLogEntriesResponseValidationError) ErrorName() string {
	return "TailLogEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TailLogEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTailLogEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TailLogEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TailLogEntriesResponseValidationError{}

// Validate checks the field values on TailLogEntriesResponse_SuppressionInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TailLogEntriesResponse_SuppressionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TailLogEntriesResponse_SuppressionInfo with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TailLogEntriesResponse_SuppressionInfoMultiError, or nil if none found.
func (m *TailLogEntriesResponse_SuppressionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TailLogEntriesResponse_SuppressionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reason

	// no validation rules for SuppressedCount

	if len(errors) > 0 {
		return TailLogEntriesResponse_SuppressionInfoMultiError(errors)
	}

	return nil
}

// TailLogEntriesResponse_SuppressionInfoMultiError is an error wrapping
// multiple validation errors returned by
// TailLogEntriesResponse_SuppressionInfo.ValidateAll() if the designated
// constraints aren't met.
type TailLogEntriesResponse_SuppressionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TailLogEntriesResponse_SuppressionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TailLogEntriesResponse_SuppressionInfoMultiError) AllErrors() []error { return m }

// TailLogEntriesResponse_SuppressionInfoValidationError is the validation
// error returned by TailLogEntriesResponse_SuppressionInfo.Validate if the
// designated constraints aren't met.
type TailLogEntriesResponse_SuppressionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TailLogEntriesResponse_SuppressionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TailLogEntriesResponse_SuppressionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TailLogEntriesResponse_SuppressionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TailLogEntriesResponse_SuppressionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TailLogEntriesResponse_SuppressionInfoValidationError) ErrorName() string {
	return "TailLogEntriesResponse_SuppressionInfoValidationError"
}

// Error satisfies the builtin error interface
func (e TailLogEntriesResponse_SuppressionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTailLogEntriesResponse_SuppressionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TailLogEntriesResponse_SuppressionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TailLogEntriesResponse_SuppressionInfoValidationError{}
