// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: google/logging/v2/logging_metrics.proto

package loggingpb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMetricsServiceV2CreateLogMetric = "/google.logging.v2.MetricsServiceV2/CreateLogMetric"
const OperationMetricsServiceV2DeleteLogMetric = "/google.logging.v2.MetricsServiceV2/DeleteLogMetric"
const OperationMetricsServiceV2GetLogMetric = "/google.logging.v2.MetricsServiceV2/GetLogMetric"
const OperationMetricsServiceV2ListLogMetrics = "/google.logging.v2.MetricsServiceV2/ListLogMetrics"
const OperationMetricsServiceV2UpdateLogMetric = "/google.logging.v2.MetricsServiceV2/UpdateLogMetric"

type MetricsServiceV2HTTPServer interface {
	// CreateLogMetric Creates a logs-based metric.
	CreateLogMetric(context.Context, *CreateLogMetricRequest) (*LogMetric, error)
	// DeleteLogMetric Deletes a logs-based metric.
	DeleteLogMetric(context.Context, *DeleteLogMetricRequest) (*emptypb.Empty, error)
	// GetLogMetric Gets a logs-based metric.
	GetLogMetric(context.Context, *GetLogMetricRequest) (*LogMetric, error)
	// ListLogMetrics Lists logs-based metrics.
	ListLogMetrics(context.Context, *ListLogMetricsRequest) (*ListLogMetricsResponse, error)
	// UpdateLogMetric Creates or updates a logs-based metric.
	UpdateLogMetric(context.Context, *UpdateLogMetricRequest) (*LogMetric, error)
}

func RegisterMetricsServiceV2HTTPServer(s *http.Server, srv MetricsServiceV2HTTPServer) {
	r := s.Route("/")
	r.GET("/v2/{parent:projects/.*}/metrics", _MetricsServiceV2_ListLogMetrics0_HTTP_Handler(srv))
	r.GET("/v2/{metric_name:projects/.*/metrics/.*}", _MetricsServiceV2_GetLogMetric0_HTTP_Handler(srv))
	r.POST("/v2/{parent:projects/.*}/metrics", _MetricsServiceV2_CreateLogMetric0_HTTP_Handler(srv))
	r.PUT("/v2/{metric_name:projects/.*/metrics/.*}", _MetricsServiceV2_UpdateLogMetric0_HTTP_Handler(srv))
	r.DELETE("/v2/{metric_name:projects/.*/metrics/.*}", _MetricsServiceV2_DeleteLogMetric0_HTTP_Handler(srv))
}

func _MetricsServiceV2_ListLogMetrics0_HTTP_Handler(srv MetricsServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogMetricsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMetricsServiceV2ListLogMetrics)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLogMetrics(ctx, req.(*ListLogMetricsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogMetricsResponse)
		return ctx.Result(200, reply)
	}
}

func _MetricsServiceV2_GetLogMetric0_HTTP_Handler(srv MetricsServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLogMetricRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMetricsServiceV2GetLogMetric)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLogMetric(ctx, req.(*GetLogMetricRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogMetric)
		return ctx.Result(200, reply)
	}
}

func _MetricsServiceV2_CreateLogMetric0_HTTP_Handler(srv MetricsServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLogMetricRequest
		if err := ctx.Bind(&in.Metric); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMetricsServiceV2CreateLogMetric)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLogMetric(ctx, req.(*CreateLogMetricRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogMetric)
		return ctx.Result(200, reply)
	}
}

func _MetricsServiceV2_UpdateLogMetric0_HTTP_Handler(srv MetricsServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateLogMetricRequest
		if err := ctx.Bind(&in.Metric); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMetricsServiceV2UpdateLogMetric)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateLogMetric(ctx, req.(*UpdateLogMetricRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogMetric)
		return ctx.Result(200, reply)
	}
}

func _MetricsServiceV2_DeleteLogMetric0_HTTP_Handler(srv MetricsServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLogMetricRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMetricsServiceV2DeleteLogMetric)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLogMetric(ctx, req.(*DeleteLogMetricRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type MetricsServiceV2HTTPClient interface {
	CreateLogMetric(ctx context.Context, req *CreateLogMetricRequest, opts ...http.CallOption) (rsp *LogMetric, err error)
	DeleteLogMetric(ctx context.Context, req *DeleteLogMetricRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetLogMetric(ctx context.Context, req *GetLogMetricRequest, opts ...http.CallOption) (rsp *LogMetric, err error)
	ListLogMetrics(ctx context.Context, req *ListLogMetricsRequest, opts ...http.CallOption) (rsp *ListLogMetricsResponse, err error)
	UpdateLogMetric(ctx context.Context, req *UpdateLogMetricRequest, opts ...http.CallOption) (rsp *LogMetric, err error)
}

type MetricsServiceV2HTTPClientImpl struct {
	cc *http.Client
}

func NewMetricsServiceV2HTTPClient(client *http.Client) MetricsServiceV2HTTPClient {
	return &MetricsServiceV2HTTPClientImpl{client}
}

func (c *MetricsServiceV2HTTPClientImpl) CreateLogMetric(ctx context.Context, in *CreateLogMetricRequest, opts ...http.CallOption) (*LogMetric, error) {
	var out LogMetric
	pattern := "/v2/{parent:projects/.*}/metrics"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMetricsServiceV2CreateLogMetric))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Metric, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MetricsServiceV2HTTPClientImpl) DeleteLogMetric(ctx context.Context, in *DeleteLogMetricRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v2/{metric_name:projects/.*/metrics/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMetricsServiceV2DeleteLogMetric))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MetricsServiceV2HTTPClientImpl) GetLogMetric(ctx context.Context, in *GetLogMetricRequest, opts ...http.CallOption) (*LogMetric, error) {
	var out LogMetric
	pattern := "/v2/{metric_name:projects/.*/metrics/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMetricsServiceV2GetLogMetric))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MetricsServiceV2HTTPClientImpl) ListLogMetrics(ctx context.Context, in *ListLogMetricsRequest, opts ...http.CallOption) (*ListLogMetricsResponse, error) {
	var out ListLogMetricsResponse
	pattern := "/v2/{parent:projects/.*}/metrics"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMetricsServiceV2ListLogMetrics))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *MetricsServiceV2HTTPClientImpl) UpdateLogMetric(ctx context.Context, in *UpdateLogMetricRequest, opts ...http.CallOption) (*LogMetric, error) {
	var out LogMetric
	pattern := "/v2/{metric_name:projects/.*/metrics/.*}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationMetricsServiceV2UpdateLogMetric))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Metric, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
