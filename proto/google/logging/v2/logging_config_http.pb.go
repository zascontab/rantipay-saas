// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: google/logging/v2/logging_config.proto

package loggingpb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationConfigServiceV2CopyLogEntries = "/google.logging.v2.ConfigServiceV2/CopyLogEntries"
const OperationConfigServiceV2CreateBucket = "/google.logging.v2.ConfigServiceV2/CreateBucket"
const OperationConfigServiceV2CreateBucketAsync = "/google.logging.v2.ConfigServiceV2/CreateBucketAsync"
const OperationConfigServiceV2CreateExclusion = "/google.logging.v2.ConfigServiceV2/CreateExclusion"
const OperationConfigServiceV2CreateLink = "/google.logging.v2.ConfigServiceV2/CreateLink"
const OperationConfigServiceV2CreateSink = "/google.logging.v2.ConfigServiceV2/CreateSink"
const OperationConfigServiceV2CreateView = "/google.logging.v2.ConfigServiceV2/CreateView"
const OperationConfigServiceV2DeleteBucket = "/google.logging.v2.ConfigServiceV2/DeleteBucket"
const OperationConfigServiceV2DeleteExclusion = "/google.logging.v2.ConfigServiceV2/DeleteExclusion"
const OperationConfigServiceV2DeleteLink = "/google.logging.v2.ConfigServiceV2/DeleteLink"
const OperationConfigServiceV2DeleteSink = "/google.logging.v2.ConfigServiceV2/DeleteSink"
const OperationConfigServiceV2DeleteView = "/google.logging.v2.ConfigServiceV2/DeleteView"
const OperationConfigServiceV2GetBucket = "/google.logging.v2.ConfigServiceV2/GetBucket"
const OperationConfigServiceV2GetCmekSettings = "/google.logging.v2.ConfigServiceV2/GetCmekSettings"
const OperationConfigServiceV2GetExclusion = "/google.logging.v2.ConfigServiceV2/GetExclusion"
const OperationConfigServiceV2GetLink = "/google.logging.v2.ConfigServiceV2/GetLink"
const OperationConfigServiceV2GetSettings = "/google.logging.v2.ConfigServiceV2/GetSettings"
const OperationConfigServiceV2GetSink = "/google.logging.v2.ConfigServiceV2/GetSink"
const OperationConfigServiceV2GetView = "/google.logging.v2.ConfigServiceV2/GetView"
const OperationConfigServiceV2ListBuckets = "/google.logging.v2.ConfigServiceV2/ListBuckets"
const OperationConfigServiceV2ListExclusions = "/google.logging.v2.ConfigServiceV2/ListExclusions"
const OperationConfigServiceV2ListLinks = "/google.logging.v2.ConfigServiceV2/ListLinks"
const OperationConfigServiceV2ListSinks = "/google.logging.v2.ConfigServiceV2/ListSinks"
const OperationConfigServiceV2ListViews = "/google.logging.v2.ConfigServiceV2/ListViews"
const OperationConfigServiceV2UndeleteBucket = "/google.logging.v2.ConfigServiceV2/UndeleteBucket"
const OperationConfigServiceV2UpdateBucket = "/google.logging.v2.ConfigServiceV2/UpdateBucket"
const OperationConfigServiceV2UpdateBucketAsync = "/google.logging.v2.ConfigServiceV2/UpdateBucketAsync"
const OperationConfigServiceV2UpdateCmekSettings = "/google.logging.v2.ConfigServiceV2/UpdateCmekSettings"
const OperationConfigServiceV2UpdateExclusion = "/google.logging.v2.ConfigServiceV2/UpdateExclusion"
const OperationConfigServiceV2UpdateSettings = "/google.logging.v2.ConfigServiceV2/UpdateSettings"
const OperationConfigServiceV2UpdateSink = "/google.logging.v2.ConfigServiceV2/UpdateSink"
const OperationConfigServiceV2UpdateView = "/google.logging.v2.ConfigServiceV2/UpdateView"

type ConfigServiceV2HTTPServer interface {
	// CopyLogEntries Copies a set of log entries from a log bucket to a Cloud Storage bucket.
	CopyLogEntries(context.Context, *CopyLogEntriesRequest) (*longrunningpb.Operation, error)
	// CreateBucket Creates a log bucket that can be used to store log entries. After a bucket
	// has been created, the bucket's location cannot be changed.
	CreateBucket(context.Context, *CreateBucketRequest) (*LogBucket, error)
	// CreateBucketAsync Creates a log bucket asynchronously that can be used to store log entries.
	//
	// After a bucket has been created, the bucket's location cannot be changed.
	CreateBucketAsync(context.Context, *CreateBucketRequest) (*longrunningpb.Operation, error)
	// CreateExclusion Creates a new exclusion in the _Default sink in a specified parent
	// resource. Only log entries belonging to that resource can be excluded. You
	// can have up to 10 exclusions in a resource.
	CreateExclusion(context.Context, *CreateExclusionRequest) (*LogExclusion, error)
	// CreateLink Asynchronously creates a linked dataset in BigQuery which makes it possible
	// to use BigQuery to read the logs stored in the log bucket. A log bucket may
	// currently only contain one link.
	CreateLink(context.Context, *CreateLinkRequest) (*longrunningpb.Operation, error)
	// CreateSink Creates a sink that exports specified log entries to a destination. The
	// export of newly-ingested log entries begins immediately, unless the sink's
	// `writer_identity` is not permitted to write to the destination. A sink can
	// export log entries only from the resource owning the sink.
	CreateSink(context.Context, *CreateSinkRequest) (*LogSink, error)
	// CreateView Creates a view over log entries in a log bucket. A bucket may contain a
	// maximum of 30 views.
	CreateView(context.Context, *CreateViewRequest) (*LogView, error)
	// DeleteBucket Deletes a log bucket.
	//
	// Changes the bucket's `lifecycle_state` to the `DELETE_REQUESTED` state.
	// After 7 days, the bucket will be purged and all log entries in the bucket
	// will be permanently deleted.
	DeleteBucket(context.Context, *DeleteBucketRequest) (*emptypb.Empty, error)
	// DeleteExclusion Deletes an exclusion in the _Default sink.
	DeleteExclusion(context.Context, *DeleteExclusionRequest) (*emptypb.Empty, error)
	// DeleteLink Deletes a link. This will also delete the corresponding BigQuery linked
	// dataset.
	DeleteLink(context.Context, *DeleteLinkRequest) (*longrunningpb.Operation, error)
	// DeleteSink Deletes a sink. If the sink has a unique `writer_identity`, then that
	// service account is also deleted.
	DeleteSink(context.Context, *DeleteSinkRequest) (*emptypb.Empty, error)
	// DeleteView Deletes a view on a log bucket.
	// If an `UNAVAILABLE` error is returned, this indicates that system is not in
	// a state where it can delete the view. If this occurs, please try again in a
	// few minutes.
	DeleteView(context.Context, *DeleteViewRequest) (*emptypb.Empty, error)
	// GetBucket Gets a log bucket.
	GetBucket(context.Context, *GetBucketRequest) (*LogBucket, error)
	// GetCmekSettings Gets the Logging CMEK settings for the given resource.
	//
	// Note: CMEK for the Log Router can be configured for Google Cloud projects,
	// folders, organizations and billing accounts. Once configured for an
	// organization, it applies to all projects and folders in the Google Cloud
	// organization.
	//
	// See [Enabling CMEK for Log
	// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
	// for more information.
	GetCmekSettings(context.Context, *GetCmekSettingsRequest) (*CmekSettings, error)
	// GetExclusion Gets the description of an exclusion in the _Default sink.
	GetExclusion(context.Context, *GetExclusionRequest) (*LogExclusion, error)
	// GetLink Gets a link.
	GetLink(context.Context, *GetLinkRequest) (*Link, error)
	// GetSettings Gets the Log Router settings for the given resource.
	//
	// Note: Settings for the Log Router can be get for Google Cloud projects,
	// folders, organizations and billing accounts. Currently it can only be
	// configured for organizations. Once configured for an organization, it
	// applies to all projects and folders in the Google Cloud organization.
	//
	// See [Enabling CMEK for Log
	// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
	// for more information.
	GetSettings(context.Context, *GetSettingsRequest) (*Settings, error)
	// GetSink Gets a sink.
	GetSink(context.Context, *GetSinkRequest) (*LogSink, error)
	// GetView Gets a view on a log bucket..
	GetView(context.Context, *GetViewRequest) (*LogView, error)
	// ListBuckets Lists log buckets.
	ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error)
	// ListExclusions Lists all the exclusions on the _Default sink in a parent resource.
	ListExclusions(context.Context, *ListExclusionsRequest) (*ListExclusionsResponse, error)
	// ListLinks Lists links.
	ListLinks(context.Context, *ListLinksRequest) (*ListLinksResponse, error)
	// ListSinks Lists sinks.
	ListSinks(context.Context, *ListSinksRequest) (*ListSinksResponse, error)
	// ListViews Lists views on a log bucket.
	ListViews(context.Context, *ListViewsRequest) (*ListViewsResponse, error)
	// UndeleteBucket Undeletes a log bucket. A bucket that has been deleted can be undeleted
	// within the grace period of 7 days.
	UndeleteBucket(context.Context, *UndeleteBucketRequest) (*emptypb.Empty, error)
	// UpdateBucket Updates a log bucket.
	//
	// If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
	// `FAILED_PRECONDITION` will be returned.
	//
	// After a bucket has been created, the bucket's location cannot be changed.
	UpdateBucket(context.Context, *UpdateBucketRequest) (*LogBucket, error)
	// UpdateBucketAsync Updates a log bucket asynchronously.
	//
	// If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
	// `FAILED_PRECONDITION` will be returned.
	//
	// After a bucket has been created, the bucket's location cannot be changed.
	UpdateBucketAsync(context.Context, *UpdateBucketRequest) (*longrunningpb.Operation, error)
	// UpdateCmekSettings Updates the Log Router CMEK settings for the given resource.
	//
	// Note: CMEK for the Log Router can currently only be configured for Google
	// Cloud organizations. Once configured, it applies to all projects and
	// folders in the Google Cloud organization.
	//
	// [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
	// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
	// account does not have the required
	// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
	// 3) access to the key is disabled.
	//
	// See [Enabling CMEK for Log
	// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
	// for more information.
	UpdateCmekSettings(context.Context, *UpdateCmekSettingsRequest) (*CmekSettings, error)
	// UpdateExclusion Changes one or more properties of an existing exclusion in the _Default
	// sink.
	UpdateExclusion(context.Context, *UpdateExclusionRequest) (*LogExclusion, error)
	// UpdateSettings Updates the Log Router settings for the given resource.
	//
	// Note: Settings for the Log Router can currently only be configured for
	// Google Cloud organizations. Once configured, it applies to all projects and
	// folders in the Google Cloud organization.
	//
	// [UpdateSettings][google.logging.v2.ConfigServiceV2.UpdateSettings]
	// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
	// account does not have the required
	// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
	// 3) access to the key is disabled. 4) `location_id` is not supported by
	// Logging. 5) `location_id` violate OrgPolicy.
	//
	// See [Enabling CMEK for Log
	// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
	// for more information.
	UpdateSettings(context.Context, *UpdateSettingsRequest) (*Settings, error)
	// UpdateSink Updates a sink. This method replaces the following fields in the existing
	// sink with values from the new sink: `destination`, and `filter`.
	//
	// The updated sink might also have a new `writer_identity`; see the
	// `unique_writer_identity` field.
	UpdateSink(context.Context, *UpdateSinkRequest) (*LogSink, error)
	// UpdateView Updates a view on a log bucket. This method replaces the following fields
	// in the existing view with values from the new view: `filter`.
	// If an `UNAVAILABLE` error is returned, this indicates that system is not in
	// a state where it can update the view. If this occurs, please try again in a
	// few minutes.
	UpdateView(context.Context, *UpdateViewRequest) (*LogView, error)
}

func RegisterConfigServiceV2HTTPServer(s *http.Server, srv ConfigServiceV2HTTPServer) {
	r := s.Route("/")
	r.GET("/v2/{parent:projects/.*/locations/.*}/buckets", _ConfigServiceV2_ListBuckets0_HTTP_Handler(srv))
	r.GET("/v2/{parent:organizations/.*/locations/.*}/buckets", _ConfigServiceV2_ListBuckets1_HTTP_Handler(srv))
	r.GET("/v2/{parent:folders/.*/locations/.*}/buckets", _ConfigServiceV2_ListBuckets2_HTTP_Handler(srv))
	r.GET("/v2/{parent:billingAccounts/.*/locations/.*}/buckets", _ConfigServiceV2_ListBuckets3_HTTP_Handler(srv))
	r.GET("/v2/{parent:.*/.*/locations/.*}/buckets", _ConfigServiceV2_ListBuckets4_HTTP_Handler(srv))
	r.GET("/v2/{name:projects/.*/locations/.*/buckets/.*}", _ConfigServiceV2_GetBucket0_HTTP_Handler(srv))
	r.GET("/v2/{name:organizations/.*/locations/.*/buckets/.*}", _ConfigServiceV2_GetBucket1_HTTP_Handler(srv))
	r.GET("/v2/{name:folders/.*/locations/.*/buckets/.*}", _ConfigServiceV2_GetBucket2_HTTP_Handler(srv))
	r.GET("/v2/{name:billingAccounts/.*/locations/.*/buckets/.*}", _ConfigServiceV2_GetBucket3_HTTP_Handler(srv))
	r.GET("/v2/{name:.*/.*/locations/.*/buckets/.*}", _ConfigServiceV2_GetBucket4_HTTP_Handler(srv))
	r.POST("/v2/{parent:projects/.*/locations/.*}/buckets:createAsync", _ConfigServiceV2_CreateBucketAsync0_HTTP_Handler(srv))
	r.POST("/v2/{parent:organizations/.*/locations/.*}/buckets:createAsync", _ConfigServiceV2_CreateBucketAsync1_HTTP_Handler(srv))
	r.POST("/v2/{parent:folders/.*/locations/.*}/buckets:createAsync", _ConfigServiceV2_CreateBucketAsync2_HTTP_Handler(srv))
	r.POST("/v2/{parent:billingAccounts/.*/locations/.*}/buckets:createAsync", _ConfigServiceV2_CreateBucketAsync3_HTTP_Handler(srv))
	r.POST("/v2/{parent:.*/.*/locations/.*}/buckets:createAsync", _ConfigServiceV2_CreateBucketAsync4_HTTP_Handler(srv))
	r.POST("/v2/{name:projects/.*/locations/.*/buckets/.*}:updateAsync", _ConfigServiceV2_UpdateBucketAsync0_HTTP_Handler(srv))
	r.POST("/v2/{name:organizations/.*/locations/.*/buckets/.*}:updateAsync", _ConfigServiceV2_UpdateBucketAsync1_HTTP_Handler(srv))
	r.POST("/v2/{name:folders/.*/locations/.*/buckets/.*}:updateAsync", _ConfigServiceV2_UpdateBucketAsync2_HTTP_Handler(srv))
	r.POST("/v2/{name:billingAccounts/.*/locations/.*/buckets/.*}:updateAsync", _ConfigServiceV2_UpdateBucketAsync3_HTTP_Handler(srv))
	r.POST("/v2/{name:.*/.*/locations/.*/buckets/.*}:updateAsync", _ConfigServiceV2_UpdateBucketAsync4_HTTP_Handler(srv))
	r.POST("/v2/{parent:projects/.*/locations/.*}/buckets", _ConfigServiceV2_CreateBucket0_HTTP_Handler(srv))
	r.POST("/v2/{parent:organizations/.*/locations/.*}/buckets", _ConfigServiceV2_CreateBucket1_HTTP_Handler(srv))
	r.POST("/v2/{parent:folders/.*/locations/.*}/buckets", _ConfigServiceV2_CreateBucket2_HTTP_Handler(srv))
	r.POST("/v2/{parent:billingAccounts/.*/locations/.*}/buckets", _ConfigServiceV2_CreateBucket3_HTTP_Handler(srv))
	r.POST("/v2/{parent:.*/.*/locations/.*}/buckets", _ConfigServiceV2_CreateBucket4_HTTP_Handler(srv))
	r.PATCH("/v2/{name:projects/.*/locations/.*/buckets/.*}", _ConfigServiceV2_UpdateBucket0_HTTP_Handler(srv))
	r.PATCH("/v2/{name:organizations/.*/locations/.*/buckets/.*}", _ConfigServiceV2_UpdateBucket1_HTTP_Handler(srv))
	r.PATCH("/v2/{name:folders/.*/locations/.*/buckets/.*}", _ConfigServiceV2_UpdateBucket2_HTTP_Handler(srv))
	r.PATCH("/v2/{name:billingAccounts/.*/locations/.*/buckets/.*}", _ConfigServiceV2_UpdateBucket3_HTTP_Handler(srv))
	r.PATCH("/v2/{name:.*/.*/locations/.*/buckets/.*}", _ConfigServiceV2_UpdateBucket4_HTTP_Handler(srv))
	r.DELETE("/v2/{name:projects/.*/locations/.*/buckets/.*}", _ConfigServiceV2_DeleteBucket0_HTTP_Handler(srv))
	r.DELETE("/v2/{name:organizations/.*/locations/.*/buckets/.*}", _ConfigServiceV2_DeleteBucket1_HTTP_Handler(srv))
	r.DELETE("/v2/{name:folders/.*/locations/.*/buckets/.*}", _ConfigServiceV2_DeleteBucket2_HTTP_Handler(srv))
	r.DELETE("/v2/{name:billingAccounts/.*/locations/.*/buckets/.*}", _ConfigServiceV2_DeleteBucket3_HTTP_Handler(srv))
	r.DELETE("/v2/{name:.*/.*/locations/.*/buckets/.*}", _ConfigServiceV2_DeleteBucket4_HTTP_Handler(srv))
	r.POST("/v2/{name:projects/.*/locations/.*/buckets/.*}:undelete", _ConfigServiceV2_UndeleteBucket0_HTTP_Handler(srv))
	r.POST("/v2/{name:organizations/.*/locations/.*/buckets/.*}:undelete", _ConfigServiceV2_UndeleteBucket1_HTTP_Handler(srv))
	r.POST("/v2/{name:folders/.*/locations/.*/buckets/.*}:undelete", _ConfigServiceV2_UndeleteBucket2_HTTP_Handler(srv))
	r.POST("/v2/{name:billingAccounts/.*/locations/.*/buckets/.*}:undelete", _ConfigServiceV2_UndeleteBucket3_HTTP_Handler(srv))
	r.POST("/v2/{name:.*/.*/locations/.*/buckets/.*}:undelete", _ConfigServiceV2_UndeleteBucket4_HTTP_Handler(srv))
	r.GET("/v2/{parent:projects/.*/locations/.*/buckets/.*}/views", _ConfigServiceV2_ListViews0_HTTP_Handler(srv))
	r.GET("/v2/{parent:organizations/.*/locations/.*/buckets/.*}/views", _ConfigServiceV2_ListViews1_HTTP_Handler(srv))
	r.GET("/v2/{parent:folders/.*/locations/.*/buckets/.*}/views", _ConfigServiceV2_ListViews2_HTTP_Handler(srv))
	r.GET("/v2/{parent:billingAccounts/.*/locations/.*/buckets/.*}/views", _ConfigServiceV2_ListViews3_HTTP_Handler(srv))
	r.GET("/v2/{parent:.*/.*/locations/.*/buckets/.*}/views", _ConfigServiceV2_ListViews4_HTTP_Handler(srv))
	r.GET("/v2/{name:projects/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_GetView0_HTTP_Handler(srv))
	r.GET("/v2/{name:organizations/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_GetView1_HTTP_Handler(srv))
	r.GET("/v2/{name:folders/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_GetView2_HTTP_Handler(srv))
	r.GET("/v2/{name:billingAccounts/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_GetView3_HTTP_Handler(srv))
	r.GET("/v2/{name:.*/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_GetView4_HTTP_Handler(srv))
	r.POST("/v2/{parent:projects/.*/locations/.*/buckets/.*}/views", _ConfigServiceV2_CreateView0_HTTP_Handler(srv))
	r.POST("/v2/{parent:organizations/.*/locations/.*/buckets/.*}/views", _ConfigServiceV2_CreateView1_HTTP_Handler(srv))
	r.POST("/v2/{parent:folders/.*/locations/.*/buckets/.*}/views", _ConfigServiceV2_CreateView2_HTTP_Handler(srv))
	r.POST("/v2/{parent:billingAccounts/.*/locations/.*/buckets/.*}/views", _ConfigServiceV2_CreateView3_HTTP_Handler(srv))
	r.POST("/v2/{parent:.*/.*/locations/.*/buckets/.*}/views", _ConfigServiceV2_CreateView4_HTTP_Handler(srv))
	r.PATCH("/v2/{name:projects/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_UpdateView0_HTTP_Handler(srv))
	r.PATCH("/v2/{name:organizations/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_UpdateView1_HTTP_Handler(srv))
	r.PATCH("/v2/{name:folders/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_UpdateView2_HTTP_Handler(srv))
	r.PATCH("/v2/{name:billingAccounts/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_UpdateView3_HTTP_Handler(srv))
	r.PATCH("/v2/{name:.*/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_UpdateView4_HTTP_Handler(srv))
	r.DELETE("/v2/{name:projects/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_DeleteView0_HTTP_Handler(srv))
	r.DELETE("/v2/{name:organizations/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_DeleteView1_HTTP_Handler(srv))
	r.DELETE("/v2/{name:folders/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_DeleteView2_HTTP_Handler(srv))
	r.DELETE("/v2/{name:billingAccounts/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_DeleteView3_HTTP_Handler(srv))
	r.DELETE("/v2/{name:.*/.*/locations/.*/buckets/.*/views/.*}", _ConfigServiceV2_DeleteView4_HTTP_Handler(srv))
	r.GET("/v2/{parent:projects/.*}/sinks", _ConfigServiceV2_ListSinks0_HTTP_Handler(srv))
	r.GET("/v2/{parent:organizations/.*}/sinks", _ConfigServiceV2_ListSinks1_HTTP_Handler(srv))
	r.GET("/v2/{parent:folders/.*}/sinks", _ConfigServiceV2_ListSinks2_HTTP_Handler(srv))
	r.GET("/v2/{parent:billingAccounts/.*}/sinks", _ConfigServiceV2_ListSinks3_HTTP_Handler(srv))
	r.GET("/v2/{parent:.*/.*}/sinks", _ConfigServiceV2_ListSinks4_HTTP_Handler(srv))
	r.GET("/v2/{sink_name:projects/.*/sinks/.*}", _ConfigServiceV2_GetSink0_HTTP_Handler(srv))
	r.GET("/v2/{sink_name:organizations/.*/sinks/.*}", _ConfigServiceV2_GetSink1_HTTP_Handler(srv))
	r.GET("/v2/{sink_name:folders/.*/sinks/.*}", _ConfigServiceV2_GetSink2_HTTP_Handler(srv))
	r.GET("/v2/{sink_name:billingAccounts/.*/sinks/.*}", _ConfigServiceV2_GetSink3_HTTP_Handler(srv))
	r.GET("/v2/{sink_name:.*/.*/sinks/.*}", _ConfigServiceV2_GetSink4_HTTP_Handler(srv))
	r.POST("/v2/{parent:projects/.*}/sinks", _ConfigServiceV2_CreateSink0_HTTP_Handler(srv))
	r.POST("/v2/{parent:organizations/.*}/sinks", _ConfigServiceV2_CreateSink1_HTTP_Handler(srv))
	r.POST("/v2/{parent:folders/.*}/sinks", _ConfigServiceV2_CreateSink2_HTTP_Handler(srv))
	r.POST("/v2/{parent:billingAccounts/.*}/sinks", _ConfigServiceV2_CreateSink3_HTTP_Handler(srv))
	r.POST("/v2/{parent:.*/.*}/sinks", _ConfigServiceV2_CreateSink4_HTTP_Handler(srv))
	r.PUT("/v2/{sink_name:projects/.*/sinks/.*}", _ConfigServiceV2_UpdateSink0_HTTP_Handler(srv))
	r.PUT("/v2/{sink_name:organizations/.*/sinks/.*}", _ConfigServiceV2_UpdateSink1_HTTP_Handler(srv))
	r.PUT("/v2/{sink_name:folders/.*/sinks/.*}", _ConfigServiceV2_UpdateSink2_HTTP_Handler(srv))
	r.PUT("/v2/{sink_name:billingAccounts/.*/sinks/.*}", _ConfigServiceV2_UpdateSink3_HTTP_Handler(srv))
	r.PATCH("/v2/{sink_name:projects/.*/sinks/.*}", _ConfigServiceV2_UpdateSink4_HTTP_Handler(srv))
	r.PATCH("/v2/{sink_name:organizations/.*/sinks/.*}", _ConfigServiceV2_UpdateSink5_HTTP_Handler(srv))
	r.PATCH("/v2/{sink_name:folders/.*/sinks/.*}", _ConfigServiceV2_UpdateSink6_HTTP_Handler(srv))
	r.PATCH("/v2/{sink_name:billingAccounts/.*/sinks/.*}", _ConfigServiceV2_UpdateSink7_HTTP_Handler(srv))
	r.PUT("/v2/{sink_name:.*/.*/sinks/.*}", _ConfigServiceV2_UpdateSink8_HTTP_Handler(srv))
	r.DELETE("/v2/{sink_name:projects/.*/sinks/.*}", _ConfigServiceV2_DeleteSink0_HTTP_Handler(srv))
	r.DELETE("/v2/{sink_name:organizations/.*/sinks/.*}", _ConfigServiceV2_DeleteSink1_HTTP_Handler(srv))
	r.DELETE("/v2/{sink_name:folders/.*/sinks/.*}", _ConfigServiceV2_DeleteSink2_HTTP_Handler(srv))
	r.DELETE("/v2/{sink_name:billingAccounts/.*/sinks/.*}", _ConfigServiceV2_DeleteSink3_HTTP_Handler(srv))
	r.DELETE("/v2/{sink_name:.*/.*/sinks/.*}", _ConfigServiceV2_DeleteSink4_HTTP_Handler(srv))
	r.POST("/v2/{parent:projects/.*/locations/.*/buckets/.*}/links", _ConfigServiceV2_CreateLink0_HTTP_Handler(srv))
	r.POST("/v2/{parent:organizations/.*/locations/.*/buckets/.*}/links", _ConfigServiceV2_CreateLink1_HTTP_Handler(srv))
	r.POST("/v2/{parent:folders/.*/locations/.*/buckets/.*}/links", _ConfigServiceV2_CreateLink2_HTTP_Handler(srv))
	r.POST("/v2/{parent:billingAccounts/.*/locations/.*/buckets/.*}/links", _ConfigServiceV2_CreateLink3_HTTP_Handler(srv))
	r.POST("/v2/{parent:.*/.*/locations/.*/buckets/.*}/links", _ConfigServiceV2_CreateLink4_HTTP_Handler(srv))
	r.DELETE("/v2/{name:projects/.*/locations/.*/buckets/.*/links/.*}", _ConfigServiceV2_DeleteLink0_HTTP_Handler(srv))
	r.DELETE("/v2/{name:organizations/.*/locations/.*/buckets/.*/links/.*}", _ConfigServiceV2_DeleteLink1_HTTP_Handler(srv))
	r.DELETE("/v2/{name:folders/.*/locations/.*/buckets/.*/links/.*}", _ConfigServiceV2_DeleteLink2_HTTP_Handler(srv))
	r.DELETE("/v2/{name:billingAccounts/.*/locations/.*/buckets/.*/links/.*}", _ConfigServiceV2_DeleteLink3_HTTP_Handler(srv))
	r.DELETE("/v2/{name:.*/.*/locations/.*/buckets/.*/links/.*}", _ConfigServiceV2_DeleteLink4_HTTP_Handler(srv))
	r.GET("/v2/{parent:projects/.*/locations/.*/buckets/.*}/links", _ConfigServiceV2_ListLinks0_HTTP_Handler(srv))
	r.GET("/v2/{parent:organizations/.*/locations/.*/buckets/.*}/links", _ConfigServiceV2_ListLinks1_HTTP_Handler(srv))
	r.GET("/v2/{parent:folders/.*/locations/.*/buckets/.*}/links", _ConfigServiceV2_ListLinks2_HTTP_Handler(srv))
	r.GET("/v2/{parent:billingAccounts/.*/locations/.*/buckets/.*}/links", _ConfigServiceV2_ListLinks3_HTTP_Handler(srv))
	r.GET("/v2/{parent:.*/.*/locations/.*/buckets/.*}/links", _ConfigServiceV2_ListLinks4_HTTP_Handler(srv))
	r.GET("/v2/{name:projects/.*/locations/.*/buckets/.*/links/.*}", _ConfigServiceV2_GetLink0_HTTP_Handler(srv))
	r.GET("/v2/{name:organizations/.*/locations/.*/buckets/.*/links/.*}", _ConfigServiceV2_GetLink1_HTTP_Handler(srv))
	r.GET("/v2/{name:folders/.*/locations/.*/buckets/.*/links/.*}", _ConfigServiceV2_GetLink2_HTTP_Handler(srv))
	r.GET("/v2/{name:billingAccounts/.*/locations/.*/buckets/.*/links/.*}", _ConfigServiceV2_GetLink3_HTTP_Handler(srv))
	r.GET("/v2/{name:.*/.*/locations/.*/buckets/.*/links/.*}", _ConfigServiceV2_GetLink4_HTTP_Handler(srv))
	r.GET("/v2/{parent:projects/.*}/exclusions", _ConfigServiceV2_ListExclusions0_HTTP_Handler(srv))
	r.GET("/v2/{parent:organizations/.*}/exclusions", _ConfigServiceV2_ListExclusions1_HTTP_Handler(srv))
	r.GET("/v2/{parent:folders/.*}/exclusions", _ConfigServiceV2_ListExclusions2_HTTP_Handler(srv))
	r.GET("/v2/{parent:billingAccounts/.*}/exclusions", _ConfigServiceV2_ListExclusions3_HTTP_Handler(srv))
	r.GET("/v2/{parent:.*/.*}/exclusions", _ConfigServiceV2_ListExclusions4_HTTP_Handler(srv))
	r.GET("/v2/{name:projects/.*/exclusions/.*}", _ConfigServiceV2_GetExclusion0_HTTP_Handler(srv))
	r.GET("/v2/{name:organizations/.*/exclusions/.*}", _ConfigServiceV2_GetExclusion1_HTTP_Handler(srv))
	r.GET("/v2/{name:folders/.*/exclusions/.*}", _ConfigServiceV2_GetExclusion2_HTTP_Handler(srv))
	r.GET("/v2/{name:billingAccounts/.*/exclusions/.*}", _ConfigServiceV2_GetExclusion3_HTTP_Handler(srv))
	r.GET("/v2/{name:.*/.*/exclusions/.*}", _ConfigServiceV2_GetExclusion4_HTTP_Handler(srv))
	r.POST("/v2/{parent:projects/.*}/exclusions", _ConfigServiceV2_CreateExclusion0_HTTP_Handler(srv))
	r.POST("/v2/{parent:organizations/.*}/exclusions", _ConfigServiceV2_CreateExclusion1_HTTP_Handler(srv))
	r.POST("/v2/{parent:folders/.*}/exclusions", _ConfigServiceV2_CreateExclusion2_HTTP_Handler(srv))
	r.POST("/v2/{parent:billingAccounts/.*}/exclusions", _ConfigServiceV2_CreateExclusion3_HTTP_Handler(srv))
	r.POST("/v2/{parent:.*/.*}/exclusions", _ConfigServiceV2_CreateExclusion4_HTTP_Handler(srv))
	r.PATCH("/v2/{name:projects/.*/exclusions/.*}", _ConfigServiceV2_UpdateExclusion0_HTTP_Handler(srv))
	r.PATCH("/v2/{name:organizations/.*/exclusions/.*}", _ConfigServiceV2_UpdateExclusion1_HTTP_Handler(srv))
	r.PATCH("/v2/{name:folders/.*/exclusions/.*}", _ConfigServiceV2_UpdateExclusion2_HTTP_Handler(srv))
	r.PATCH("/v2/{name:billingAccounts/.*/exclusions/.*}", _ConfigServiceV2_UpdateExclusion3_HTTP_Handler(srv))
	r.PATCH("/v2/{name:.*/.*/exclusions/.*}", _ConfigServiceV2_UpdateExclusion4_HTTP_Handler(srv))
	r.DELETE("/v2/{name:projects/.*/exclusions/.*}", _ConfigServiceV2_DeleteExclusion0_HTTP_Handler(srv))
	r.DELETE("/v2/{name:organizations/.*/exclusions/.*}", _ConfigServiceV2_DeleteExclusion1_HTTP_Handler(srv))
	r.DELETE("/v2/{name:folders/.*/exclusions/.*}", _ConfigServiceV2_DeleteExclusion2_HTTP_Handler(srv))
	r.DELETE("/v2/{name:billingAccounts/.*/exclusions/.*}", _ConfigServiceV2_DeleteExclusion3_HTTP_Handler(srv))
	r.DELETE("/v2/{name:.*/.*/exclusions/.*}", _ConfigServiceV2_DeleteExclusion4_HTTP_Handler(srv))
	r.GET("/v2/{name:projects/.*}/cmekSettings", _ConfigServiceV2_GetCmekSettings0_HTTP_Handler(srv))
	r.GET("/v2/{name:organizations/.*}/cmekSettings", _ConfigServiceV2_GetCmekSettings1_HTTP_Handler(srv))
	r.GET("/v2/{name:folders/.*}/cmekSettings", _ConfigServiceV2_GetCmekSettings2_HTTP_Handler(srv))
	r.GET("/v2/{name:billingAccounts/.*}/cmekSettings", _ConfigServiceV2_GetCmekSettings3_HTTP_Handler(srv))
	r.GET("/v2/{name:.*/.*}/cmekSettings", _ConfigServiceV2_GetCmekSettings4_HTTP_Handler(srv))
	r.PATCH("/v2/{name:organizations/.*}/cmekSettings", _ConfigServiceV2_UpdateCmekSettings0_HTTP_Handler(srv))
	r.PATCH("/v2/{name:.*/.*}/cmekSettings", _ConfigServiceV2_UpdateCmekSettings1_HTTP_Handler(srv))
	r.GET("/v2/{name:projects/.*}/settings", _ConfigServiceV2_GetSettings0_HTTP_Handler(srv))
	r.GET("/v2/{name:organizations/.*}/settings", _ConfigServiceV2_GetSettings1_HTTP_Handler(srv))
	r.GET("/v2/{name:folders/.*}/settings", _ConfigServiceV2_GetSettings2_HTTP_Handler(srv))
	r.GET("/v2/{name:billingAccounts/.*}/settings", _ConfigServiceV2_GetSettings3_HTTP_Handler(srv))
	r.GET("/v2/{name:.*/.*}/settings", _ConfigServiceV2_GetSettings4_HTTP_Handler(srv))
	r.PATCH("/v2/{name:organizations/.*}/settings", _ConfigServiceV2_UpdateSettings0_HTTP_Handler(srv))
	r.PATCH("/v2/{name:folders/.*}/settings", _ConfigServiceV2_UpdateSettings1_HTTP_Handler(srv))
	r.PATCH("/v2/{name:.*/.*}/settings", _ConfigServiceV2_UpdateSettings2_HTTP_Handler(srv))
	r.POST("/v2/entries:copy", _ConfigServiceV2_CopyLogEntries0_HTTP_Handler(srv))
}

func _ConfigServiceV2_ListBuckets0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBucketsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListBuckets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBuckets(ctx, req.(*ListBucketsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBucketsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListBuckets1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBucketsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListBuckets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBuckets(ctx, req.(*ListBucketsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBucketsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListBuckets2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBucketsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListBuckets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBuckets(ctx, req.(*ListBucketsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBucketsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListBuckets3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBucketsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListBuckets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBuckets(ctx, req.(*ListBucketsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBucketsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListBuckets4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBucketsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListBuckets)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBuckets(ctx, req.(*ListBucketsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBucketsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetBucket0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBucket(ctx, req.(*GetBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetBucket1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBucket(ctx, req.(*GetBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetBucket2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBucket(ctx, req.(*GetBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetBucket3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBucket(ctx, req.(*GetBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetBucket4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBucket(ctx, req.(*GetBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateBucketAsync0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateBucketAsync)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBucketAsync(ctx, req.(*CreateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateBucketAsync1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateBucketAsync)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBucketAsync(ctx, req.(*CreateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateBucketAsync2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateBucketAsync)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBucketAsync(ctx, req.(*CreateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateBucketAsync3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateBucketAsync)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBucketAsync(ctx, req.(*CreateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateBucketAsync4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateBucketAsync)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBucketAsync(ctx, req.(*CreateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateBucketAsync0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateBucketAsync)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBucketAsync(ctx, req.(*UpdateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateBucketAsync1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateBucketAsync)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBucketAsync(ctx, req.(*UpdateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateBucketAsync2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateBucketAsync)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBucketAsync(ctx, req.(*UpdateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateBucketAsync3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateBucketAsync)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBucketAsync(ctx, req.(*UpdateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateBucketAsync4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateBucketAsync)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBucketAsync(ctx, req.(*UpdateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateBucket0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBucket(ctx, req.(*CreateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateBucket1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBucket(ctx, req.(*CreateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateBucket2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBucket(ctx, req.(*CreateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateBucket3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBucket(ctx, req.(*CreateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateBucket4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBucket(ctx, req.(*CreateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateBucket0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBucket(ctx, req.(*UpdateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateBucket1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBucket(ctx, req.(*UpdateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateBucket2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBucket(ctx, req.(*UpdateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateBucket3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBucket(ctx, req.(*UpdateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateBucket4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBucketRequest
		if err := ctx.Bind(&in.Bucket); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBucket(ctx, req.(*UpdateBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogBucket)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteBucket0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBucket(ctx, req.(*DeleteBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteBucket1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBucket(ctx, req.(*DeleteBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteBucket2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBucket(ctx, req.(*DeleteBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteBucket3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBucket(ctx, req.(*DeleteBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteBucket4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBucketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBucket(ctx, req.(*DeleteBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UndeleteBucket0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UndeleteBucketRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UndeleteBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UndeleteBucket(ctx, req.(*UndeleteBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UndeleteBucket1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UndeleteBucketRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UndeleteBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UndeleteBucket(ctx, req.(*UndeleteBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UndeleteBucket2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UndeleteBucketRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UndeleteBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UndeleteBucket(ctx, req.(*UndeleteBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UndeleteBucket3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UndeleteBucketRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UndeleteBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UndeleteBucket(ctx, req.(*UndeleteBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UndeleteBucket4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UndeleteBucketRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UndeleteBucket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UndeleteBucket(ctx, req.(*UndeleteBucketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListViews0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListViewsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListViews)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListViews(ctx, req.(*ListViewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListViewsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListViews1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListViewsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListViews)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListViews(ctx, req.(*ListViewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListViewsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListViews2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListViewsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListViews)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListViews(ctx, req.(*ListViewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListViewsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListViews3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListViewsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListViews)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListViews(ctx, req.(*ListViewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListViewsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListViews4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListViewsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListViews)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListViews(ctx, req.(*ListViewsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListViewsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetView0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetViewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetView(ctx, req.(*GetViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetView1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetViewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetView(ctx, req.(*GetViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetView2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetViewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetView(ctx, req.(*GetViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetView3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetViewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetView(ctx, req.(*GetViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetView4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetViewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetView(ctx, req.(*GetViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateView0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateViewRequest
		if err := ctx.Bind(&in.View); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateView(ctx, req.(*CreateViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateView1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateViewRequest
		if err := ctx.Bind(&in.View); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateView(ctx, req.(*CreateViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateView2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateViewRequest
		if err := ctx.Bind(&in.View); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateView(ctx, req.(*CreateViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateView3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateViewRequest
		if err := ctx.Bind(&in.View); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateView(ctx, req.(*CreateViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateView4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateViewRequest
		if err := ctx.Bind(&in.View); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateView(ctx, req.(*CreateViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateView0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateViewRequest
		if err := ctx.Bind(&in.View); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateView(ctx, req.(*UpdateViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateView1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateViewRequest
		if err := ctx.Bind(&in.View); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateView(ctx, req.(*UpdateViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateView2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateViewRequest
		if err := ctx.Bind(&in.View); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateView(ctx, req.(*UpdateViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateView3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateViewRequest
		if err := ctx.Bind(&in.View); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateView(ctx, req.(*UpdateViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateView4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateViewRequest
		if err := ctx.Bind(&in.View); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateView(ctx, req.(*UpdateViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogView)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteView0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteViewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteView(ctx, req.(*DeleteViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteView1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteViewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteView(ctx, req.(*DeleteViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteView2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteViewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteView(ctx, req.(*DeleteViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteView3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteViewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteView(ctx, req.(*DeleteViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteView4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteViewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteView)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteView(ctx, req.(*DeleteViewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListSinks0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSinksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListSinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSinks(ctx, req.(*ListSinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSinksResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListSinks1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSinksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListSinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSinks(ctx, req.(*ListSinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSinksResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListSinks2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSinksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListSinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSinks(ctx, req.(*ListSinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSinksResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListSinks3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSinksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListSinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSinks(ctx, req.(*ListSinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSinksResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListSinks4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSinksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListSinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSinks(ctx, req.(*ListSinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSinksResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetSink0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSink(ctx, req.(*GetSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetSink1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSink(ctx, req.(*GetSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetSink2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSink(ctx, req.(*GetSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetSink3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSink(ctx, req.(*GetSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetSink4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSink(ctx, req.(*GetSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateSink0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSink(ctx, req.(*CreateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateSink1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSink(ctx, req.(*CreateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateSink2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSink(ctx, req.(*CreateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateSink3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSink(ctx, req.(*CreateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateSink4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSink(ctx, req.(*CreateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateSink0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSink(ctx, req.(*UpdateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateSink1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSink(ctx, req.(*UpdateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateSink2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSink(ctx, req.(*UpdateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateSink3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSink(ctx, req.(*UpdateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateSink4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSink(ctx, req.(*UpdateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateSink5_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSink(ctx, req.(*UpdateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateSink6_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSink(ctx, req.(*UpdateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateSink7_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSink(ctx, req.(*UpdateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateSink8_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSinkRequest
		if err := ctx.Bind(&in.Sink); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSink(ctx, req.(*UpdateSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogSink)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteSink0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSink(ctx, req.(*DeleteSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteSink1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSink(ctx, req.(*DeleteSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteSink2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSink(ctx, req.(*DeleteSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteSink3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSink(ctx, req.(*DeleteSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteSink4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteSink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSink(ctx, req.(*DeleteSinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateLink0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLinkRequest
		if err := ctx.Bind(&in.Link); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLink(ctx, req.(*CreateLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateLink1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLinkRequest
		if err := ctx.Bind(&in.Link); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLink(ctx, req.(*CreateLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateLink2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLinkRequest
		if err := ctx.Bind(&in.Link); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLink(ctx, req.(*CreateLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateLink3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLinkRequest
		if err := ctx.Bind(&in.Link); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLink(ctx, req.(*CreateLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateLink4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateLinkRequest
		if err := ctx.Bind(&in.Link); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLink(ctx, req.(*CreateLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteLink0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLink(ctx, req.(*DeleteLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteLink1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLink(ctx, req.(*DeleteLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteLink2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLink(ctx, req.(*DeleteLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteLink3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLink(ctx, req.(*DeleteLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteLink4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLink(ctx, req.(*DeleteLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListLinks0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLinksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListLinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLinks(ctx, req.(*ListLinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLinksResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListLinks1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLinksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListLinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLinks(ctx, req.(*ListLinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLinksResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListLinks2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLinksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListLinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLinks(ctx, req.(*ListLinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLinksResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListLinks3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLinksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListLinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLinks(ctx, req.(*ListLinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLinksResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListLinks4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLinksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListLinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLinks(ctx, req.(*ListLinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLinksResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetLink0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLink(ctx, req.(*GetLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Link)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetLink1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLink(ctx, req.(*GetLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Link)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetLink2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLink(ctx, req.(*GetLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Link)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetLink3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLink(ctx, req.(*GetLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Link)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetLink4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLink(ctx, req.(*GetLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Link)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListExclusions0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListExclusionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListExclusions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListExclusions(ctx, req.(*ListExclusionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListExclusionsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListExclusions1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListExclusionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListExclusions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListExclusions(ctx, req.(*ListExclusionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListExclusionsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListExclusions2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListExclusionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListExclusions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListExclusions(ctx, req.(*ListExclusionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListExclusionsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListExclusions3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListExclusionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListExclusions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListExclusions(ctx, req.(*ListExclusionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListExclusionsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_ListExclusions4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListExclusionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2ListExclusions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListExclusions(ctx, req.(*ListExclusionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListExclusionsResponse)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetExclusion0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExclusionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExclusion(ctx, req.(*GetExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetExclusion1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExclusionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExclusion(ctx, req.(*GetExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetExclusion2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExclusionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExclusion(ctx, req.(*GetExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetExclusion3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExclusionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExclusion(ctx, req.(*GetExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetExclusion4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExclusionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExclusion(ctx, req.(*GetExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateExclusion0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateExclusionRequest
		if err := ctx.Bind(&in.Exclusion); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateExclusion(ctx, req.(*CreateExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateExclusion1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateExclusionRequest
		if err := ctx.Bind(&in.Exclusion); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateExclusion(ctx, req.(*CreateExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateExclusion2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateExclusionRequest
		if err := ctx.Bind(&in.Exclusion); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateExclusion(ctx, req.(*CreateExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateExclusion3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateExclusionRequest
		if err := ctx.Bind(&in.Exclusion); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateExclusion(ctx, req.(*CreateExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CreateExclusion4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateExclusionRequest
		if err := ctx.Bind(&in.Exclusion); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CreateExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateExclusion(ctx, req.(*CreateExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateExclusion0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateExclusionRequest
		if err := ctx.Bind(&in.Exclusion); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateExclusion(ctx, req.(*UpdateExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateExclusion1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateExclusionRequest
		if err := ctx.Bind(&in.Exclusion); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateExclusion(ctx, req.(*UpdateExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateExclusion2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateExclusionRequest
		if err := ctx.Bind(&in.Exclusion); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateExclusion(ctx, req.(*UpdateExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateExclusion3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateExclusionRequest
		if err := ctx.Bind(&in.Exclusion); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateExclusion(ctx, req.(*UpdateExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateExclusion4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateExclusionRequest
		if err := ctx.Bind(&in.Exclusion); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateExclusion(ctx, req.(*UpdateExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogExclusion)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteExclusion0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteExclusionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteExclusion(ctx, req.(*DeleteExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteExclusion1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteExclusionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteExclusion(ctx, req.(*DeleteExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteExclusion2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteExclusionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteExclusion(ctx, req.(*DeleteExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteExclusion3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteExclusionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteExclusion(ctx, req.(*DeleteExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_DeleteExclusion4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteExclusionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2DeleteExclusion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteExclusion(ctx, req.(*DeleteExclusionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetCmekSettings0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCmekSettingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetCmekSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCmekSettings(ctx, req.(*GetCmekSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CmekSettings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetCmekSettings1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCmekSettingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetCmekSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCmekSettings(ctx, req.(*GetCmekSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CmekSettings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetCmekSettings2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCmekSettingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetCmekSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCmekSettings(ctx, req.(*GetCmekSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CmekSettings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetCmekSettings3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCmekSettingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetCmekSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCmekSettings(ctx, req.(*GetCmekSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CmekSettings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetCmekSettings4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCmekSettingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetCmekSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCmekSettings(ctx, req.(*GetCmekSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CmekSettings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateCmekSettings0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCmekSettingsRequest
		if err := ctx.Bind(&in.CmekSettings); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateCmekSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCmekSettings(ctx, req.(*UpdateCmekSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CmekSettings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateCmekSettings1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCmekSettingsRequest
		if err := ctx.Bind(&in.CmekSettings); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateCmekSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCmekSettings(ctx, req.(*UpdateCmekSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CmekSettings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetSettings0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSettingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSettings(ctx, req.(*GetSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Settings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetSettings1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSettingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSettings(ctx, req.(*GetSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Settings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetSettings2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSettingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSettings(ctx, req.(*GetSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Settings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetSettings3_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSettingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSettings(ctx, req.(*GetSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Settings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_GetSettings4_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSettingsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2GetSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSettings(ctx, req.(*GetSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Settings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateSettings0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSettingsRequest
		if err := ctx.Bind(&in.Settings); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSettings(ctx, req.(*UpdateSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Settings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateSettings1_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSettingsRequest
		if err := ctx.Bind(&in.Settings); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSettings(ctx, req.(*UpdateSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Settings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_UpdateSettings2_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSettingsRequest
		if err := ctx.Bind(&in.Settings); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2UpdateSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSettings(ctx, req.(*UpdateSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Settings)
		return ctx.Result(200, reply)
	}
}

func _ConfigServiceV2_CopyLogEntries0_HTTP_Handler(srv ConfigServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CopyLogEntriesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConfigServiceV2CopyLogEntries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CopyLogEntries(ctx, req.(*CopyLogEntriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*longrunningpb.Operation)
		return ctx.Result(200, reply)
	}
}

type ConfigServiceV2HTTPClient interface {
	CopyLogEntries(ctx context.Context, req *CopyLogEntriesRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	CreateBucket(ctx context.Context, req *CreateBucketRequest, opts ...http.CallOption) (rsp *LogBucket, err error)
	CreateBucketAsync(ctx context.Context, req *CreateBucketRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	CreateExclusion(ctx context.Context, req *CreateExclusionRequest, opts ...http.CallOption) (rsp *LogExclusion, err error)
	CreateLink(ctx context.Context, req *CreateLinkRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	CreateSink(ctx context.Context, req *CreateSinkRequest, opts ...http.CallOption) (rsp *LogSink, err error)
	CreateView(ctx context.Context, req *CreateViewRequest, opts ...http.CallOption) (rsp *LogView, err error)
	DeleteBucket(ctx context.Context, req *DeleteBucketRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteExclusion(ctx context.Context, req *DeleteExclusionRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteLink(ctx context.Context, req *DeleteLinkRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	DeleteSink(ctx context.Context, req *DeleteSinkRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteView(ctx context.Context, req *DeleteViewRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetBucket(ctx context.Context, req *GetBucketRequest, opts ...http.CallOption) (rsp *LogBucket, err error)
	GetCmekSettings(ctx context.Context, req *GetCmekSettingsRequest, opts ...http.CallOption) (rsp *CmekSettings, err error)
	GetExclusion(ctx context.Context, req *GetExclusionRequest, opts ...http.CallOption) (rsp *LogExclusion, err error)
	GetLink(ctx context.Context, req *GetLinkRequest, opts ...http.CallOption) (rsp *Link, err error)
	GetSettings(ctx context.Context, req *GetSettingsRequest, opts ...http.CallOption) (rsp *Settings, err error)
	GetSink(ctx context.Context, req *GetSinkRequest, opts ...http.CallOption) (rsp *LogSink, err error)
	GetView(ctx context.Context, req *GetViewRequest, opts ...http.CallOption) (rsp *LogView, err error)
	ListBuckets(ctx context.Context, req *ListBucketsRequest, opts ...http.CallOption) (rsp *ListBucketsResponse, err error)
	ListExclusions(ctx context.Context, req *ListExclusionsRequest, opts ...http.CallOption) (rsp *ListExclusionsResponse, err error)
	ListLinks(ctx context.Context, req *ListLinksRequest, opts ...http.CallOption) (rsp *ListLinksResponse, err error)
	ListSinks(ctx context.Context, req *ListSinksRequest, opts ...http.CallOption) (rsp *ListSinksResponse, err error)
	ListViews(ctx context.Context, req *ListViewsRequest, opts ...http.CallOption) (rsp *ListViewsResponse, err error)
	UndeleteBucket(ctx context.Context, req *UndeleteBucketRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateBucket(ctx context.Context, req *UpdateBucketRequest, opts ...http.CallOption) (rsp *LogBucket, err error)
	UpdateBucketAsync(ctx context.Context, req *UpdateBucketRequest, opts ...http.CallOption) (rsp *longrunningpb.Operation, err error)
	UpdateCmekSettings(ctx context.Context, req *UpdateCmekSettingsRequest, opts ...http.CallOption) (rsp *CmekSettings, err error)
	UpdateExclusion(ctx context.Context, req *UpdateExclusionRequest, opts ...http.CallOption) (rsp *LogExclusion, err error)
	UpdateSettings(ctx context.Context, req *UpdateSettingsRequest, opts ...http.CallOption) (rsp *Settings, err error)
	UpdateSink(ctx context.Context, req *UpdateSinkRequest, opts ...http.CallOption) (rsp *LogSink, err error)
	UpdateView(ctx context.Context, req *UpdateViewRequest, opts ...http.CallOption) (rsp *LogView, err error)
}

type ConfigServiceV2HTTPClientImpl struct {
	cc *http.Client
}

func NewConfigServiceV2HTTPClient(client *http.Client) ConfigServiceV2HTTPClient {
	return &ConfigServiceV2HTTPClientImpl{client}
}

func (c *ConfigServiceV2HTTPClientImpl) CopyLogEntries(ctx context.Context, in *CopyLogEntriesRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v2/entries:copy"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2CopyLogEntries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...http.CallOption) (*LogBucket, error) {
	var out LogBucket
	pattern := "/v2/{parent:.*/.*/locations/.*}/buckets"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2CreateBucket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Bucket, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) CreateBucketAsync(ctx context.Context, in *CreateBucketRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v2/{parent:.*/.*/locations/.*}/buckets:createAsync"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2CreateBucketAsync))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Bucket, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) CreateExclusion(ctx context.Context, in *CreateExclusionRequest, opts ...http.CallOption) (*LogExclusion, error) {
	var out LogExclusion
	pattern := "/v2/{parent:.*/.*}/exclusions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2CreateExclusion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Exclusion, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v2/{parent:.*/.*/locations/.*/buckets/.*}/links"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2CreateLink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Link, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) CreateSink(ctx context.Context, in *CreateSinkRequest, opts ...http.CallOption) (*LogSink, error) {
	var out LogSink
	pattern := "/v2/{parent:.*/.*}/sinks"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2CreateSink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Sink, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) CreateView(ctx context.Context, in *CreateViewRequest, opts ...http.CallOption) (*LogView, error) {
	var out LogView
	pattern := "/v2/{parent:.*/.*/locations/.*/buckets/.*}/views"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2CreateView))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.View, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v2/{name:.*/.*/locations/.*/buckets/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2DeleteBucket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) DeleteExclusion(ctx context.Context, in *DeleteExclusionRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v2/{name:.*/.*/exclusions/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2DeleteExclusion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) DeleteLink(ctx context.Context, in *DeleteLinkRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v2/{name:.*/.*/locations/.*/buckets/.*/links/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2DeleteLink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) DeleteSink(ctx context.Context, in *DeleteSinkRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v2/{sink_name:.*/.*/sinks/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2DeleteSink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) DeleteView(ctx context.Context, in *DeleteViewRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v2/{name:.*/.*/locations/.*/buckets/.*/views/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2DeleteView))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) GetBucket(ctx context.Context, in *GetBucketRequest, opts ...http.CallOption) (*LogBucket, error) {
	var out LogBucket
	pattern := "/v2/{name:.*/.*/locations/.*/buckets/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2GetBucket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) GetCmekSettings(ctx context.Context, in *GetCmekSettingsRequest, opts ...http.CallOption) (*CmekSettings, error) {
	var out CmekSettings
	pattern := "/v2/{name:.*/.*}/cmekSettings"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2GetCmekSettings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) GetExclusion(ctx context.Context, in *GetExclusionRequest, opts ...http.CallOption) (*LogExclusion, error) {
	var out LogExclusion
	pattern := "/v2/{name:.*/.*/exclusions/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2GetExclusion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) GetLink(ctx context.Context, in *GetLinkRequest, opts ...http.CallOption) (*Link, error) {
	var out Link
	pattern := "/v2/{name:.*/.*/locations/.*/buckets/.*/links/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2GetLink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...http.CallOption) (*Settings, error) {
	var out Settings
	pattern := "/v2/{name:.*/.*}/settings"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2GetSettings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) GetSink(ctx context.Context, in *GetSinkRequest, opts ...http.CallOption) (*LogSink, error) {
	var out LogSink
	pattern := "/v2/{sink_name:.*/.*/sinks/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2GetSink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) GetView(ctx context.Context, in *GetViewRequest, opts ...http.CallOption) (*LogView, error) {
	var out LogView
	pattern := "/v2/{name:.*/.*/locations/.*/buckets/.*/views/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2GetView))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...http.CallOption) (*ListBucketsResponse, error) {
	var out ListBucketsResponse
	pattern := "/v2/{parent:.*/.*/locations/.*}/buckets"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2ListBuckets))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) ListExclusions(ctx context.Context, in *ListExclusionsRequest, opts ...http.CallOption) (*ListExclusionsResponse, error) {
	var out ListExclusionsResponse
	pattern := "/v2/{parent:.*/.*}/exclusions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2ListExclusions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) ListLinks(ctx context.Context, in *ListLinksRequest, opts ...http.CallOption) (*ListLinksResponse, error) {
	var out ListLinksResponse
	pattern := "/v2/{parent:.*/.*/locations/.*/buckets/.*}/links"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2ListLinks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) ListSinks(ctx context.Context, in *ListSinksRequest, opts ...http.CallOption) (*ListSinksResponse, error) {
	var out ListSinksResponse
	pattern := "/v2/{parent:.*/.*}/sinks"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2ListSinks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) ListViews(ctx context.Context, in *ListViewsRequest, opts ...http.CallOption) (*ListViewsResponse, error) {
	var out ListViewsResponse
	pattern := "/v2/{parent:.*/.*/locations/.*/buckets/.*}/views"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConfigServiceV2ListViews))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) UndeleteBucket(ctx context.Context, in *UndeleteBucketRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v2/{name:.*/.*/locations/.*/buckets/.*}:undelete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2UndeleteBucket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) UpdateBucket(ctx context.Context, in *UpdateBucketRequest, opts ...http.CallOption) (*LogBucket, error) {
	var out LogBucket
	pattern := "/v2/{name:.*/.*/locations/.*/buckets/.*}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2UpdateBucket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in.Bucket, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) UpdateBucketAsync(ctx context.Context, in *UpdateBucketRequest, opts ...http.CallOption) (*longrunningpb.Operation, error) {
	var out longrunningpb.Operation
	pattern := "/v2/{name:.*/.*/locations/.*/buckets/.*}:updateAsync"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2UpdateBucketAsync))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.Bucket, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) UpdateCmekSettings(ctx context.Context, in *UpdateCmekSettingsRequest, opts ...http.CallOption) (*CmekSettings, error) {
	var out CmekSettings
	pattern := "/v2/{name:.*/.*}/cmekSettings"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2UpdateCmekSettings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in.CmekSettings, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) UpdateExclusion(ctx context.Context, in *UpdateExclusionRequest, opts ...http.CallOption) (*LogExclusion, error) {
	var out LogExclusion
	pattern := "/v2/{name:.*/.*/exclusions/.*}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2UpdateExclusion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in.Exclusion, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) UpdateSettings(ctx context.Context, in *UpdateSettingsRequest, opts ...http.CallOption) (*Settings, error) {
	var out Settings
	pattern := "/v2/{name:.*/.*}/settings"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2UpdateSettings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in.Settings, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) UpdateSink(ctx context.Context, in *UpdateSinkRequest, opts ...http.CallOption) (*LogSink, error) {
	var out LogSink
	pattern := "/v2/{sink_name:.*/.*/sinks/.*}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2UpdateSink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Sink, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConfigServiceV2HTTPClientImpl) UpdateView(ctx context.Context, in *UpdateViewRequest, opts ...http.CallOption) (*LogView, error) {
	var out LogView
	pattern := "/v2/{name:.*/.*/locations/.*/buckets/.*/views/.*}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConfigServiceV2UpdateView))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in.View, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
