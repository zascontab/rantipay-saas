// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: google/logging/v2/logging.proto

package loggingpb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLoggingServiceV2DeleteLog = "/google.logging.v2.LoggingServiceV2/DeleteLog"
const OperationLoggingServiceV2ListLogEntries = "/google.logging.v2.LoggingServiceV2/ListLogEntries"
const OperationLoggingServiceV2ListLogs = "/google.logging.v2.LoggingServiceV2/ListLogs"
const OperationLoggingServiceV2ListMonitoredResourceDescriptors = "/google.logging.v2.LoggingServiceV2/ListMonitoredResourceDescriptors"
const OperationLoggingServiceV2WriteLogEntries = "/google.logging.v2.LoggingServiceV2/WriteLogEntries"

type LoggingServiceV2HTTPServer interface {
	// DeleteLog Deletes all the log entries in a log for the _Default Log Bucket. The log
	// reappears if it receives new entries. Log entries written shortly before
	// the delete operation might not be deleted. Entries received after the
	// delete operation with a timestamp before the operation will be deleted.
	DeleteLog(context.Context, *DeleteLogRequest) (*emptypb.Empty, error)
	// ListLogEntries Lists log entries.  Use this method to retrieve log entries that originated
	// from a project/folder/organization/billing account.  For ways to export log
	// entries, see [Exporting
	// Logs](https://cloud.google.com/logging/docs/export).
	ListLogEntries(context.Context, *ListLogEntriesRequest) (*ListLogEntriesResponse, error)
	// ListLogs Lists the logs in projects, organizations, folders, or billing accounts.
	// Only logs that have entries are listed.
	ListLogs(context.Context, *ListLogsRequest) (*ListLogsResponse, error)
	// ListMonitoredResourceDescriptors Lists the descriptors for monitored resource types used by Logging.
	ListMonitoredResourceDescriptors(context.Context, *ListMonitoredResourceDescriptorsRequest) (*ListMonitoredResourceDescriptorsResponse, error)
	// WriteLogEntries Writes log entries to Logging. This API method is the
	// only way to send log entries to Logging. This method
	// is used, directly or indirectly, by the Logging agent
	// (fluentd) and all logging libraries configured to use Logging.
	// A single request may contain log entries for a maximum of 1000
	// different resources (projects, organizations, billing accounts or
	// folders)
	WriteLogEntries(context.Context, *WriteLogEntriesRequest) (*WriteLogEntriesResponse, error)
}

func RegisterLoggingServiceV2HTTPServer(s *http.Server, srv LoggingServiceV2HTTPServer) {
	r := s.Route("/")
	r.DELETE("/v2/{log_name:.*/.*/logs/.*}", _LoggingServiceV2_DeleteLog0_HTTP_Handler(srv))
	r.DELETE("/v2/{log_name:organizations/.*/logs/.*}", _LoggingServiceV2_DeleteLog1_HTTP_Handler(srv))
	r.DELETE("/v2/{log_name:folders/.*/logs/.*}", _LoggingServiceV2_DeleteLog2_HTTP_Handler(srv))
	r.DELETE("/v2/{log_name:billingAccounts/.*/logs/.*}", _LoggingServiceV2_DeleteLog3_HTTP_Handler(srv))
	r.DELETE("/v2/{log_name:projects/.*/logs/.*}", _LoggingServiceV2_DeleteLog4_HTTP_Handler(srv))
	r.POST("/v2/entries:write", _LoggingServiceV2_WriteLogEntries0_HTTP_Handler(srv))
	r.POST("/v2/entries:list", _LoggingServiceV2_ListLogEntries0_HTTP_Handler(srv))
	r.GET("/v2/monitoredResourceDescriptors", _LoggingServiceV2_ListMonitoredResourceDescriptors0_HTTP_Handler(srv))
	r.GET("/v2/{parent:projects/.*}/logs", _LoggingServiceV2_ListLogs0_HTTP_Handler(srv))
	r.GET("/v2/{parent:organizations/.*}/logs", _LoggingServiceV2_ListLogs1_HTTP_Handler(srv))
	r.GET("/v2/{parent:folders/.*}/logs", _LoggingServiceV2_ListLogs2_HTTP_Handler(srv))
	r.GET("/v2/{parent:billingAccounts/.*}/logs", _LoggingServiceV2_ListLogs3_HTTP_Handler(srv))
	r.GET("/v2/{parent:projects/.*/locations/.*/buckets/.*/views/.*}/logs", _LoggingServiceV2_ListLogs4_HTTP_Handler(srv))
	r.GET("/v2/{parent:organizations/.*/locations/.*/buckets/.*/views/.*}/logs", _LoggingServiceV2_ListLogs5_HTTP_Handler(srv))
	r.GET("/v2/{parent:folders/.*/locations/.*/buckets/.*/views/.*}/logs", _LoggingServiceV2_ListLogs6_HTTP_Handler(srv))
	r.GET("/v2/{parent:billingAccounts/.*/locations/.*/buckets/.*/views/.*}/logs", _LoggingServiceV2_ListLogs7_HTTP_Handler(srv))
	r.GET("/v2/{parent:.*/.*}/logs", _LoggingServiceV2_ListLogs8_HTTP_Handler(srv))
}

func _LoggingServiceV2_DeleteLog0_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2DeleteLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLog(ctx, req.(*DeleteLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_DeleteLog1_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2DeleteLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLog(ctx, req.(*DeleteLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_DeleteLog2_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2DeleteLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLog(ctx, req.(*DeleteLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_DeleteLog3_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2DeleteLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLog(ctx, req.(*DeleteLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_DeleteLog4_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2DeleteLog)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLog(ctx, req.(*DeleteLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_WriteLogEntries0_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WriteLogEntriesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2WriteLogEntries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WriteLogEntries(ctx, req.(*WriteLogEntriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WriteLogEntriesResponse)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_ListLogEntries0_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogEntriesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2ListLogEntries)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLogEntries(ctx, req.(*ListLogEntriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogEntriesResponse)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_ListMonitoredResourceDescriptors0_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMonitoredResourceDescriptorsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2ListMonitoredResourceDescriptors)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMonitoredResourceDescriptors(ctx, req.(*ListMonitoredResourceDescriptorsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMonitoredResourceDescriptorsResponse)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_ListLogs0_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2ListLogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLogs(ctx, req.(*ListLogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogsResponse)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_ListLogs1_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2ListLogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLogs(ctx, req.(*ListLogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogsResponse)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_ListLogs2_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2ListLogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLogs(ctx, req.(*ListLogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogsResponse)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_ListLogs3_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2ListLogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLogs(ctx, req.(*ListLogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogsResponse)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_ListLogs4_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2ListLogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLogs(ctx, req.(*ListLogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogsResponse)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_ListLogs5_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2ListLogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLogs(ctx, req.(*ListLogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogsResponse)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_ListLogs6_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2ListLogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLogs(ctx, req.(*ListLogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogsResponse)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_ListLogs7_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2ListLogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLogs(ctx, req.(*ListLogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogsResponse)
		return ctx.Result(200, reply)
	}
}

func _LoggingServiceV2_ListLogs8_HTTP_Handler(srv LoggingServiceV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLogsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLoggingServiceV2ListLogs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLogs(ctx, req.(*ListLogsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListLogsResponse)
		return ctx.Result(200, reply)
	}
}

type LoggingServiceV2HTTPClient interface {
	DeleteLog(ctx context.Context, req *DeleteLogRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ListLogEntries(ctx context.Context, req *ListLogEntriesRequest, opts ...http.CallOption) (rsp *ListLogEntriesResponse, err error)
	ListLogs(ctx context.Context, req *ListLogsRequest, opts ...http.CallOption) (rsp *ListLogsResponse, err error)
	ListMonitoredResourceDescriptors(ctx context.Context, req *ListMonitoredResourceDescriptorsRequest, opts ...http.CallOption) (rsp *ListMonitoredResourceDescriptorsResponse, err error)
	WriteLogEntries(ctx context.Context, req *WriteLogEntriesRequest, opts ...http.CallOption) (rsp *WriteLogEntriesResponse, err error)
}

type LoggingServiceV2HTTPClientImpl struct {
	cc *http.Client
}

func NewLoggingServiceV2HTTPClient(client *http.Client) LoggingServiceV2HTTPClient {
	return &LoggingServiceV2HTTPClientImpl{client}
}

func (c *LoggingServiceV2HTTPClientImpl) DeleteLog(ctx context.Context, in *DeleteLogRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v2/{log_name:projects/.*/logs/.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLoggingServiceV2DeleteLog))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoggingServiceV2HTTPClientImpl) ListLogEntries(ctx context.Context, in *ListLogEntriesRequest, opts ...http.CallOption) (*ListLogEntriesResponse, error) {
	var out ListLogEntriesResponse
	pattern := "/v2/entries:list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLoggingServiceV2ListLogEntries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoggingServiceV2HTTPClientImpl) ListLogs(ctx context.Context, in *ListLogsRequest, opts ...http.CallOption) (*ListLogsResponse, error) {
	var out ListLogsResponse
	pattern := "/v2/{parent:.*/.*}/logs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLoggingServiceV2ListLogs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoggingServiceV2HTTPClientImpl) ListMonitoredResourceDescriptors(ctx context.Context, in *ListMonitoredResourceDescriptorsRequest, opts ...http.CallOption) (*ListMonitoredResourceDescriptorsResponse, error) {
	var out ListMonitoredResourceDescriptorsResponse
	pattern := "/v2/monitoredResourceDescriptors"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLoggingServiceV2ListMonitoredResourceDescriptors))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *LoggingServiceV2HTTPClientImpl) WriteLogEntries(ctx context.Context, in *WriteLogEntriesRequest, opts ...http.CallOption) (*WriteLogEntriesResponse, error) {
	var out WriteLogEntriesResponse
	pattern := "/v2/entries:write"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLoggingServiceV2WriteLogEntries))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
