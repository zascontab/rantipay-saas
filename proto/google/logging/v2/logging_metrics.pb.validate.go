// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/logging/v2/logging_metrics.proto

package loggingpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LogMetric with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogMetric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogMetric with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogMetricMultiError, or nil
// if none found.
func (m *LogMetric) ValidateAll() error {
	return m.validate(true)
}

func (m *LogMetric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Filter

	// no validation rules for BucketName

	// no validation rules for Disabled

	if all {
		switch v := interface{}(m.GetMetricDescriptor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogMetricValidationError{
					field:  "MetricDescriptor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogMetricValidationError{
					field:  "MetricDescriptor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetricDescriptor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogMetricValidationError{
				field:  "MetricDescriptor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ValueExtractor

	// no validation rules for LabelExtractors

	if all {
		switch v := interface{}(m.GetBucketOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogMetricValidationError{
					field:  "BucketOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogMetricValidationError{
					field:  "BucketOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBucketOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogMetricValidationError{
				field:  "BucketOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogMetricValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogMetricValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogMetricValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogMetricValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogMetricValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogMetricValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return LogMetricMultiError(errors)
	}

	return nil
}

// LogMetricMultiError is an error wrapping multiple validation errors returned
// by LogMetric.ValidateAll() if the designated constraints aren't met.
type LogMetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogMetricMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogMetricMultiError) AllErrors() []error { return m }

// LogMetricValidationError is the validation error returned by
// LogMetric.Validate if the designated constraints aren't met.
type LogMetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogMetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogMetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogMetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogMetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogMetricValidationError) ErrorName() string { return "LogMetricValidationError" }

// Error satisfies the builtin error interface
func (e LogMetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogMetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogMetricValidationError{}

// Validate checks the field values on ListLogMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLogMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLogMetricsRequestMultiError, or nil if none found.
func (m *ListLogMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageToken

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListLogMetricsRequestMultiError(errors)
	}

	return nil
}

// ListLogMetricsRequestMultiError is an error wrapping multiple validation
// errors returned by ListLogMetricsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLogMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogMetricsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogMetricsRequestMultiError) AllErrors() []error { return m }

// ListLogMetricsRequestValidationError is the validation error returned by
// ListLogMetricsRequest.Validate if the designated constraints aren't met.
type ListLogMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogMetricsRequestValidationError) ErrorName() string {
	return "ListLogMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLogMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogMetricsRequestValidationError{}

// Validate checks the field values on ListLogMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLogMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLogMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLogMetricsResponseMultiError, or nil if none found.
func (m *ListLogMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLogMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLogMetricsResponseValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLogMetricsResponseValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLogMetricsResponseValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListLogMetricsResponseMultiError(errors)
	}

	return nil
}

// ListLogMetricsResponseMultiError is an error wrapping multiple validation
// errors returned by ListLogMetricsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLogMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLogMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLogMetricsResponseMultiError) AllErrors() []error { return m }

// ListLogMetricsResponseValidationError is the validation error returned by
// ListLogMetricsResponse.Validate if the designated constraints aren't met.
type ListLogMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLogMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLogMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLogMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLogMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLogMetricsResponseValidationError) ErrorName() string {
	return "ListLogMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLogMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLogMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLogMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLogMetricsResponseValidationError{}

// Validate checks the field values on GetLogMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLogMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLogMetricRequestMultiError, or nil if none found.
func (m *GetLogMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MetricName

	if len(errors) > 0 {
		return GetLogMetricRequestMultiError(errors)
	}

	return nil
}

// GetLogMetricRequestMultiError is an error wrapping multiple validation
// errors returned by GetLogMetricRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLogMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogMetricRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogMetricRequestMultiError) AllErrors() []error { return m }

// GetLogMetricRequestValidationError is the validation error returned by
// GetLogMetricRequest.Validate if the designated constraints aren't met.
type GetLogMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogMetricRequestValidationError) ErrorName() string {
	return "GetLogMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLogMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogMetricRequestValidationError{}

// Validate checks the field values on CreateLogMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLogMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLogMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLogMetricRequestMultiError, or nil if none found.
func (m *CreateLogMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLogMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetMetric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLogMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLogMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLogMetricRequestValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLogMetricRequestMultiError(errors)
	}

	return nil
}

// CreateLogMetricRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLogMetricRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateLogMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLogMetricRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLogMetricRequestMultiError) AllErrors() []error { return m }

// CreateLogMetricRequestValidationError is the validation error returned by
// CreateLogMetricRequest.Validate if the designated constraints aren't met.
type CreateLogMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLogMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLogMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLogMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLogMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLogMetricRequestValidationError) ErrorName() string {
	return "CreateLogMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLogMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLogMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLogMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLogMetricRequestValidationError{}

// Validate checks the field values on UpdateLogMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLogMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLogMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLogMetricRequestMultiError, or nil if none found.
func (m *UpdateLogMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLogMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MetricName

	if all {
		switch v := interface{}(m.GetMetric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLogMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLogMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLogMetricRequestValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateLogMetricRequestMultiError(errors)
	}

	return nil
}

// UpdateLogMetricRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateLogMetricRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLogMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLogMetricRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLogMetricRequestMultiError) AllErrors() []error { return m }

// UpdateLogMetricRequestValidationError is the validation error returned by
// UpdateLogMetricRequest.Validate if the designated constraints aren't met.
type UpdateLogMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLogMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLogMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLogMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLogMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLogMetricRequestValidationError) ErrorName() string {
	return "UpdateLogMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLogMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLogMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLogMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLogMetricRequestValidationError{}

// Validate checks the field values on DeleteLogMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLogMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLogMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLogMetricRequestMultiError, or nil if none found.
func (m *DeleteLogMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLogMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MetricName

	if len(errors) > 0 {
		return DeleteLogMetricRequestMultiError(errors)
	}

	return nil
}

// DeleteLogMetricRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteLogMetricRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteLogMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLogMetricRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLogMetricRequestMultiError) AllErrors() []error { return m }

// DeleteLogMetricRequestValidationError is the validation error returned by
// DeleteLogMetricRequest.Validate if the designated constraints aren't met.
type DeleteLogMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLogMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLogMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLogMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLogMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLogMetricRequestValidationError) ErrorName() string {
	return "DeleteLogMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLogMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLogMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLogMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLogMetricRequestValidationError{}
