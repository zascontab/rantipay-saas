// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             (unknown)
// source: google/longrunning/operations.proto

package longrunningpb

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOperationsCancelOperation = "/google.longrunning.Operations/CancelOperation"
const OperationOperationsDeleteOperation = "/google.longrunning.Operations/DeleteOperation"
const OperationOperationsGetOperation = "/google.longrunning.Operations/GetOperation"
const OperationOperationsListOperations = "/google.longrunning.Operations/ListOperations"

type OperationsHTTPServer interface {
	// CancelOperation Starts asynchronous cancellation on a long-running operation.  The server
	// makes a best effort to cancel the operation, but success is not
	// guaranteed.  If the server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
	// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
	// other methods to check whether the cancellation succeeded or whether the
	// operation completed despite cancellation. On successful cancellation,
	// the operation is not deleted; instead, it becomes an operation with
	// an [Operation.error][google.longrunning.Operation.error] value with a
	// [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
	// `Code.CANCELLED`.
	CancelOperation(context.Context, *CancelOperationRequest) (*emptypb.Empty, error)
	// DeleteOperation Deletes a long-running operation. This method indicates that the client is
	// no longer interested in the operation result. It does not cancel the
	// operation. If the server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.
	DeleteOperation(context.Context, *DeleteOperationRequest) (*emptypb.Empty, error)
	// GetOperation Gets the latest state of a long-running operation.  Clients can use this
	// method to poll the operation result at intervals as recommended by the API
	// service.
	GetOperation(context.Context, *GetOperationRequest) (*Operation, error)
	// ListOperations Lists operations that match the specified filter in the request. If the
	// server doesn't support this method, it returns `UNIMPLEMENTED`.
	ListOperations(context.Context, *ListOperationsRequest) (*ListOperationsResponse, error)
}

func RegisterOperationsHTTPServer(s *http.Server, srv OperationsHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/{name:operations}", _Operations_ListOperations0_HTTP_Handler(srv))
	r.GET("/v1/{name:operations/.*.*}", _Operations_GetOperation0_HTTP_Handler(srv))
	r.DELETE("/v1/{name:operations/.*.*}", _Operations_DeleteOperation0_HTTP_Handler(srv))
	r.POST("/v1/{name:operations/.*.*}:cancel", _Operations_CancelOperation0_HTTP_Handler(srv))
}

func _Operations_ListOperations0_HTTP_Handler(srv OperationsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOperationsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperationsListOperations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOperations(ctx, req.(*ListOperationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOperationsResponse)
		return ctx.Result(200, reply)
	}
}

func _Operations_GetOperation0_HTTP_Handler(srv OperationsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOperationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperationsGetOperation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOperation(ctx, req.(*GetOperationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Operation)
		return ctx.Result(200, reply)
	}
}

func _Operations_DeleteOperation0_HTTP_Handler(srv OperationsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOperationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperationsDeleteOperation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOperation(ctx, req.(*DeleteOperationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Operations_CancelOperation0_HTTP_Handler(srv OperationsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelOperationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOperationsCancelOperation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelOperation(ctx, req.(*CancelOperationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type OperationsHTTPClient interface {
	CancelOperation(ctx context.Context, req *CancelOperationRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteOperation(ctx context.Context, req *DeleteOperationRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetOperation(ctx context.Context, req *GetOperationRequest, opts ...http.CallOption) (rsp *Operation, err error)
	ListOperations(ctx context.Context, req *ListOperationsRequest, opts ...http.CallOption) (rsp *ListOperationsResponse, err error)
}

type OperationsHTTPClientImpl struct {
	cc *http.Client
}

func NewOperationsHTTPClient(client *http.Client) OperationsHTTPClient {
	return &OperationsHTTPClientImpl{client}
}

func (c *OperationsHTTPClientImpl) CancelOperation(ctx context.Context, in *CancelOperationRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/{name:operations/.*.*}:cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOperationsCancelOperation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OperationsHTTPClientImpl) DeleteOperation(ctx context.Context, in *DeleteOperationRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/{name:operations/.*.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOperationsDeleteOperation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OperationsHTTPClientImpl) GetOperation(ctx context.Context, in *GetOperationRequest, opts ...http.CallOption) (*Operation, error) {
	var out Operation
	pattern := "/v1/{name:operations/.*.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOperationsGetOperation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OperationsHTTPClientImpl) ListOperations(ctx context.Context, in *ListOperationsRequest, opts ...http.CallOption) (*ListOperationsResponse, error) {
	var out ListOperationsResponse
	pattern := "/v1/{name:operations}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOperationsListOperations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
