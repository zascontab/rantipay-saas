// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/api/auth/v1/idp.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WechatMiniProgramCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WechatMiniProgramCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WechatMiniProgramCodeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WechatMiniProgramCodeReqMultiError, or nil if none found.
func (m *WechatMiniProgramCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *WechatMiniProgramCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppId()) < 1 {
		err := WechatMiniProgramCodeReqValidationError{
			field:  "AppId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := WechatMiniProgramCodeReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WechatMiniProgramCodeReqMultiError(errors)
	}

	return nil
}

// WechatMiniProgramCodeReqMultiError is an error wrapping multiple validation
// errors returned by WechatMiniProgramCodeReq.ValidateAll() if the designated
// constraints aren't met.
type WechatMiniProgramCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WechatMiniProgramCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WechatMiniProgramCodeReqMultiError) AllErrors() []error { return m }

// WechatMiniProgramCodeReqValidationError is the validation error returned by
// WechatMiniProgramCodeReq.Validate if the designated constraints aren't met.
type WechatMiniProgramCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WechatMiniProgramCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WechatMiniProgramCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WechatMiniProgramCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WechatMiniProgramCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WechatMiniProgramCodeReqValidationError) ErrorName() string {
	return "WechatMiniProgramCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e WechatMiniProgramCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWechatMiniProgramCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WechatMiniProgramCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WechatMiniProgramCodeReqValidationError{}

// Validate checks the field values on WechatMiniProgramPhoneCodeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WechatMiniProgramPhoneCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WechatMiniProgramPhoneCodeReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WechatMiniProgramPhoneCodeReqMultiError, or nil if none found.
func (m *WechatMiniProgramPhoneCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *WechatMiniProgramPhoneCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppId()) < 1 {
		err := WechatMiniProgramPhoneCodeReqValidationError{
			field:  "AppId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := WechatMiniProgramPhoneCodeReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNextToken()) < 1 {
		err := WechatMiniProgramPhoneCodeReqValidationError{
			field:  "NextToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WechatMiniProgramPhoneCodeReqMultiError(errors)
	}

	return nil
}

// WechatMiniProgramPhoneCodeReqMultiError is an error wrapping multiple
// validation errors returned by WechatMiniProgramPhoneCodeReq.ValidateAll()
// if the designated constraints aren't met.
type WechatMiniProgramPhoneCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WechatMiniProgramPhoneCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WechatMiniProgramPhoneCodeReqMultiError) AllErrors() []error { return m }

// WechatMiniProgramPhoneCodeReqValidationError is the validation error
// returned by WechatMiniProgramPhoneCodeReq.Validate if the designated
// constraints aren't met.
type WechatMiniProgramPhoneCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WechatMiniProgramPhoneCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WechatMiniProgramPhoneCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WechatMiniProgramPhoneCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WechatMiniProgramPhoneCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WechatMiniProgramPhoneCodeReqValidationError) ErrorName() string {
	return "WechatMiniProgramPhoneCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e WechatMiniProgramPhoneCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWechatMiniProgramPhoneCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WechatMiniProgramPhoneCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WechatMiniProgramPhoneCodeReqValidationError{}

// Validate checks the field values on WeChatLoginReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WeChatLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WeChatLoginReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WeChatLoginReplyMultiError, or nil if none found.
func (m *WeChatLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *WeChatLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Next

	// no validation rules for NextToken

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WeChatLoginReplyValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WeChatLoginReplyValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WeChatLoginReplyValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WeChatLoginReplyMultiError(errors)
	}

	return nil
}

// WeChatLoginReplyMultiError is an error wrapping multiple validation errors
// returned by WeChatLoginReply.ValidateAll() if the designated constraints
// aren't met.
type WeChatLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WeChatLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WeChatLoginReplyMultiError) AllErrors() []error { return m }

// WeChatLoginReplyValidationError is the validation error returned by
// WeChatLoginReply.Validate if the designated constraints aren't met.
type WeChatLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WeChatLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WeChatLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WeChatLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WeChatLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WeChatLoginReplyValidationError) ErrorName() string { return "WeChatLoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e WeChatLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWeChatLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WeChatLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WeChatLoginReplyValidationError{}
