// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: conf/conf.proto

package conf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServerMultiError, or nil if none found.
func (m *Server) ValidateAll() error {
	return m.validate(true)
}

func (m *Server) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHttp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerValidationError{
				field:  "Http",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrpc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Grpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Grpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrpc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerValidationError{
				field:  "Grpc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerMultiError(errors)
	}

	return nil
}

// ServerMultiError is an error wrapping multiple validation errors returned by
// Server.ValidateAll() if the designated constraints aren't met.
type ServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMultiError) AllErrors() []error { return m }

// ServerValidationError is the validation error returned by Server.Validate if
// the designated constraints aren't met.
type ServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerValidationError) ErrorName() string { return "ServerValidationError" }

// Error satisfies the builtin error interface
func (e ServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerValidationError{}

// Validate checks the field values on Client with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Client) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Client with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ClientMultiError, or nil if none found.
func (m *Client) ValidateAll() error {
	return m.validate(true)
}

func (m *Client) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClientMultiError(errors)
	}

	return nil
}

// ClientMultiError is an error wrapping multiple validation errors returned by
// Client.ValidateAll() if the designated constraints aren't met.
type ClientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientMultiError) AllErrors() []error { return m }

// ClientValidationError is the validation error returned by Client.Validate if
// the designated constraints aren't met.
type ClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientValidationError) ErrorName() string { return "ClientValidationError" }

// Error satisfies the builtin error interface
func (e ClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Redirect

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on Services with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Services) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Services with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServicesMultiError, or nil
// if none found.
func (m *Services) ValidateAll() error {
	return m.validate(true)
}

func (m *Services) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetServices()))
		i := 0
		for key := range m.GetServices() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetServices()[key]
			_ = val

			// no validation rules for Services[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ServicesValidationError{
							field:  fmt.Sprintf("Services[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ServicesValidationError{
							field:  fmt.Sprintf("Services[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ServicesValidationError{
						field:  fmt.Sprintf("Services[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetServers()))
		i := 0
		for key := range m.GetServers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetServers()[key]
			_ = val

			// no validation rules for Servers[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ServicesValidationError{
							field:  fmt.Sprintf("Servers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ServicesValidationError{
							field:  fmt.Sprintf("Servers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ServicesValidationError{
						field:  fmt.Sprintf("Servers[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetClients()))
		i := 0
		for key := range m.GetClients() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetClients()[key]
			_ = val

			// no validation rules for Clients[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ServicesValidationError{
							field:  fmt.Sprintf("Clients[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ServicesValidationError{
							field:  fmt.Sprintf("Clients[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ServicesValidationError{
						field:  fmt.Sprintf("Clients[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetRegistry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServicesValidationError{
					field:  "Registry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegistry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServicesValidationError{
				field:  "Registry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServicesMultiError(errors)
	}

	return nil
}

// ServicesMultiError is an error wrapping multiple validation errors returned
// by Services.ValidateAll() if the designated constraints aren't met.
type ServicesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServicesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServicesMultiError) AllErrors() []error { return m }

// ServicesValidationError is the validation error returned by
// Services.Validate if the designated constraints aren't met.
type ServicesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicesValidationError) ErrorName() string { return "ServicesValidationError" }

// Error satisfies the builtin error interface
func (e ServicesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServices.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicesValidationError{}

// Validate checks the field values on Database with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Database) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Database with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DatabaseMultiError, or nil
// if none found.
func (m *Database) ValidateAll() error {
	return m.validate(true)
}

func (m *Database) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Driver

	// no validation rules for Source

	// no validation rules for Debug

	if len(errors) > 0 {
		return DatabaseMultiError(errors)
	}

	return nil
}

// DatabaseMultiError is an error wrapping multiple validation errors returned
// by Database.ValidateAll() if the designated constraints aren't met.
type DatabaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DatabaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DatabaseMultiError) AllErrors() []error { return m }

// DatabaseValidationError is the validation error returned by
// Database.Validate if the designated constraints aren't met.
type DatabaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatabaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatabaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatabaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatabaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatabaseValidationError) ErrorName() string { return "DatabaseValidationError" }

// Error satisfies the builtin error interface
func (e DatabaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatabase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatabaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatabaseValidationError{}

// Validate checks the field values on Endpoints with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Endpoints) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Endpoints with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndpointsMultiError, or nil
// if none found.
func (m *Endpoints) ValidateAll() error {
	return m.validate(true)
}

func (m *Endpoints) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetDatabases()))
		i := 0
		for key := range m.GetDatabases() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDatabases()[key]
			_ = val

			// no validation rules for Databases[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, EndpointsValidationError{
							field:  fmt.Sprintf("Databases[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, EndpointsValidationError{
							field:  fmt.Sprintf("Databases[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return EndpointsValidationError{
						field:  fmt.Sprintf("Databases[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetEvents()))
		i := 0
		for key := range m.GetEvents() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEvents()[key]
			_ = val

			// no validation rules for Events[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, EndpointsValidationError{
							field:  fmt.Sprintf("Events[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, EndpointsValidationError{
							field:  fmt.Sprintf("Events[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return EndpointsValidationError{
						field:  fmt.Sprintf("Events[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetRedis()))
		i := 0
		for key := range m.GetRedis() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetRedis()[key]
			_ = val

			// no validation rules for Redis[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, EndpointsValidationError{
							field:  fmt.Sprintf("Redis[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, EndpointsValidationError{
							field:  fmt.Sprintf("Redis[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return EndpointsValidationError{
						field:  fmt.Sprintf("Redis[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetEmail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EndpointsValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EndpointsValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndpointsValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSms()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EndpointsValidationError{
					field:  "Sms",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EndpointsValidationError{
					field:  "Sms",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSms()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EndpointsValidationError{
				field:  "Sms",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EndpointsMultiError(errors)
	}

	return nil
}

// EndpointsMultiError is an error wrapping multiple validation errors returned
// by Endpoints.ValidateAll() if the designated constraints aren't met.
type EndpointsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndpointsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndpointsMultiError) AllErrors() []error { return m }

// EndpointsValidationError is the validation error returned by
// Endpoints.Validate if the designated constraints aren't met.
type EndpointsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointsValidationError) ErrorName() string { return "EndpointsValidationError" }

// Error satisfies the builtin error interface
func (e EndpointsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpoints.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointsValidationError{}

// Validate checks the field values on Security with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Security) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Security with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SecurityMultiError, or nil
// if none found.
func (m *Security) ValidateAll() error {
	return m.validate(true)
}

func (m *Security) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJwt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJwt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecurityValidationError{
				field:  "Jwt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSecurityCookie()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "SecurityCookie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "SecurityCookie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecurityCookie()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecurityValidationError{
				field:  "SecurityCookie",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSessionCookie()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "SessionCookie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "SessionCookie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSessionCookie()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecurityValidationError{
				field:  "SessionCookie",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRememberCookie()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "RememberCookie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "RememberCookie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRememberCookie()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecurityValidationError{
				field:  "RememberCookie",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOidc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "Oidc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecurityValidationError{
					field:  "Oidc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOidc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecurityValidationError{
				field:  "Oidc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SecurityMultiError(errors)
	}

	return nil
}

// SecurityMultiError is an error wrapping multiple validation errors returned
// by Security.ValidateAll() if the designated constraints aren't met.
type SecurityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecurityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecurityMultiError) AllErrors() []error { return m }

// SecurityValidationError is the validation error returned by
// Security.Validate if the designated constraints aren't met.
type SecurityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecurityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecurityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecurityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecurityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecurityValidationError) ErrorName() string { return "SecurityValidationError" }

// Error satisfies the builtin error interface
func (e SecurityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecurityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecurityValidationError{}

// Validate checks the field values on Cookie with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Cookie) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cookie with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CookieMultiError, or nil if none found.
func (m *Cookie) ValidateAll() error {
	return m.validate(true)
}

func (m *Cookie) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SameSite

	if m.Name != nil {

		if all {
			switch v := interface{}(m.GetName()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CookieValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CookieValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CookieValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MaxAge != nil {

		if all {
			switch v := interface{}(m.GetMaxAge()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CookieValidationError{
						field:  "MaxAge",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CookieValidationError{
						field:  "MaxAge",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMaxAge()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CookieValidationError{
					field:  "MaxAge",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Domain != nil {

		if all {
			switch v := interface{}(m.GetDomain()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CookieValidationError{
						field:  "Domain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CookieValidationError{
						field:  "Domain",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDomain()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CookieValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Path != nil {

		if all {
			switch v := interface{}(m.GetPath()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CookieValidationError{
						field:  "Path",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CookieValidationError{
						field:  "Path",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPath()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CookieValidationError{
					field:  "Path",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.HttpOnly != nil {

		if all {
			switch v := interface{}(m.GetHttpOnly()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CookieValidationError{
						field:  "HttpOnly",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CookieValidationError{
						field:  "HttpOnly",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHttpOnly()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CookieValidationError{
					field:  "HttpOnly",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Secure != nil {

		if all {
			switch v := interface{}(m.GetSecure()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CookieValidationError{
						field:  "Secure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CookieValidationError{
						field:  "Secure",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSecure()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CookieValidationError{
					field:  "Secure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CookieMultiError(errors)
	}

	return nil
}

// CookieMultiError is an error wrapping multiple validation errors returned by
// Cookie.ValidateAll() if the designated constraints aren't met.
type CookieMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CookieMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CookieMultiError) AllErrors() []error { return m }

// CookieValidationError is the validation error returned by Cookie.Validate if
// the designated constraints aren't met.
type CookieValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CookieValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CookieValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CookieValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CookieValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CookieValidationError) ErrorName() string { return "CookieValidationError" }

// Error satisfies the builtin error interface
func (e CookieValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCookie.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CookieValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CookieValidationError{}

// Validate checks the field values on Oidc with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Oidc) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Oidc with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OidcMultiError, or nil if none found.
func (m *Oidc) ValidateAll() error {
	return m.validate(true)
}

func (m *Oidc) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	if all {
		switch v := interface{}(m.GetHydra()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OidcValidationError{
					field:  "Hydra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OidcValidationError{
					field:  "Hydra",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHydra()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OidcValidationError{
				field:  "Hydra",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OidcMultiError(errors)
	}

	return nil
}

// OidcMultiError is an error wrapping multiple validation errors returned by
// Oidc.ValidateAll() if the designated constraints aren't met.
type OidcMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OidcMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OidcMultiError) AllErrors() []error { return m }

// OidcValidationError is the validation error returned by Oidc.Validate if the
// designated constraints aren't met.
type OidcValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OidcValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OidcValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OidcValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OidcValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OidcValidationError) ErrorName() string { return "OidcValidationError" }

// Error satisfies the builtin error interface
func (e OidcValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOidc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OidcValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OidcValidationError{}

// Validate checks the field values on Hydra with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Hydra) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Hydra with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HydraMultiError, or nil if none found.
func (m *Hydra) ValidateAll() error {
	return m.validate(true)
}

func (m *Hydra) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminUrl

	// no validation rules for PublicUrl

	if len(errors) > 0 {
		return HydraMultiError(errors)
	}

	return nil
}

// HydraMultiError is an error wrapping multiple validation errors returned by
// Hydra.ValidateAll() if the designated constraints aren't met.
type HydraMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HydraMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HydraMultiError) AllErrors() []error { return m }

// HydraValidationError is the validation error returned by Hydra.Validate if
// the designated constraints aren't met.
type HydraValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HydraValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HydraValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HydraValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HydraValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HydraValidationError) ErrorName() string { return "HydraValidationError" }

// Error satisfies the builtin error interface
func (e HydraValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHydra.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HydraValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HydraValidationError{}

// Validate checks the field values on Logging with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Logging) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Logging with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LoggingMultiError, or nil if none found.
func (m *Logging) ValidateAll() error {
	return m.validate(true)
}

func (m *Logging) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetZap()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoggingValidationError{
					field:  "Zap",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoggingValidationError{
					field:  "Zap",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetZap()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoggingValidationError{
				field:  "Zap",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoggingMultiError(errors)
	}

	return nil
}

// LoggingMultiError is an error wrapping multiple validation errors returned
// by Logging.ValidateAll() if the designated constraints aren't met.
type LoggingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoggingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoggingMultiError) AllErrors() []error { return m }

// LoggingValidationError is the validation error returned by Logging.Validate
// if the designated constraints aren't met.
type LoggingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoggingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoggingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoggingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoggingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoggingValidationError) ErrorName() string { return "LoggingValidationError" }

// Error satisfies the builtin error interface
func (e LoggingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogging.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoggingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoggingValidationError{}

// Validate checks the field values on Sms with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Sms) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sms with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SmsMultiError, or nil if none found.
func (m *Sms) ValidateAll() error {
	return m.validate(true)
}

func (m *Sms) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Provider

	if len(errors) > 0 {
		return SmsMultiError(errors)
	}

	return nil
}

// SmsMultiError is an error wrapping multiple validation errors returned by
// Sms.ValidateAll() if the designated constraints aren't met.
type SmsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SmsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SmsMultiError) AllErrors() []error { return m }

// SmsValidationError is the validation error returned by Sms.Validate if the
// designated constraints aren't met.
type SmsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SmsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SmsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SmsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SmsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SmsValidationError) ErrorName() string { return "SmsValidationError" }

// Error satisfies the builtin error interface
func (e SmsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSms.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SmsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SmsValidationError{}

// Validate checks the field values on Tracers with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tracers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tracers with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TracersMultiError, or nil if none found.
func (m *Tracers) ValidateAll() error {
	return m.validate(true)
}

func (m *Tracers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOtel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TracersValidationError{
					field:  "Otel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TracersValidationError{
					field:  "Otel",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOtel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TracersValidationError{
				field:  "Otel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TracersMultiError(errors)
	}

	return nil
}

// TracersMultiError is an error wrapping multiple validation errors returned
// by Tracers.ValidateAll() if the designated constraints aren't met.
type TracersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TracersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TracersMultiError) AllErrors() []error { return m }

// TracersValidationError is the validation error returned by Tracers.Validate
// if the designated constraints aren't met.
type TracersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TracersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TracersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TracersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TracersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TracersValidationError) ErrorName() string { return "TracersValidationError" }

// Error satisfies the builtin error interface
func (e TracersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTracers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TracersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TracersValidationError{}

// Validate checks the field values on AppConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppConfigMultiError, or nil
// if none found.
func (m *AppConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AppConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HostDisplayName

	// no validation rules for HostLogo

	// no validation rules for AppName

	if m.TenantKey != nil {

		if all {
			switch v := interface{}(m.GetTenantKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppConfigValidationError{
						field:  "TenantKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppConfigValidationError{
						field:  "TenantKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTenantKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppConfigValidationError{
					field:  "TenantKey",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DomainFormat != nil {

		if all {
			switch v := interface{}(m.GetDomainFormat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppConfigValidationError{
						field:  "DomainFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppConfigValidationError{
						field:  "DomainFormat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDomainFormat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppConfigValidationError{
					field:  "DomainFormat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.PhoneDefaultRegion != nil {
		// no validation rules for PhoneDefaultRegion
	}

	if len(errors) > 0 {
		return AppConfigMultiError(errors)
	}

	return nil
}

// AppConfigMultiError is an error wrapping multiple validation errors returned
// by AppConfig.ValidateAll() if the designated constraints aren't met.
type AppConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppConfigMultiError) AllErrors() []error { return m }

// AppConfigValidationError is the validation error returned by
// AppConfig.Validate if the designated constraints aren't met.
type AppConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppConfigValidationError) ErrorName() string { return "AppConfigValidationError" }

// Error satisfies the builtin error interface
func (e AppConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppConfigValidationError{}

// Validate checks the field values on Data with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Data with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DataMultiError, or nil if none found.
func (m *Data) ValidateAll() error {
	return m.validate(true)
}

func (m *Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEndpoints()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Endpoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataValidationError{
					field:  "Endpoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpoints()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Endpoints",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVfs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataValidationError{
						field:  fmt.Sprintf("Vfs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataValidationError{
						field:  fmt.Sprintf("Vfs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataValidationError{
					field:  fmt.Sprintf("Vfs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DataMultiError(errors)
	}

	return nil
}

// DataMultiError is an error wrapping multiple validation errors returned by
// Data.ValidateAll() if the designated constraints aren't met.
type DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataMultiError) AllErrors() []error { return m }

// DataValidationError is the validation error returned by Data.Validate if the
// designated constraints aren't met.
type DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataValidationError) ErrorName() string { return "DataValidationError" }

// Error satisfies the builtin error interface
func (e DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataValidationError{}

// Validate checks the field values on Dev with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Dev) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Dev with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DevMultiError, or nil if none found.
func (m *Dev) ValidateAll() error {
	return m.validate(true)
}

func (m *Dev) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Docker

	if len(errors) > 0 {
		return DevMultiError(errors)
	}

	return nil
}

// DevMultiError is an error wrapping multiple validation errors returned by
// Dev.ValidateAll() if the designated constraints aren't met.
type DevMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DevMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DevMultiError) AllErrors() []error { return m }

// DevValidationError is the validation error returned by Dev.Validate if the
// designated constraints aren't met.
type DevValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DevValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DevValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DevValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DevValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DevValidationError) ErrorName() string { return "DevValidationError" }

// Error satisfies the builtin error interface
func (e DevValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDev.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DevValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DevValidationError{}

// Validate checks the field values on Server_HTTP with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server_HTTP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_HTTP with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Server_HTTPMultiError, or
// nil if none found.
func (m *Server_HTTP) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_HTTP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Network

	// no validation rules for Addr

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Server_HTTPValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Server_HTTPValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Server_HTTPValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCors()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Server_HTTPValidationError{
					field:  "Cors",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Server_HTTPValidationError{
					field:  "Cors",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCors()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Server_HTTPValidationError{
				field:  "Cors",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCsrf()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Server_HTTPValidationError{
					field:  "Csrf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Server_HTTPValidationError{
					field:  "Csrf",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCsrf()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Server_HTTPValidationError{
				field:  "Csrf",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Endpoint

	if len(errors) > 0 {
		return Server_HTTPMultiError(errors)
	}

	return nil
}

// Server_HTTPMultiError is an error wrapping multiple validation errors
// returned by Server_HTTP.ValidateAll() if the designated constraints aren't met.
type Server_HTTPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_HTTPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_HTTPMultiError) AllErrors() []error { return m }

// Server_HTTPValidationError is the validation error returned by
// Server_HTTP.Validate if the designated constraints aren't met.
type Server_HTTPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_HTTPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_HTTPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_HTTPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_HTTPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_HTTPValidationError) ErrorName() string { return "Server_HTTPValidationError" }

// Error satisfies the builtin error interface
func (e Server_HTTPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_HTTP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_HTTPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_HTTPValidationError{}

// Validate checks the field values on Server_GRPC with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server_GRPC) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_GRPC with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Server_GRPCMultiError, or
// nil if none found.
func (m *Server_GRPC) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_GRPC) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Network

	// no validation rules for Addr

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Server_GRPCValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Server_GRPCValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Server_GRPCValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Endpoint

	if len(errors) > 0 {
		return Server_GRPCMultiError(errors)
	}

	return nil
}

// Server_GRPCMultiError is an error wrapping multiple validation errors
// returned by Server_GRPC.ValidateAll() if the designated constraints aren't met.
type Server_GRPCMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_GRPCMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_GRPCMultiError) AllErrors() []error { return m }

// Server_GRPCValidationError is the validation error returned by
// Server_GRPC.Validate if the designated constraints aren't met.
type Server_GRPCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_GRPCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_GRPCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_GRPCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_GRPCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_GRPCValidationError) ErrorName() string { return "Server_GRPCValidationError" }

// Error satisfies the builtin error interface
func (e Server_GRPCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_GRPC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_GRPCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_GRPCValidationError{}

// Validate checks the field values on Server_HTTP_Cors with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Server_HTTP_Cors) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_HTTP_Cors with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Server_HTTP_CorsMultiError, or nil if none found.
func (m *Server_HTTP_Cors) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_HTTP_Cors) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Server_HTTP_CorsMultiError(errors)
	}

	return nil
}

// Server_HTTP_CorsMultiError is an error wrapping multiple validation errors
// returned by Server_HTTP_Cors.ValidateAll() if the designated constraints
// aren't met.
type Server_HTTP_CorsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_HTTP_CorsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_HTTP_CorsMultiError) AllErrors() []error { return m }

// Server_HTTP_CorsValidationError is the validation error returned by
// Server_HTTP_Cors.Validate if the designated constraints aren't met.
type Server_HTTP_CorsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_HTTP_CorsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_HTTP_CorsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_HTTP_CorsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_HTTP_CorsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_HTTP_CorsValidationError) ErrorName() string { return "Server_HTTP_CorsValidationError" }

// Error satisfies the builtin error interface
func (e Server_HTTP_CorsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_HTTP_Cors.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_HTTP_CorsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_HTTP_CorsValidationError{}

// Validate checks the field values on Server_HTTP_Csrf with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Server_HTTP_Csrf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_HTTP_Csrf with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Server_HTTP_CsrfMultiError, or nil if none found.
func (m *Server_HTTP_Csrf) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_HTTP_Csrf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCookie()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Server_HTTP_CsrfValidationError{
					field:  "Cookie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Server_HTTP_CsrfValidationError{
					field:  "Cookie",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCookie()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Server_HTTP_CsrfValidationError{
				field:  "Cookie",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.RequestHeader != nil {

		if all {
			switch v := interface{}(m.GetRequestHeader()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Server_HTTP_CsrfValidationError{
						field:  "RequestHeader",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Server_HTTP_CsrfValidationError{
						field:  "RequestHeader",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequestHeader()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Server_HTTP_CsrfValidationError{
					field:  "RequestHeader",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.FieldName != nil {

		if all {
			switch v := interface{}(m.GetFieldName()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Server_HTTP_CsrfValidationError{
						field:  "FieldName",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Server_HTTP_CsrfValidationError{
						field:  "FieldName",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFieldName()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Server_HTTP_CsrfValidationError{
					field:  "FieldName",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Server_HTTP_CsrfMultiError(errors)
	}

	return nil
}

// Server_HTTP_CsrfMultiError is an error wrapping multiple validation errors
// returned by Server_HTTP_Csrf.ValidateAll() if the designated constraints
// aren't met.
type Server_HTTP_CsrfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_HTTP_CsrfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_HTTP_CsrfMultiError) AllErrors() []error { return m }

// Server_HTTP_CsrfValidationError is the validation error returned by
// Server_HTTP_Csrf.Validate if the designated constraints aren't met.
type Server_HTTP_CsrfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_HTTP_CsrfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_HTTP_CsrfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_HTTP_CsrfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_HTTP_CsrfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_HTTP_CsrfValidationError) ErrorName() string { return "Server_HTTP_CsrfValidationError" }

// Error satisfies the builtin error interface
func (e Server_HTTP_CsrfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_HTTP_Csrf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_HTTP_CsrfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_HTTP_CsrfValidationError{}

// Validate checks the field values on Security_Jwt with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Security_Jwt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Security_Jwt with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Security_JwtMultiError, or
// nil if none found.
func (m *Security_Jwt) ValidateAll() error {
	return m.validate(true)
}

func (m *Security_Jwt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpireIn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Security_JwtValidationError{
					field:  "ExpireIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Security_JwtValidationError{
					field:  "ExpireIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpireIn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Security_JwtValidationError{
				field:  "ExpireIn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Secret

	if all {
		switch v := interface{}(m.GetRefreshTokenExpireIn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Security_JwtValidationError{
					field:  "RefreshTokenExpireIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Security_JwtValidationError{
					field:  "RefreshTokenExpireIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRefreshTokenExpireIn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Security_JwtValidationError{
				field:  "RefreshTokenExpireIn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Issuer

	if len(errors) > 0 {
		return Security_JwtMultiError(errors)
	}

	return nil
}

// Security_JwtMultiError is an error wrapping multiple validation errors
// returned by Security_Jwt.ValidateAll() if the designated constraints aren't met.
type Security_JwtMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Security_JwtMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Security_JwtMultiError) AllErrors() []error { return m }

// Security_JwtValidationError is the validation error returned by
// Security_Jwt.Validate if the designated constraints aren't met.
type Security_JwtValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Security_JwtValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Security_JwtValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Security_JwtValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Security_JwtValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Security_JwtValidationError) ErrorName() string { return "Security_JwtValidationError" }

// Error satisfies the builtin error interface
func (e Security_JwtValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurity_Jwt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Security_JwtValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Security_JwtValidationError{}

// Validate checks the field values on Security_CookieKey with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Security_CookieKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Security_CookieKey with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Security_CookieKeyMultiError, or nil if none found.
func (m *Security_CookieKey) ValidateAll() error {
	return m.validate(true)
}

func (m *Security_CookieKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HashKey

	if m.BlockKey != nil {

		if all {
			switch v := interface{}(m.GetBlockKey()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Security_CookieKeyValidationError{
						field:  "BlockKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Security_CookieKeyValidationError{
						field:  "BlockKey",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBlockKey()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Security_CookieKeyValidationError{
					field:  "BlockKey",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Security_CookieKeyMultiError(errors)
	}

	return nil
}

// Security_CookieKeyMultiError is an error wrapping multiple validation errors
// returned by Security_CookieKey.ValidateAll() if the designated constraints
// aren't met.
type Security_CookieKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Security_CookieKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Security_CookieKeyMultiError) AllErrors() []error { return m }

// Security_CookieKeyValidationError is the validation error returned by
// Security_CookieKey.Validate if the designated constraints aren't met.
type Security_CookieKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Security_CookieKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Security_CookieKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Security_CookieKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Security_CookieKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Security_CookieKeyValidationError) ErrorName() string {
	return "Security_CookieKeyValidationError"
}

// Error satisfies the builtin error interface
func (e Security_CookieKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecurity_CookieKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Security_CookieKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Security_CookieKeyValidationError{}

// Validate checks the field values on Tracers_Otel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tracers_Otel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tracers_Otel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Tracers_OtelMultiError, or
// nil if none found.
func (m *Tracers_Otel) ValidateAll() error {
	return m.validate(true)
}

func (m *Tracers_Otel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Grpc

	if len(errors) > 0 {
		return Tracers_OtelMultiError(errors)
	}

	return nil
}

// Tracers_OtelMultiError is an error wrapping multiple validation errors
// returned by Tracers_Otel.ValidateAll() if the designated constraints aren't met.
type Tracers_OtelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Tracers_OtelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Tracers_OtelMultiError) AllErrors() []error { return m }

// Tracers_OtelValidationError is the validation error returned by
// Tracers_Otel.Validate if the designated constraints aren't met.
type Tracers_OtelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tracers_OtelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tracers_OtelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tracers_OtelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tracers_OtelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tracers_OtelValidationError) ErrorName() string { return "Tracers_OtelValidationError" }

// Error satisfies the builtin error interface
func (e Tracers_OtelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTracers_Otel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tracers_OtelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tracers_OtelValidationError{}
