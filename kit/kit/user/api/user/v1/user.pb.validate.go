// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/api/user/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserFilterMultiError, or
// nil if none found.
func (m *UserFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *UserFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserFilterValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserFilterValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserFilterValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserFilterValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserFilterValidationError{
					field:  "Gender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserFilterValidationError{
				field:  "Gender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBirthday()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserFilterValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserFilterValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBirthday()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserFilterValidationError{
				field:  "Birthday",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRoles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserFilterValidationError{
					field:  "Roles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserFilterValidationError{
					field:  "Roles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserFilterValidationError{
				field:  "Roles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnd() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserFilterValidationError{
						field:  fmt.Sprintf("And[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserFilterValidationError{
						field:  fmt.Sprintf("And[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserFilterValidationError{
					field:  fmt.Sprintf("And[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOr() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserFilterValidationError{
						field:  fmt.Sprintf("Or[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserFilterValidationError{
						field:  fmt.Sprintf("Or[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserFilterValidationError{
					field:  fmt.Sprintf("Or[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserFilterMultiError(errors)
	}

	return nil
}

// UserFilterMultiError is an error wrapping multiple validation errors
// returned by UserFilter.ValidateAll() if the designated constraints aren't met.
type UserFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserFilterMultiError) AllErrors() []error { return m }

// UserFilterValidationError is the validation error returned by
// UserFilter.Validate if the designated constraints aren't met.
type UserFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserFilterValidationError) ErrorName() string { return "UserFilterValidationError" }

// Error satisfies the builtin error interface
func (e UserFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserFilterValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageOffset

	// no validation rules for PageSize

	// no validation rules for Search

	if all {
		switch v := interface{}(m.GetFields()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUsersRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetUserRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Gender

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetAvatar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Avatar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Avatar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvatar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Avatar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Birthday != nil {

		if all {
			switch v := interface{}(m.GetBirthday()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "Birthday",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserValidationError{
						field:  "Birthday",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBirthday()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponseMultiError, or nil if none found.
func (m *ListUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalSize

	// no validation rules for FilterSize

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUsersResponseMultiError(errors)
	}

	return nil
}

// ListUsersResponseMultiError is an error wrapping multiple validation errors
// returned by ListUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponseMultiError) AllErrors() []error { return m }

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	// no validation rules for ConfirmPassword

	// no validation rules for Gender

	// no validation rules for Avatar

	// no validation rules for Id

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Email != nil {

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = CreateUserRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Birthday != nil {

		if all {
			switch v := interface{}(m.GetBirthday()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateUserRequestValidationError{
						field:  "Birthday",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateUserRequestValidationError{
						field:  "Birthday",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBirthday()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateUserRequestValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

func (m *CreateUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserRequestMultiError, or nil if none found.
func (m *UpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUser() == nil {
		err := UpdateUserRequestValidationError{
			field:  "User",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserRequestMultiError(errors)
	}

	return nil
}

// UpdateUserRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRequestMultiError) AllErrors() []error { return m }

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUser with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateUserMultiError, or
// nil if none found.
func (m *UpdateUser) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateUserValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateUserMultiError(errors)
	}

	return nil
}

// UpdateUserMultiError is an error wrapping multiple validation errors
// returned by UpdateUser.ValidateAll() if the designated constraints aren't met.
type UpdateUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserMultiError) AllErrors() []error { return m }

// UpdateUserValidationError is the validation error returned by
// UpdateUser.Validate if the designated constraints aren't met.
type UpdateUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserValidationError) ErrorName() string { return "UpdateUserValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserResponseMultiError, or nil if none found.
func (m *DeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserResponseMultiError(errors)
	}

	return nil
}

// DeleteUserResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserResponseMultiError) AllErrors() []error { return m }

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on GetUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserRoleRequestMultiError, or nil if none found.
func (m *GetUserRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserRoleRequestMultiError(errors)
	}

	return nil
}

// GetUserRoleRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRoleRequestMultiError) AllErrors() []error { return m }

// GetUserRoleRequestValidationError is the validation error returned by
// GetUserRoleRequest.Validate if the designated constraints aren't met.
type GetUserRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRoleRequestValidationError) ErrorName() string {
	return "GetUserRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRoleRequestValidationError{}

// Validate checks the field values on GetUserRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserRoleReplyMultiError, or nil if none found.
func (m *GetUserRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserRoleReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserRoleReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserRoleReplyValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserRoleReplyMultiError(errors)
	}

	return nil
}

// GetUserRoleReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserRoleReply.ValidateAll() if the designated constraints
// aren't met.
type GetUserRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRoleReplyMultiError) AllErrors() []error { return m }

// GetUserRoleReplyValidationError is the validation error returned by
// GetUserRoleReply.Validate if the designated constraints aren't met.
type GetUserRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRoleReplyValidationError) ErrorName() string { return "GetUserRoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRoleReplyValidationError{}

// Validate checks the field values on UserRole with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserRole) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserRole with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserRoleMultiError, or nil
// if none found.
func (m *UserRole) ValidateAll() error {
	return m.validate(true)
}

func (m *UserRole) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return UserRoleMultiError(errors)
	}

	return nil
}

// UserRoleMultiError is an error wrapping multiple validation errors returned
// by UserRole.ValidateAll() if the designated constraints aren't met.
type UserRoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserRoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserRoleMultiError) AllErrors() []error { return m }

// UserRoleValidationError is the validation error returned by
// UserRole.Validate if the designated constraints aren't met.
type UserRoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserRoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserRoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserRoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserRoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserRoleValidationError) ErrorName() string { return "UserRoleValidationError" }

// Error satisfies the builtin error interface
func (e UserRoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserRoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserRoleValidationError{}

// Validate checks the field values on InviteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InviteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteUserRequestMultiError, or nil if none found.
func (m *InviteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetIdentify()) < 1 {
		err := InviteUserRequestValidationError{
			field:  "Identify",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InviteUserRequestMultiError(errors)
	}

	return nil
}

// InviteUserRequestMultiError is an error wrapping multiple validation errors
// returned by InviteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type InviteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteUserRequestMultiError) AllErrors() []error { return m }

// InviteUserRequestValidationError is the validation error returned by
// InviteUserRequest.Validate if the designated constraints aren't met.
type InviteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteUserRequestValidationError) ErrorName() string {
	return "InviteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InviteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteUserRequestValidationError{}

// Validate checks the field values on InviteUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InviteUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteUserReplyMultiError, or nil if none found.
func (m *InviteUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequiredConfirm

	if len(errors) > 0 {
		return InviteUserReplyMultiError(errors)
	}

	return nil
}

// InviteUserReplyMultiError is an error wrapping multiple validation errors
// returned by InviteUserReply.ValidateAll() if the designated constraints
// aren't met.
type InviteUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteUserReplyMultiError) AllErrors() []error { return m }

// InviteUserReplyValidationError is the validation error returned by
// InviteUserReply.Validate if the designated constraints aren't met.
type InviteUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteUserReplyValidationError) ErrorName() string { return "InviteUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e InviteUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteUserReplyValidationError{}

// Validate checks the field values on CheckUserTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckUserTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckUserTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckUserTenantRequestMultiError, or nil if none found.
func (m *CheckUserTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckUserTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for TenantId

	if len(errors) > 0 {
		return CheckUserTenantRequestMultiError(errors)
	}

	return nil
}

// CheckUserTenantRequestMultiError is an error wrapping multiple validation
// errors returned by CheckUserTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckUserTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckUserTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckUserTenantRequestMultiError) AllErrors() []error { return m }

// CheckUserTenantRequestValidationError is the validation error returned by
// CheckUserTenantRequest.Validate if the designated constraints aren't met.
type CheckUserTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserTenantRequestValidationError) ErrorName() string {
	return "CheckUserTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserTenantRequestValidationError{}

// Validate checks the field values on CheckUserTenantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckUserTenantReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckUserTenantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckUserTenantReplyMultiError, or nil if none found.
func (m *CheckUserTenantReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckUserTenantReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return CheckUserTenantReplyMultiError(errors)
	}

	return nil
}

// CheckUserTenantReplyMultiError is an error wrapping multiple validation
// errors returned by CheckUserTenantReply.ValidateAll() if the designated
// constraints aren't met.
type CheckUserTenantReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckUserTenantReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckUserTenantReplyMultiError) AllErrors() []error { return m }

// CheckUserTenantReplyValidationError is the validation error returned by
// CheckUserTenantReply.Validate if the designated constraints aren't met.
type CheckUserTenantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserTenantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserTenantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserTenantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserTenantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserTenantReplyValidationError) ErrorName() string {
	return "CheckUserTenantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserTenantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserTenantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserTenantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserTenantReplyValidationError{}

// Validate checks the field values on GetUserPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserPermissionRequestMultiError, or nil if none found.
func (m *GetUserPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetUserPermissionRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserPermissionRequestMultiError(errors)
	}

	return nil
}

// GetUserPermissionRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserPermissionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPermissionRequestMultiError) AllErrors() []error { return m }

// GetUserPermissionRequestValidationError is the validation error returned by
// GetUserPermissionRequest.Validate if the designated constraints aren't met.
type GetUserPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPermissionRequestValidationError) ErrorName() string {
	return "GetUserPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPermissionRequestValidationError{}

// Validate checks the field values on GetUserPermissionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPermissionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPermissionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserPermissionReplyMultiError, or nil if none found.
func (m *GetUserPermissionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPermissionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAcl() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserPermissionReplyValidationError{
						field:  fmt.Sprintf("Acl[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserPermissionReplyValidationError{
						field:  fmt.Sprintf("Acl[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserPermissionReplyValidationError{
					field:  fmt.Sprintf("Acl[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDefGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserPermissionReplyValidationError{
						field:  fmt.Sprintf("DefGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserPermissionReplyValidationError{
						field:  fmt.Sprintf("DefGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserPermissionReplyValidationError{
					field:  fmt.Sprintf("DefGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserPermissionReplyMultiError(errors)
	}

	return nil
}

// GetUserPermissionReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserPermissionReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserPermissionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPermissionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPermissionReplyMultiError) AllErrors() []error { return m }

// GetUserPermissionReplyValidationError is the validation error returned by
// GetUserPermissionReply.Validate if the designated constraints aren't met.
type GetUserPermissionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPermissionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPermissionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPermissionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPermissionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPermissionReplyValidationError) ErrorName() string {
	return "GetUserPermissionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPermissionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPermissionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPermissionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPermissionReplyValidationError{}

// Validate checks the field values on UpdateUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPermissionRequestMultiError, or nil if none found.
func (m *UpdateUserPermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateUserPermissionRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAcl() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateUserPermissionRequestValidationError{
						field:  fmt.Sprintf("Acl[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateUserPermissionRequestValidationError{
						field:  fmt.Sprintf("Acl[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateUserPermissionRequestValidationError{
					field:  fmt.Sprintf("Acl[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateUserPermissionRequestMultiError(errors)
	}

	return nil
}

// UpdateUserPermissionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUserPermissionRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserPermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPermissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPermissionRequestMultiError) AllErrors() []error { return m }

// UpdateUserPermissionRequestValidationError is the validation error returned
// by UpdateUserPermissionRequest.Validate if the designated constraints
// aren't met.
type UpdateUserPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPermissionRequestValidationError) ErrorName() string {
	return "UpdateUserPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPermissionRequestValidationError{}

// Validate checks the field values on UpdateUserPermissionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPermissionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPermissionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPermissionReplyMultiError, or nil if none found.
func (m *UpdateUserPermissionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPermissionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserPermissionReplyMultiError(errors)
	}

	return nil
}

// UpdateUserPermissionReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateUserPermissionReply.ValidateAll() if the
// designated constraints aren't met.
type UpdateUserPermissionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPermissionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPermissionReplyMultiError) AllErrors() []error { return m }

// UpdateUserPermissionReplyValidationError is the validation error returned by
// UpdateUserPermissionReply.Validate if the designated constraints aren't met.
type UpdateUserPermissionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPermissionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPermissionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPermissionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPermissionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPermissionReplyValidationError) ErrorName() string {
	return "UpdateUserPermissionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPermissionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPermissionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPermissionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPermissionReplyValidationError{}

// Validate checks the field values on SearchUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserRequestMultiError, or nil if none found.
func (m *SearchUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFields()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUserRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUserRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUserRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Identity != nil {
		// no validation rules for Identity
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Email != nil {

		if err := m._validateEmail(m.GetEmail()); err != nil {
			err = SearchUserRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if len(errors) > 0 {
		return SearchUserRequestMultiError(errors)
	}

	return nil
}

func (m *SearchUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SearchUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SearchUserRequestMultiError is an error wrapping multiple validation errors
// returned by SearchUserRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserRequestMultiError) AllErrors() []error { return m }

// SearchUserRequestValidationError is the validation error returned by
// SearchUserRequest.Validate if the designated constraints aren't met.
type SearchUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserRequestValidationError) ErrorName() string {
	return "SearchUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserRequestValidationError{}

// Validate checks the field values on SearchUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUserResponseMultiError, or nil if none found.
func (m *SearchUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchUserResponseMultiError(errors)
	}

	return nil
}

// SearchUserResponseMultiError is an error wrapping multiple validation errors
// returned by SearchUserResponse.ValidateAll() if the designated constraints
// aren't met.
type SearchUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserResponseMultiError) AllErrors() []error { return m }

// SearchUserResponseValidationError is the validation error returned by
// SearchUserResponse.Validate if the designated constraints aren't met.
type SearchUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserResponseValidationError) ErrorName() string {
	return "SearchUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserResponseValidationError{}

// Validate checks the field values on UserInternalCreateTenantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserInternalCreateTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInternalCreateTenantRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UserInternalCreateTenantRequestMultiError, or nil if none found.
func (m *UserInternalCreateTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInternalCreateTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	if m.AdminEmail != nil {

		if err := m._validateEmail(m.GetAdminEmail()); err != nil {
			err = UserInternalCreateTenantRequestValidationError{
				field:  "AdminEmail",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.AdminUsername != nil {
		// no validation rules for AdminUsername
	}

	if m.AdminPassword != nil {
		// no validation rules for AdminPassword
	}

	if m.AdminUserId != nil {
		// no validation rules for AdminUserId
	}

	if len(errors) > 0 {
		return UserInternalCreateTenantRequestMultiError(errors)
	}

	return nil
}

func (m *UserInternalCreateTenantRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserInternalCreateTenantRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserInternalCreateTenantRequestMultiError is an error wrapping multiple
// validation errors returned by UserInternalCreateTenantRequest.ValidateAll()
// if the designated constraints aren't met.
type UserInternalCreateTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInternalCreateTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInternalCreateTenantRequestMultiError) AllErrors() []error { return m }

// UserInternalCreateTenantRequestValidationError is the validation error
// returned by UserInternalCreateTenantRequest.Validate if the designated
// constraints aren't met.
type UserInternalCreateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInternalCreateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInternalCreateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInternalCreateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInternalCreateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInternalCreateTenantRequestValidationError) ErrorName() string {
	return "UserInternalCreateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserInternalCreateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInternalCreateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInternalCreateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInternalCreateTenantRequestValidationError{}

// Validate checks the field values on FindOrCreateStripeCustomerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindOrCreateStripeCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindOrCreateStripeCustomerRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindOrCreateStripeCustomerRequestMultiError, or nil if none found.
func (m *FindOrCreateStripeCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindOrCreateStripeCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {
		// no validation rules for UserId
	}

	if m.StripeCustomerId != nil {
		// no validation rules for StripeCustomerId
	}

	if len(errors) > 0 {
		return FindOrCreateStripeCustomerRequestMultiError(errors)
	}

	return nil
}

// FindOrCreateStripeCustomerRequestMultiError is an error wrapping multiple
// validation errors returned by
// FindOrCreateStripeCustomerRequest.ValidateAll() if the designated
// constraints aren't met.
type FindOrCreateStripeCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindOrCreateStripeCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindOrCreateStripeCustomerRequestMultiError) AllErrors() []error { return m }

// FindOrCreateStripeCustomerRequestValidationError is the validation error
// returned by FindOrCreateStripeCustomerRequest.Validate if the designated
// constraints aren't met.
type FindOrCreateStripeCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindOrCreateStripeCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindOrCreateStripeCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindOrCreateStripeCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindOrCreateStripeCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindOrCreateStripeCustomerRequestValidationError) ErrorName() string {
	return "FindOrCreateStripeCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindOrCreateStripeCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindOrCreateStripeCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindOrCreateStripeCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindOrCreateStripeCustomerRequestValidationError{}

// Validate checks the field values on FindOrCreateStripeCustomerReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindOrCreateStripeCustomerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindOrCreateStripeCustomerReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FindOrCreateStripeCustomerReplyMultiError, or nil if none found.
func (m *FindOrCreateStripeCustomerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FindOrCreateStripeCustomerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindOrCreateStripeCustomerReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindOrCreateStripeCustomerReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindOrCreateStripeCustomerReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StripeCustomerId

	if len(errors) > 0 {
		return FindOrCreateStripeCustomerReplyMultiError(errors)
	}

	return nil
}

// FindOrCreateStripeCustomerReplyMultiError is an error wrapping multiple
// validation errors returned by FindOrCreateStripeCustomerReply.ValidateAll()
// if the designated constraints aren't met.
type FindOrCreateStripeCustomerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindOrCreateStripeCustomerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindOrCreateStripeCustomerReplyMultiError) AllErrors() []error { return m }

// FindOrCreateStripeCustomerReplyValidationError is the validation error
// returned by FindOrCreateStripeCustomerReply.Validate if the designated
// constraints aren't met.
type FindOrCreateStripeCustomerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindOrCreateStripeCustomerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindOrCreateStripeCustomerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindOrCreateStripeCustomerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindOrCreateStripeCustomerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindOrCreateStripeCustomerReplyValidationError) ErrorName() string {
	return "FindOrCreateStripeCustomerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e FindOrCreateStripeCustomerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindOrCreateStripeCustomerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindOrCreateStripeCustomerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindOrCreateStripeCustomerReplyValidationError{}

// Validate checks the field values on SearchUserResponse_SearchUser with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUserResponse_SearchUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUserResponse_SearchUser with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchUserResponse_SearchUserMultiError, or nil if none found.
func (m *SearchUserResponse_SearchUser) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUserResponse_SearchUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetAvatar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUserResponse_SearchUserValidationError{
					field:  "Avatar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUserResponse_SearchUserValidationError{
					field:  "Avatar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvatar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUserResponse_SearchUserValidationError{
				field:  "Avatar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if len(errors) > 0 {
		return SearchUserResponse_SearchUserMultiError(errors)
	}

	return nil
}

// SearchUserResponse_SearchUserMultiError is an error wrapping multiple
// validation errors returned by SearchUserResponse_SearchUser.ValidateAll()
// if the designated constraints aren't met.
type SearchUserResponse_SearchUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUserResponse_SearchUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUserResponse_SearchUserMultiError) AllErrors() []error { return m }

// SearchUserResponse_SearchUserValidationError is the validation error
// returned by SearchUserResponse_SearchUser.Validate if the designated
// constraints aren't met.
type SearchUserResponse_SearchUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUserResponse_SearchUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUserResponse_SearchUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUserResponse_SearchUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUserResponse_SearchUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUserResponse_SearchUserValidationError) ErrorName() string {
	return "SearchUserResponse_SearchUserValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUserResponse_SearchUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUserResponse_SearchUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUserResponse_SearchUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUserResponse_SearchUserValidationError{}
