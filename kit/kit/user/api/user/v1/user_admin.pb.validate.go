// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: user/api/user/v1/user_admin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AdminListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminListUsersRequestMultiError, or nil if none found.
func (m *AdminListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageOffset

	// no validation rules for PageSize

	// no validation rules for Search

	if all {
		switch v := interface{}(m.GetFields()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminListUsersRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminListUsersRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminListUsersRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminListUsersRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminListUsersRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminListUsersRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminListUsersRequestMultiError(errors)
	}

	return nil
}

// AdminListUsersRequestMultiError is an error wrapping multiple validation
// errors returned by AdminListUsersRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminListUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminListUsersRequestMultiError) AllErrors() []error { return m }

// AdminListUsersRequestValidationError is the validation error returned by
// AdminListUsersRequest.Validate if the designated constraints aren't met.
type AdminListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminListUsersRequestValidationError) ErrorName() string {
	return "AdminListUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminListUsersRequestValidationError{}

// Validate checks the field values on AdminGetUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminGetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminGetUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminGetUserRequestMultiError, or nil if none found.
func (m *AdminGetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminGetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := AdminGetUserRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AdminGetUserRequestMultiError(errors)
	}

	return nil
}

// AdminGetUserRequestMultiError is an error wrapping multiple validation
// errors returned by AdminGetUserRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminGetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminGetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminGetUserRequestMultiError) AllErrors() []error { return m }

// AdminGetUserRequestValidationError is the validation error returned by
// AdminGetUserRequest.Validate if the designated constraints aren't met.
type AdminGetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminGetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminGetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminGetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminGetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminGetUserRequestValidationError) ErrorName() string {
	return "AdminGetUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminGetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminGetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminGetUserRequestValidationError{}

// Validate checks the field values on AdminListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminListUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminListUsersResponseMultiError, or nil if none found.
func (m *AdminListUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminListUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalSize

	// no validation rules for FilterSize

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminListUsersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminListUsersResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminListUsersResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminListUsersResponseMultiError(errors)
	}

	return nil
}

// AdminListUsersResponseMultiError is an error wrapping multiple validation
// errors returned by AdminListUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminListUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminListUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminListUsersResponseMultiError) AllErrors() []error { return m }

// AdminListUsersResponseValidationError is the validation error returned by
// AdminListUsersResponse.Validate if the designated constraints aren't met.
type AdminListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminListUsersResponseValidationError) ErrorName() string {
	return "AdminListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminListUsersResponseValidationError{}

// Validate checks the field values on AdminCreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminCreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminCreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminCreateUserRequestMultiError, or nil if none found.
func (m *AdminCreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminCreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	// no validation rules for ConfirmPassword

	// no validation rules for Gender

	// no validation rules for Avatar

	if m.Username != nil {

		if all {
			switch v := interface{}(m.GetUsername()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminCreateUserRequestValidationError{
						field:  "Username",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminCreateUserRequestValidationError{
						field:  "Username",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUsername()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminCreateUserRequestValidationError{
					field:  "Username",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Name != nil {

		if all {
			switch v := interface{}(m.GetName()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminCreateUserRequestValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminCreateUserRequestValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminCreateUserRequestValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Phone != nil {

		if all {
			switch v := interface{}(m.GetPhone()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminCreateUserRequestValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminCreateUserRequestValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminCreateUserRequestValidationError{
					field:  "Phone",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Email != nil {

		if wrapper := m.GetEmail(); wrapper != nil {

			if err := m._validateEmail(wrapper.GetValue()); err != nil {
				err = AdminCreateUserRequestValidationError{
					field:  "Email",
					reason: "value must be a valid email address",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}

	}

	if m.Birthday != nil {

		if all {
			switch v := interface{}(m.GetBirthday()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminCreateUserRequestValidationError{
						field:  "Birthday",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminCreateUserRequestValidationError{
						field:  "Birthday",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBirthday()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminCreateUserRequestValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminCreateUserRequestMultiError(errors)
	}

	return nil
}

func (m *AdminCreateUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AdminCreateUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AdminCreateUserRequestMultiError is an error wrapping multiple validation
// errors returned by AdminCreateUserRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminCreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminCreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminCreateUserRequestMultiError) AllErrors() []error { return m }

// AdminCreateUserRequestValidationError is the validation error returned by
// AdminCreateUserRequest.Validate if the designated constraints aren't met.
type AdminCreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminCreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminCreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminCreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminCreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminCreateUserRequestValidationError) ErrorName() string {
	return "AdminCreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminCreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminCreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminCreateUserRequestValidationError{}

// Validate checks the field values on AdminUpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminUpdateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUpdateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUpdateUserRequestMultiError, or nil if none found.
func (m *AdminUpdateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUser() == nil {
		err := AdminUpdateUserRequestValidationError{
			field:  "User",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUpdateUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUpdateUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUpdateUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminUpdateUserRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminUpdateUserRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminUpdateUserRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminUpdateUserRequestMultiError(errors)
	}

	return nil
}

// AdminUpdateUserRequestMultiError is an error wrapping multiple validation
// errors returned by AdminUpdateUserRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminUpdateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdateUserRequestMultiError) AllErrors() []error { return m }

// AdminUpdateUserRequestValidationError is the validation error returned by
// AdminUpdateUserRequest.Validate if the designated constraints aren't met.
type AdminUpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdateUserRequestValidationError) ErrorName() string {
	return "AdminUpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminUpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdateUserRequestValidationError{}

// Validate checks the field values on AdminUpdateUser with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AdminUpdateUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminUpdateUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminUpdateUserMultiError, or nil if none found.
func (m *AdminUpdateUser) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminUpdateUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := AdminUpdateUserValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Gender

	// no validation rules for Password

	// no validation rules for ConfirmPassword

	// no validation rules for Avatar

	if m.Username != nil {

		if all {
			switch v := interface{}(m.GetUsername()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminUpdateUserValidationError{
						field:  "Username",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminUpdateUserValidationError{
						field:  "Username",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUsername()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminUpdateUserValidationError{
					field:  "Username",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Name != nil {

		if all {
			switch v := interface{}(m.GetName()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminUpdateUserValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminUpdateUserValidationError{
						field:  "Name",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminUpdateUserValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Phone != nil {

		if all {
			switch v := interface{}(m.GetPhone()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminUpdateUserValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminUpdateUserValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminUpdateUserValidationError{
					field:  "Phone",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Email != nil {

		if all {
			switch v := interface{}(m.GetEmail()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminUpdateUserValidationError{
						field:  "Email",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminUpdateUserValidationError{
						field:  "Email",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminUpdateUserValidationError{
					field:  "Email",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Birthday != nil {

		if all {
			switch v := interface{}(m.GetBirthday()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminUpdateUserValidationError{
						field:  "Birthday",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminUpdateUserValidationError{
						field:  "Birthday",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBirthday()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminUpdateUserValidationError{
					field:  "Birthday",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AdminUpdateUserMultiError(errors)
	}

	return nil
}

// AdminUpdateUserMultiError is an error wrapping multiple validation errors
// returned by AdminUpdateUser.ValidateAll() if the designated constraints
// aren't met.
type AdminUpdateUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminUpdateUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminUpdateUserMultiError) AllErrors() []error { return m }

// AdminUpdateUserValidationError is the validation error returned by
// AdminUpdateUser.Validate if the designated constraints aren't met.
type AdminUpdateUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminUpdateUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminUpdateUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminUpdateUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminUpdateUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminUpdateUserValidationError) ErrorName() string { return "AdminUpdateUserValidationError" }

// Error satisfies the builtin error interface
func (e AdminUpdateUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminUpdateUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminUpdateUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminUpdateUserValidationError{}

// Validate checks the field values on AdminDeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminDeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminDeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminDeleteUserRequestMultiError, or nil if none found.
func (m *AdminDeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminDeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AdminDeleteUserRequestMultiError(errors)
	}

	return nil
}

// AdminDeleteUserRequestMultiError is an error wrapping multiple validation
// errors returned by AdminDeleteUserRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminDeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminDeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminDeleteUserRequestMultiError) AllErrors() []error { return m }

// AdminDeleteUserRequestValidationError is the validation error returned by
// AdminDeleteUserRequest.Validate if the designated constraints aren't met.
type AdminDeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDeleteUserRequestValidationError) ErrorName() string {
	return "AdminDeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDeleteUserRequestValidationError{}

// Validate checks the field values on AdminDeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminDeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminDeleteUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdminDeleteUserResponseMultiError, or nil if none found.
func (m *AdminDeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminDeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminDeleteUserResponseMultiError(errors)
	}

	return nil
}

// AdminDeleteUserResponseMultiError is an error wrapping multiple validation
// errors returned by AdminDeleteUserResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminDeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminDeleteUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminDeleteUserResponseMultiError) AllErrors() []error { return m }

// AdminDeleteUserResponseValidationError is the validation error returned by
// AdminDeleteUserResponse.Validate if the designated constraints aren't met.
type AdminDeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminDeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminDeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminDeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminDeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminDeleteUserResponseValidationError) ErrorName() string {
	return "AdminDeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminDeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminDeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminDeleteUserResponseValidationError{}
