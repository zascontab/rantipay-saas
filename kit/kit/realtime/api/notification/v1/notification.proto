syntax = "proto3";

package notification.v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/api/field_behavior.proto";
import "validate/validate.proto";
import "query/operation.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/go-saas/kit/realtime/api/notification/v1;v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Realtime Service";
    version: "1.0";
  };
  security_definitions: {
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Authentication token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
  security: {
    security_requirement: {
      key: "bearer"
    }
  }
};

service NotificationService {

  rpc ListNotification (ListNotificationRequest) returns (ListNotificationReply){
    option (google.api.http) = {
      get: "/v1/realtime/notifications",
      additional_bindings:{
        post:"/v1/realtime/notification/list",
        body:"*"
      }
    };
  }

  rpc GetNotification (GetNotificationRequest) returns (Notification){
    option (google.api.http) = {
      get: "/v1/realtime/notification/{id}"
    };
  }

  //ReadNotification set notification as read
  rpc ReadNotification (ReadNotificationRequest) returns (google.protobuf.Empty){
    option (google.api.http) = {
      put: "/v1/realtime/notification/{id}/read"
      body:"*"
    };
  }

  rpc DeleteNotification (DeleteNotificationRequest) returns (DeleteNotificationReply){
    option (google.api.http) = {
      delete: "/v1/realtime/notification/{id}"
    };
  }

}

message DeleteNotificationRequest {
  string id=1;
}

message DeleteNotificationReply {
  string id=1;
}

message GetNotificationRequest {
  string id=1 [(validate.rules).string.min_len=1,(google.api.field_behavior)=REQUIRED];
}

message ReadNotificationRequest{
  //id. set "-" for read all
  string id=1;
}

message NotificationFilter{
  query.operation.BooleanFilterOperators has_read =2;
}

message ListNotificationRequest {
  string after_page_token =1;
  string before_page_token =2;
  int32 page_size = 3;
  repeated string sort =4;
  google.protobuf.FieldMask fields=5;
  NotificationFilter filter =6;
}
message ListNotificationReply {
  int32 total_size =1;
  int32 filter_size =2;
  repeated Notification items=3;
  optional string next_after_page_token=4;
  optional string next_before_page_token=5;
  int32 unread_size=6;
}

message Notification{
  string id=1;

  string tenant_id=2;
  string group=3;
  string title=4;
  string desc=5;
  string image=7;
  string link=8;
  string source=9;
  string user_id=10;
  google.protobuf.Struct extra=11;
  int32 level=12;

  bool has_read=100;
}
