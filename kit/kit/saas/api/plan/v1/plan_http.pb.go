// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             (unknown)
// source: saas/api/plan/v1/plan.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPlanServiceCreatePlan = "/saas.api.plan.v1.PlanService/CreatePlan"
const OperationPlanServiceDeletePlan = "/saas.api.plan.v1.PlanService/DeletePlan"
const OperationPlanServiceGetAvailablePlans = "/saas.api.plan.v1.PlanService/GetAvailablePlans"
const OperationPlanServiceGetPlan = "/saas.api.plan.v1.PlanService/GetPlan"
const OperationPlanServiceListPlan = "/saas.api.plan.v1.PlanService/ListPlan"
const OperationPlanServiceUpdatePlan = "/saas.api.plan.v1.PlanService/UpdatePlan"

type PlanServiceHTTPServer interface {
	CreatePlan(context.Context, *CreatePlanRequest) (*Plan, error)
	DeletePlan(context.Context, *DeletePlanRequest) (*DeletePlanReply, error)
	GetAvailablePlans(context.Context, *GetAvailablePlansRequest) (*GetAvailablePlansReply, error)
	GetPlan(context.Context, *GetPlanRequest) (*Plan, error)
	ListPlan(context.Context, *ListPlanRequest) (*ListPlanReply, error)
	UpdatePlan(context.Context, *UpdatePlanRequest) (*Plan, error)
}

func RegisterPlanServiceHTTPServer(s *http.Server, srv PlanServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/saas/plan/list", _PlanService_ListPlan0_HTTP_Handler(srv))
	r.GET("/v1/saas/plans", _PlanService_ListPlan1_HTTP_Handler(srv))
	r.GET("/v1/saas/plan/{key}", _PlanService_GetPlan0_HTTP_Handler(srv))
	r.POST("/v1/saas/plan", _PlanService_CreatePlan0_HTTP_Handler(srv))
	r.PATCH("/v1/saas/plan/{plan.key}", _PlanService_UpdatePlan0_HTTP_Handler(srv))
	r.PUT("/v1/saas/plan/{plan.key}", _PlanService_UpdatePlan1_HTTP_Handler(srv))
	r.DELETE("/v1/saas/plan/{key}", _PlanService_DeletePlan0_HTTP_Handler(srv))
	r.GET("/v1/saas/plans/available", _PlanService_GetAvailablePlans0_HTTP_Handler(srv))
}

func _PlanService_ListPlan0_HTTP_Handler(srv PlanServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanServiceListPlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPlan(ctx, req.(*ListPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPlanReply)
		return ctx.Result(200, reply)
	}
}

func _PlanService_ListPlan1_HTTP_Handler(srv PlanServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPlanRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanServiceListPlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPlan(ctx, req.(*ListPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPlanReply)
		return ctx.Result(200, reply)
	}
}

func _PlanService_GetPlan0_HTTP_Handler(srv PlanServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPlanRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanServiceGetPlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPlan(ctx, req.(*GetPlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Plan)
		return ctx.Result(200, reply)
	}
}

func _PlanService_CreatePlan0_HTTP_Handler(srv PlanServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanServiceCreatePlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePlan(ctx, req.(*CreatePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Plan)
		return ctx.Result(200, reply)
	}
}

func _PlanService_UpdatePlan0_HTTP_Handler(srv PlanServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanServiceUpdatePlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePlan(ctx, req.(*UpdatePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Plan)
		return ctx.Result(200, reply)
	}
}

func _PlanService_UpdatePlan1_HTTP_Handler(srv PlanServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePlanRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanServiceUpdatePlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePlan(ctx, req.(*UpdatePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Plan)
		return ctx.Result(200, reply)
	}
}

func _PlanService_DeletePlan0_HTTP_Handler(srv PlanServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePlanRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanServiceDeletePlan)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePlan(ctx, req.(*DeletePlanRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePlanReply)
		return ctx.Result(200, reply)
	}
}

func _PlanService_GetAvailablePlans0_HTTP_Handler(srv PlanServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAvailablePlansRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlanServiceGetAvailablePlans)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAvailablePlans(ctx, req.(*GetAvailablePlansRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAvailablePlansReply)
		return ctx.Result(200, reply)
	}
}

type PlanServiceHTTPClient interface {
	CreatePlan(ctx context.Context, req *CreatePlanRequest, opts ...http.CallOption) (rsp *Plan, err error)
	DeletePlan(ctx context.Context, req *DeletePlanRequest, opts ...http.CallOption) (rsp *DeletePlanReply, err error)
	GetAvailablePlans(ctx context.Context, req *GetAvailablePlansRequest, opts ...http.CallOption) (rsp *GetAvailablePlansReply, err error)
	GetPlan(ctx context.Context, req *GetPlanRequest, opts ...http.CallOption) (rsp *Plan, err error)
	ListPlan(ctx context.Context, req *ListPlanRequest, opts ...http.CallOption) (rsp *ListPlanReply, err error)
	UpdatePlan(ctx context.Context, req *UpdatePlanRequest, opts ...http.CallOption) (rsp *Plan, err error)
}

type PlanServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewPlanServiceHTTPClient(client *http.Client) PlanServiceHTTPClient {
	return &PlanServiceHTTPClientImpl{client}
}

func (c *PlanServiceHTTPClientImpl) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...http.CallOption) (*Plan, error) {
	var out Plan
	pattern := "/v1/saas/plan"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlanServiceCreatePlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanServiceHTTPClientImpl) DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...http.CallOption) (*DeletePlanReply, error) {
	var out DeletePlanReply
	pattern := "/v1/saas/plan/{key}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlanServiceDeletePlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanServiceHTTPClientImpl) GetAvailablePlans(ctx context.Context, in *GetAvailablePlansRequest, opts ...http.CallOption) (*GetAvailablePlansReply, error) {
	var out GetAvailablePlansReply
	pattern := "/v1/saas/plans/available"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlanServiceGetAvailablePlans))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanServiceHTTPClientImpl) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...http.CallOption) (*Plan, error) {
	var out Plan
	pattern := "/v1/saas/plan/{key}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlanServiceGetPlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanServiceHTTPClientImpl) ListPlan(ctx context.Context, in *ListPlanRequest, opts ...http.CallOption) (*ListPlanReply, error) {
	var out ListPlanReply
	pattern := "/v1/saas/plans"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlanServiceListPlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PlanServiceHTTPClientImpl) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...http.CallOption) (*Plan, error) {
	var out Plan
	pattern := "/v1/saas/plan/{plan.key}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPlanServiceUpdatePlan))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
