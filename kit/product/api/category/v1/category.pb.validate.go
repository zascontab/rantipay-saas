// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product/api/category/v1/category.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductCategoryRequestMultiError, or nil if none found.
func (m *CreateProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateProductCategoryRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Parent

	if len(errors) > 0 {
		return CreateProductCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateProductCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProductCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductCategoryRequestMultiError) AllErrors() []error { return m }

// CreateProductCategoryRequestValidationError is the validation error returned
// by CreateProductCategoryRequest.Validate if the designated constraints
// aren't met.
type CreateProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductCategoryRequestValidationError) ErrorName() string {
	return "CreateProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductCategoryRequestValidationError{}

// Validate checks the field values on UpdateProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductCategoryRequestMultiError, or nil if none found.
func (m *UpdateProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCategory() == nil {
		err := UpdateProductCategoryRequestValidationError{
			field:  "Category",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProductCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProductCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductCategoryRequestValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProductCategoryRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProductCategoryRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProductCategoryRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProductCategoryRequestMultiError(errors)
	}

	return nil
}

// UpdateProductCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProductCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateProductCategoryRequestValidationError is the validation error returned
// by UpdateProductCategoryRequest.Validate if the designated constraints
// aren't met.
type UpdateProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductCategoryRequestValidationError) ErrorName() string {
	return "UpdateProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductCategoryRequestValidationError{}

// Validate checks the field values on UpdateProductCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductCategoryMultiError, or nil if none found.
func (m *UpdateProductCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := UpdateProductCategoryValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return UpdateProductCategoryMultiError(errors)
	}

	return nil
}

// UpdateProductCategoryMultiError is an error wrapping multiple validation
// errors returned by UpdateProductCategory.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductCategoryMultiError) AllErrors() []error { return m }

// UpdateProductCategoryValidationError is the validation error returned by
// UpdateProductCategory.Validate if the designated constraints aren't met.
type UpdateProductCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductCategoryValidationError) ErrorName() string {
	return "UpdateProductCategoryValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductCategoryValidationError{}

// Validate checks the field values on DeleteProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductCategoryRequestMultiError, or nil if none found.
func (m *DeleteProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return DeleteProductCategoryRequestMultiError(errors)
	}

	return nil
}

// DeleteProductCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProductCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductCategoryRequestMultiError) AllErrors() []error { return m }

// DeleteProductCategoryRequestValidationError is the validation error returned
// by DeleteProductCategoryRequest.Validate if the designated constraints
// aren't met.
type DeleteProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductCategoryRequestValidationError) ErrorName() string {
	return "DeleteProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductCategoryRequestValidationError{}

// Validate checks the field values on DeleteProductCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductCategoryReplyMultiError, or nil if none found.
func (m *DeleteProductCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteProductCategoryReplyMultiError(errors)
	}

	return nil
}

// DeleteProductCategoryReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteProductCategoryReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteProductCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductCategoryReplyMultiError) AllErrors() []error { return m }

// DeleteProductCategoryReplyValidationError is the validation error returned
// by DeleteProductCategoryReply.Validate if the designated constraints aren't met.
type DeleteProductCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductCategoryReplyValidationError) ErrorName() string {
	return "DeleteProductCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductCategoryReplyValidationError{}

// Validate checks the field values on GetProductCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductCategoryRequestMultiError, or nil if none found.
func (m *GetProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := GetProductCategoryRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductCategoryRequestMultiError(errors)
	}

	return nil
}

// GetProductCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductCategoryRequest.ValidateAll() if the
// designated constraints aren't met.
type GetProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoryRequestMultiError) AllErrors() []error { return m }

// GetProductCategoryRequestValidationError is the validation error returned by
// GetProductCategoryRequest.Validate if the designated constraints aren't met.
type GetProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoryRequestValidationError) ErrorName() string {
	return "GetProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoryRequestValidationError{}

// Validate checks the field values on ProductCategoryFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProductCategoryFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCategoryFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCategoryFilterMultiError, or nil if none found.
func (m *ProductCategoryFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCategoryFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductCategoryFilterValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductCategoryFilterValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductCategoryFilterValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductCategoryFilterValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductCategoryFilterValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductCategoryFilterValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetParent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductCategoryFilterValidationError{
					field:  "Parent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductCategoryFilterValidationError{
					field:  "Parent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductCategoryFilterValidationError{
				field:  "Parent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductCategoryFilterMultiError(errors)
	}

	return nil
}

// ProductCategoryFilterMultiError is an error wrapping multiple validation
// errors returned by ProductCategoryFilter.ValidateAll() if the designated
// constraints aren't met.
type ProductCategoryFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCategoryFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCategoryFilterMultiError) AllErrors() []error { return m }

// ProductCategoryFilterValidationError is the validation error returned by
// ProductCategoryFilter.Validate if the designated constraints aren't met.
type ProductCategoryFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCategoryFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCategoryFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCategoryFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCategoryFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCategoryFilterValidationError) ErrorName() string {
	return "ProductCategoryFilterValidationError"
}

// Error satisfies the builtin error interface
func (e ProductCategoryFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCategoryFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCategoryFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCategoryFilterValidationError{}

// Validate checks the field values on ListProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductCategoryRequestMultiError, or nil if none found.
func (m *ListProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageOffset

	// no validation rules for PageSize

	// no validation rules for Search

	if all {
		switch v := interface{}(m.GetFields()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListProductCategoryRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListProductCategoryRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProductCategoryRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListProductCategoryRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListProductCategoryRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProductCategoryRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListProductCategoryRequestMultiError(errors)
	}

	return nil
}

// ListProductCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by ListProductCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type ListProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductCategoryRequestMultiError) AllErrors() []error { return m }

// ListProductCategoryRequestValidationError is the validation error returned
// by ListProductCategoryRequest.Validate if the designated constraints aren't met.
type ListProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductCategoryRequestValidationError) ErrorName() string {
	return "ListProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductCategoryRequestValidationError{}

// Validate checks the field values on ListProductCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductCategoryReplyMultiError, or nil if none found.
func (m *ListProductCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalSize

	// no validation rules for FilterSize

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductCategoryReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductCategoryReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductCategoryReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProductCategoryReplyMultiError(errors)
	}

	return nil
}

// ListProductCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by ListProductCategoryReply.ValidateAll() if the designated
// constraints aren't met.
type ListProductCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductCategoryReplyMultiError) AllErrors() []error { return m }

// ListProductCategoryReplyValidationError is the validation error returned by
// ListProductCategoryReply.Validate if the designated constraints aren't met.
type ListProductCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductCategoryReplyValidationError) ErrorName() string {
	return "ListProductCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductCategoryReplyValidationError{}

// Validate checks the field values on ProductCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCategoryMultiError, or nil if none found.
func (m *ProductCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Name

	// no validation rules for Path

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductCategoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductCategoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductCategoryValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Parent

	if len(errors) > 0 {
		return ProductCategoryMultiError(errors)
	}

	return nil
}

// ProductCategoryMultiError is an error wrapping multiple validation errors
// returned by ProductCategory.ValidateAll() if the designated constraints
// aren't met.
type ProductCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCategoryMultiError) AllErrors() []error { return m }

// ProductCategoryValidationError is the validation error returned by
// ProductCategory.Validate if the designated constraints aren't met.
type ProductCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCategoryValidationError) ErrorName() string { return "ProductCategoryValidationError" }

// Error satisfies the builtin error interface
func (e ProductCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCategoryValidationError{}
