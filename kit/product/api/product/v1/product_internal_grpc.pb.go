// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: product/api/product/v1/product_internal.proto

package v1

import (
	context "context"
	v1 "github.com/go-saas/kit/product/api/price/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductInternalService_ListInternalProduct_FullMethodName   = "/product.api.product.v1.ProductInternalService/ListInternalProduct"
	ProductInternalService_CreateInternalProduct_FullMethodName = "/product.api.product.v1.ProductInternalService/CreateInternalProduct"
	ProductInternalService_GetInternalProduct_FullMethodName    = "/product.api.product.v1.ProductInternalService/GetInternalProduct"
	ProductInternalService_UpdateInternalProduct_FullMethodName = "/product.api.product.v1.ProductInternalService/UpdateInternalProduct"
	ProductInternalService_DeleteInternalProduct_FullMethodName = "/product.api.product.v1.ProductInternalService/DeleteInternalProduct"
	ProductInternalService_GetInternalPrice_FullMethodName      = "/product.api.product.v1.ProductInternalService/GetInternalPrice"
)

// ProductInternalServiceClient is the client API for ProductInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductInternalServiceClient interface {
	ListInternalProduct(ctx context.Context, in *ListProductRequest, opts ...grpc.CallOption) (*ListProductReply, error)
	CreateInternalProduct(ctx context.Context, in *CreateInternalProductRequest, opts ...grpc.CallOption) (*Product, error)
	GetInternalProduct(ctx context.Context, in *GetInternalProductRequest, opts ...grpc.CallOption) (*Product, error)
	UpdateInternalProduct(ctx context.Context, in *UpdateInternalProductRequest, opts ...grpc.CallOption) (*Product, error)
	DeleteInternalProduct(ctx context.Context, in *DeleteInternalProductRequest, opts ...grpc.CallOption) (*DeleteInternalProductReply, error)
	GetInternalPrice(ctx context.Context, in *GetInternalPriceRequest, opts ...grpc.CallOption) (*v1.Price, error)
}

type productInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductInternalServiceClient(cc grpc.ClientConnInterface) ProductInternalServiceClient {
	return &productInternalServiceClient{cc}
}

func (c *productInternalServiceClient) ListInternalProduct(ctx context.Context, in *ListProductRequest, opts ...grpc.CallOption) (*ListProductReply, error) {
	out := new(ListProductReply)
	err := c.cc.Invoke(ctx, ProductInternalService_ListInternalProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productInternalServiceClient) CreateInternalProduct(ctx context.Context, in *CreateInternalProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductInternalService_CreateInternalProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productInternalServiceClient) GetInternalProduct(ctx context.Context, in *GetInternalProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductInternalService_GetInternalProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productInternalServiceClient) UpdateInternalProduct(ctx context.Context, in *UpdateInternalProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, ProductInternalService_UpdateInternalProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productInternalServiceClient) DeleteInternalProduct(ctx context.Context, in *DeleteInternalProductRequest, opts ...grpc.CallOption) (*DeleteInternalProductReply, error) {
	out := new(DeleteInternalProductReply)
	err := c.cc.Invoke(ctx, ProductInternalService_DeleteInternalProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productInternalServiceClient) GetInternalPrice(ctx context.Context, in *GetInternalPriceRequest, opts ...grpc.CallOption) (*v1.Price, error) {
	out := new(v1.Price)
	err := c.cc.Invoke(ctx, ProductInternalService_GetInternalPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductInternalServiceServer is the server API for ProductInternalService service.
// All implementations should embed UnimplementedProductInternalServiceServer
// for forward compatibility
type ProductInternalServiceServer interface {
	ListInternalProduct(context.Context, *ListProductRequest) (*ListProductReply, error)
	CreateInternalProduct(context.Context, *CreateInternalProductRequest) (*Product, error)
	GetInternalProduct(context.Context, *GetInternalProductRequest) (*Product, error)
	UpdateInternalProduct(context.Context, *UpdateInternalProductRequest) (*Product, error)
	DeleteInternalProduct(context.Context, *DeleteInternalProductRequest) (*DeleteInternalProductReply, error)
	GetInternalPrice(context.Context, *GetInternalPriceRequest) (*v1.Price, error)
}

// UnimplementedProductInternalServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProductInternalServiceServer struct {
}

func (UnimplementedProductInternalServiceServer) ListInternalProduct(context.Context, *ListProductRequest) (*ListProductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInternalProduct not implemented")
}
func (UnimplementedProductInternalServiceServer) CreateInternalProduct(context.Context, *CreateInternalProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInternalProduct not implemented")
}
func (UnimplementedProductInternalServiceServer) GetInternalProduct(context.Context, *GetInternalProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternalProduct not implemented")
}
func (UnimplementedProductInternalServiceServer) UpdateInternalProduct(context.Context, *UpdateInternalProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInternalProduct not implemented")
}
func (UnimplementedProductInternalServiceServer) DeleteInternalProduct(context.Context, *DeleteInternalProductRequest) (*DeleteInternalProductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInternalProduct not implemented")
}
func (UnimplementedProductInternalServiceServer) GetInternalPrice(context.Context, *GetInternalPriceRequest) (*v1.Price, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternalPrice not implemented")
}

// UnsafeProductInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductInternalServiceServer will
// result in compilation errors.
type UnsafeProductInternalServiceServer interface {
	mustEmbedUnimplementedProductInternalServiceServer()
}

func RegisterProductInternalServiceServer(s grpc.ServiceRegistrar, srv ProductInternalServiceServer) {
	s.RegisterService(&ProductInternalService_ServiceDesc, srv)
}

func _ProductInternalService_ListInternalProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInternalServiceServer).ListInternalProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductInternalService_ListInternalProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInternalServiceServer).ListInternalProduct(ctx, req.(*ListProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductInternalService_CreateInternalProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInternalProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInternalServiceServer).CreateInternalProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductInternalService_CreateInternalProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInternalServiceServer).CreateInternalProduct(ctx, req.(*CreateInternalProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductInternalService_GetInternalProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInternalProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInternalServiceServer).GetInternalProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductInternalService_GetInternalProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInternalServiceServer).GetInternalProduct(ctx, req.(*GetInternalProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductInternalService_UpdateInternalProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInternalProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInternalServiceServer).UpdateInternalProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductInternalService_UpdateInternalProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInternalServiceServer).UpdateInternalProduct(ctx, req.(*UpdateInternalProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductInternalService_DeleteInternalProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInternalProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInternalServiceServer).DeleteInternalProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductInternalService_DeleteInternalProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInternalServiceServer).DeleteInternalProduct(ctx, req.(*DeleteInternalProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductInternalService_GetInternalPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInternalPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInternalServiceServer).GetInternalPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductInternalService_GetInternalPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInternalServiceServer).GetInternalPrice(ctx, req.(*GetInternalPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductInternalService_ServiceDesc is the grpc.ServiceDesc for ProductInternalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductInternalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.api.product.v1.ProductInternalService",
	HandlerType: (*ProductInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInternalProduct",
			Handler:    _ProductInternalService_ListInternalProduct_Handler,
		},
		{
			MethodName: "CreateInternalProduct",
			Handler:    _ProductInternalService_CreateInternalProduct_Handler,
		},
		{
			MethodName: "GetInternalProduct",
			Handler:    _ProductInternalService_GetInternalProduct_Handler,
		},
		{
			MethodName: "UpdateInternalProduct",
			Handler:    _ProductInternalService_UpdateInternalProduct_Handler,
		},
		{
			MethodName: "DeleteInternalProduct",
			Handler:    _ProductInternalService_DeleteInternalProduct_Handler,
		},
		{
			MethodName: "GetInternalPrice",
			Handler:    _ProductInternalService_GetInternalPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product/api/product/v1/product_internal.proto",
}
