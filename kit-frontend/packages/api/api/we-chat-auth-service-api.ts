/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { V1WeChatLoginReply } from '../models';
// @ts-ignore
import { V1WechatMiniProgramCodeReq } from '../models';
// @ts-ignore
import { V1WechatMiniProgramPhoneCodeReq } from '../models';
/**
 * WeChatAuthServiceApi - axios parameter creator
 * @export
 */
export const WeChatAuthServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1WechatMiniProgramCodeReq} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weChatAuthServiceMiniProgramCode: async (body: V1WechatMiniProgramCodeReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('weChatAuthServiceMiniProgramCode', 'body', body)
            const localVarPath = `/v1/auth/wechat/mini/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1WechatMiniProgramPhoneCodeReq} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weChatAuthServiceMiniProgramPhoneCode: async (body: V1WechatMiniProgramPhoneCodeReq, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('weChatAuthServiceMiniProgramPhoneCode', 'body', body)
            const localVarPath = `/v1/auth/wechat/mini/phone-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeChatAuthServiceApi - functional programming interface
 * @export
 */
export const WeChatAuthServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WeChatAuthServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1WechatMiniProgramCodeReq} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weChatAuthServiceMiniProgramCode(body: V1WechatMiniProgramCodeReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1WeChatLoginReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weChatAuthServiceMiniProgramCode(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WeChatAuthServiceApi.weChatAuthServiceMiniProgramCode']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1WechatMiniProgramPhoneCodeReq} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weChatAuthServiceMiniProgramPhoneCode(body: V1WechatMiniProgramPhoneCodeReq, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1WeChatLoginReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.weChatAuthServiceMiniProgramPhoneCode(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WeChatAuthServiceApi.weChatAuthServiceMiniProgramPhoneCode']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WeChatAuthServiceApi - factory interface
 * @export
 */
export const WeChatAuthServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WeChatAuthServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {WeChatAuthServiceApiWeChatAuthServiceMiniProgramCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weChatAuthServiceMiniProgramCode(requestParameters: WeChatAuthServiceApiWeChatAuthServiceMiniProgramCodeRequest, options?: AxiosRequestConfig): AxiosPromise<V1WeChatLoginReply> {
            return localVarFp.weChatAuthServiceMiniProgramCode(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WeChatAuthServiceApiWeChatAuthServiceMiniProgramPhoneCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weChatAuthServiceMiniProgramPhoneCode(requestParameters: WeChatAuthServiceApiWeChatAuthServiceMiniProgramPhoneCodeRequest, options?: AxiosRequestConfig): AxiosPromise<V1WeChatLoginReply> {
            return localVarFp.weChatAuthServiceMiniProgramPhoneCode(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for weChatAuthServiceMiniProgramCode operation in WeChatAuthServiceApi.
 * @export
 * @interface WeChatAuthServiceApiWeChatAuthServiceMiniProgramCodeRequest
 */
export interface WeChatAuthServiceApiWeChatAuthServiceMiniProgramCodeRequest {
    /**
     * 
     * @type {V1WechatMiniProgramCodeReq}
     * @memberof WeChatAuthServiceApiWeChatAuthServiceMiniProgramCode
     */
    readonly body: V1WechatMiniProgramCodeReq
}

/**
 * Request parameters for weChatAuthServiceMiniProgramPhoneCode operation in WeChatAuthServiceApi.
 * @export
 * @interface WeChatAuthServiceApiWeChatAuthServiceMiniProgramPhoneCodeRequest
 */
export interface WeChatAuthServiceApiWeChatAuthServiceMiniProgramPhoneCodeRequest {
    /**
     * 
     * @type {V1WechatMiniProgramPhoneCodeReq}
     * @memberof WeChatAuthServiceApiWeChatAuthServiceMiniProgramPhoneCode
     */
    readonly body: V1WechatMiniProgramPhoneCodeReq
}

/**
 * WeChatAuthServiceApi - object-oriented interface
 * @export
 * @class WeChatAuthServiceApi
 * @extends {BaseAPI}
 */
export class WeChatAuthServiceApi extends BaseAPI {
    /**
     * 
     * @param {WeChatAuthServiceApiWeChatAuthServiceMiniProgramCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeChatAuthServiceApi
     */
    public weChatAuthServiceMiniProgramCode(requestParameters: WeChatAuthServiceApiWeChatAuthServiceMiniProgramCodeRequest, options?: AxiosRequestConfig) {
        return WeChatAuthServiceApiFp(this.configuration).weChatAuthServiceMiniProgramCode(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WeChatAuthServiceApiWeChatAuthServiceMiniProgramPhoneCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeChatAuthServiceApi
     */
    public weChatAuthServiceMiniProgramPhoneCode(requestParameters: WeChatAuthServiceApiWeChatAuthServiceMiniProgramPhoneCodeRequest, options?: AxiosRequestConfig) {
        return WeChatAuthServiceApiFp(this.configuration).weChatAuthServiceMiniProgramPhoneCode(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

