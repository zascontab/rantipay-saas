/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { PlanServiceUpdatePlanRequest } from '../models';
// @ts-ignore
import { V1CreatePlanRequest } from '../models';
// @ts-ignore
import { V1GetAvailablePlansReply } from '../models';
// @ts-ignore
import { V1ListPlanReply } from '../models';
// @ts-ignore
import { V1ListPlanRequest } from '../models';
// @ts-ignore
import { V1Plan } from '../models';
/**
 * PlanServiceApi - axios parameter creator
 * @export
 */
export const PlanServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1CreatePlanRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceCreatePlan: async (body: V1CreatePlanRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('planServiceCreatePlan', 'body', body)
            const localVarPath = `/v1/saas/plan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceDeletePlan: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('planServiceDeletePlan', 'key', key)
            const localVarPath = `/v1/saas/plan/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceGetAvailablePlans: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/saas/plans/available`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceGetPlan: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('planServiceGetPlan', 'key', key)
            const localVarPath = `/v1/saas/plan/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterKey$eq] 
         * @param {string} [filterKey$neq] 
         * @param {string} [filterKey$contains] 
         * @param {string} [filterKey$startsWith] 
         * @param {string} [filterKey$nstartsWith] 
         * @param {string} [filterKey$endsWith] 
         * @param {string} [filterKey$nendsWith] 
         * @param {Array<string>} [filterKey$in] 
         * @param {Array<string>} [filterKey$nin] 
         * @param {boolean} [filterKey$null] 
         * @param {boolean} [filterKey$nnull] 
         * @param {boolean} [filterKey$empty] 
         * @param {boolean} [filterKey$nempty] 
         * @param {string} [filterKey$like] 
         * @param {string} [filterDisplayName$eq] 
         * @param {string} [filterDisplayName$neq] 
         * @param {string} [filterDisplayName$contains] 
         * @param {string} [filterDisplayName$startsWith] 
         * @param {string} [filterDisplayName$nstartsWith] 
         * @param {string} [filterDisplayName$endsWith] 
         * @param {string} [filterDisplayName$nendsWith] 
         * @param {Array<string>} [filterDisplayName$in] 
         * @param {Array<string>} [filterDisplayName$nin] 
         * @param {boolean} [filterDisplayName$null] 
         * @param {boolean} [filterDisplayName$nnull] 
         * @param {boolean} [filterDisplayName$empty] 
         * @param {boolean} [filterDisplayName$nempty] 
         * @param {string} [filterDisplayName$like] 
         * @param {boolean} [filterActive$eq] 
         * @param {boolean} [filterActive$neq] 
         * @param {boolean} [filterActive$null] 
         * @param {boolean} [filterActive$nnull] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceListPlan: async (pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterKey$eq?: string, filterKey$neq?: string, filterKey$contains?: string, filterKey$startsWith?: string, filterKey$nstartsWith?: string, filterKey$endsWith?: string, filterKey$nendsWith?: string, filterKey$in?: Array<string>, filterKey$nin?: Array<string>, filterKey$null?: boolean, filterKey$nnull?: boolean, filterKey$empty?: boolean, filterKey$nempty?: boolean, filterKey$like?: string, filterDisplayName$eq?: string, filterDisplayName$neq?: string, filterDisplayName$contains?: string, filterDisplayName$startsWith?: string, filterDisplayName$nstartsWith?: string, filterDisplayName$endsWith?: string, filterDisplayName$nendsWith?: string, filterDisplayName$in?: Array<string>, filterDisplayName$nin?: Array<string>, filterDisplayName$null?: boolean, filterDisplayName$nnull?: boolean, filterDisplayName$empty?: boolean, filterDisplayName$nempty?: boolean, filterDisplayName$like?: string, filterActive$eq?: boolean, filterActive$neq?: boolean, filterActive$null?: boolean, filterActive$nnull?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/saas/plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageOffset !== undefined) {
                localVarQueryParameter['pageOffset'] = pageOffset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterKey$eq !== undefined) {
                localVarQueryParameter['filter.key.$eq'] = filterKey$eq;
            }

            if (filterKey$neq !== undefined) {
                localVarQueryParameter['filter.key.$neq'] = filterKey$neq;
            }

            if (filterKey$contains !== undefined) {
                localVarQueryParameter['filter.key.$contains'] = filterKey$contains;
            }

            if (filterKey$startsWith !== undefined) {
                localVarQueryParameter['filter.key.$starts_with'] = filterKey$startsWith;
            }

            if (filterKey$nstartsWith !== undefined) {
                localVarQueryParameter['filter.key.$nstarts_with'] = filterKey$nstartsWith;
            }

            if (filterKey$endsWith !== undefined) {
                localVarQueryParameter['filter.key.$ends_with'] = filterKey$endsWith;
            }

            if (filterKey$nendsWith !== undefined) {
                localVarQueryParameter['filter.key.$nends_with'] = filterKey$nendsWith;
            }

            if (filterKey$in) {
                localVarQueryParameter['filter.key.$in'] = filterKey$in;
            }

            if (filterKey$nin) {
                localVarQueryParameter['filter.key.$nin'] = filterKey$nin;
            }

            if (filterKey$null !== undefined) {
                localVarQueryParameter['filter.key.$null'] = filterKey$null;
            }

            if (filterKey$nnull !== undefined) {
                localVarQueryParameter['filter.key.$nnull'] = filterKey$nnull;
            }

            if (filterKey$empty !== undefined) {
                localVarQueryParameter['filter.key.$empty'] = filterKey$empty;
            }

            if (filterKey$nempty !== undefined) {
                localVarQueryParameter['filter.key.$nempty'] = filterKey$nempty;
            }

            if (filterKey$like !== undefined) {
                localVarQueryParameter['filter.key.$like'] = filterKey$like;
            }

            if (filterDisplayName$eq !== undefined) {
                localVarQueryParameter['filter.displayName.$eq'] = filterDisplayName$eq;
            }

            if (filterDisplayName$neq !== undefined) {
                localVarQueryParameter['filter.displayName.$neq'] = filterDisplayName$neq;
            }

            if (filterDisplayName$contains !== undefined) {
                localVarQueryParameter['filter.displayName.$contains'] = filterDisplayName$contains;
            }

            if (filterDisplayName$startsWith !== undefined) {
                localVarQueryParameter['filter.displayName.$starts_with'] = filterDisplayName$startsWith;
            }

            if (filterDisplayName$nstartsWith !== undefined) {
                localVarQueryParameter['filter.displayName.$nstarts_with'] = filterDisplayName$nstartsWith;
            }

            if (filterDisplayName$endsWith !== undefined) {
                localVarQueryParameter['filter.displayName.$ends_with'] = filterDisplayName$endsWith;
            }

            if (filterDisplayName$nendsWith !== undefined) {
                localVarQueryParameter['filter.displayName.$nends_with'] = filterDisplayName$nendsWith;
            }

            if (filterDisplayName$in) {
                localVarQueryParameter['filter.displayName.$in'] = filterDisplayName$in;
            }

            if (filterDisplayName$nin) {
                localVarQueryParameter['filter.displayName.$nin'] = filterDisplayName$nin;
            }

            if (filterDisplayName$null !== undefined) {
                localVarQueryParameter['filter.displayName.$null'] = filterDisplayName$null;
            }

            if (filterDisplayName$nnull !== undefined) {
                localVarQueryParameter['filter.displayName.$nnull'] = filterDisplayName$nnull;
            }

            if (filterDisplayName$empty !== undefined) {
                localVarQueryParameter['filter.displayName.$empty'] = filterDisplayName$empty;
            }

            if (filterDisplayName$nempty !== undefined) {
                localVarQueryParameter['filter.displayName.$nempty'] = filterDisplayName$nempty;
            }

            if (filterDisplayName$like !== undefined) {
                localVarQueryParameter['filter.displayName.$like'] = filterDisplayName$like;
            }

            if (filterActive$eq !== undefined) {
                localVarQueryParameter['filter.active.$eq'] = filterActive$eq;
            }

            if (filterActive$neq !== undefined) {
                localVarQueryParameter['filter.active.$neq'] = filterActive$neq;
            }

            if (filterActive$null !== undefined) {
                localVarQueryParameter['filter.active.$null'] = filterActive$null;
            }

            if (filterActive$nnull !== undefined) {
                localVarQueryParameter['filter.active.$nnull'] = filterActive$nnull;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1ListPlanRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceListPlan2: async (body: V1ListPlanRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('planServiceListPlan2', 'body', body)
            const localVarPath = `/v1/saas/plan/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} planKey 
         * @param {PlanServiceUpdatePlanRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceUpdatePlan: async (planKey: string, body: PlanServiceUpdatePlanRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planKey' is not null or undefined
            assertParamExists('planServiceUpdatePlan', 'planKey', planKey)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('planServiceUpdatePlan', 'body', body)
            const localVarPath = `/v1/saas/plan/{plan.key}`
                .replace(`{${"plan.key"}}`, encodeURIComponent(String(planKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} planKey 
         * @param {PlanServiceUpdatePlanRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceUpdatePlan2: async (planKey: string, body: PlanServiceUpdatePlanRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planKey' is not null or undefined
            assertParamExists('planServiceUpdatePlan2', 'planKey', planKey)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('planServiceUpdatePlan2', 'body', body)
            const localVarPath = `/v1/saas/plan/{plan.key}`
                .replace(`{${"plan.key"}}`, encodeURIComponent(String(planKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlanServiceApi - functional programming interface
 * @export
 */
export const PlanServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlanServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1CreatePlanRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planServiceCreatePlan(body: V1CreatePlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Plan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planServiceCreatePlan(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlanServiceApi.planServiceCreatePlan']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planServiceDeletePlan(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planServiceDeletePlan(key, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlanServiceApi.planServiceDeletePlan']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planServiceGetAvailablePlans(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetAvailablePlansReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planServiceGetAvailablePlans(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlanServiceApi.planServiceGetAvailablePlans']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planServiceGetPlan(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Plan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planServiceGetPlan(key, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlanServiceApi.planServiceGetPlan']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterKey$eq] 
         * @param {string} [filterKey$neq] 
         * @param {string} [filterKey$contains] 
         * @param {string} [filterKey$startsWith] 
         * @param {string} [filterKey$nstartsWith] 
         * @param {string} [filterKey$endsWith] 
         * @param {string} [filterKey$nendsWith] 
         * @param {Array<string>} [filterKey$in] 
         * @param {Array<string>} [filterKey$nin] 
         * @param {boolean} [filterKey$null] 
         * @param {boolean} [filterKey$nnull] 
         * @param {boolean} [filterKey$empty] 
         * @param {boolean} [filterKey$nempty] 
         * @param {string} [filterKey$like] 
         * @param {string} [filterDisplayName$eq] 
         * @param {string} [filterDisplayName$neq] 
         * @param {string} [filterDisplayName$contains] 
         * @param {string} [filterDisplayName$startsWith] 
         * @param {string} [filterDisplayName$nstartsWith] 
         * @param {string} [filterDisplayName$endsWith] 
         * @param {string} [filterDisplayName$nendsWith] 
         * @param {Array<string>} [filterDisplayName$in] 
         * @param {Array<string>} [filterDisplayName$nin] 
         * @param {boolean} [filterDisplayName$null] 
         * @param {boolean} [filterDisplayName$nnull] 
         * @param {boolean} [filterDisplayName$empty] 
         * @param {boolean} [filterDisplayName$nempty] 
         * @param {string} [filterDisplayName$like] 
         * @param {boolean} [filterActive$eq] 
         * @param {boolean} [filterActive$neq] 
         * @param {boolean} [filterActive$null] 
         * @param {boolean} [filterActive$nnull] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planServiceListPlan(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterKey$eq?: string, filterKey$neq?: string, filterKey$contains?: string, filterKey$startsWith?: string, filterKey$nstartsWith?: string, filterKey$endsWith?: string, filterKey$nendsWith?: string, filterKey$in?: Array<string>, filterKey$nin?: Array<string>, filterKey$null?: boolean, filterKey$nnull?: boolean, filterKey$empty?: boolean, filterKey$nempty?: boolean, filterKey$like?: string, filterDisplayName$eq?: string, filterDisplayName$neq?: string, filterDisplayName$contains?: string, filterDisplayName$startsWith?: string, filterDisplayName$nstartsWith?: string, filterDisplayName$endsWith?: string, filterDisplayName$nendsWith?: string, filterDisplayName$in?: Array<string>, filterDisplayName$nin?: Array<string>, filterDisplayName$null?: boolean, filterDisplayName$nnull?: boolean, filterDisplayName$empty?: boolean, filterDisplayName$nempty?: boolean, filterDisplayName$like?: string, filterActive$eq?: boolean, filterActive$neq?: boolean, filterActive$null?: boolean, filterActive$nnull?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListPlanReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planServiceListPlan(pageOffset, pageSize, search, sort, fields, filterKey$eq, filterKey$neq, filterKey$contains, filterKey$startsWith, filterKey$nstartsWith, filterKey$endsWith, filterKey$nendsWith, filterKey$in, filterKey$nin, filterKey$null, filterKey$nnull, filterKey$empty, filterKey$nempty, filterKey$like, filterDisplayName$eq, filterDisplayName$neq, filterDisplayName$contains, filterDisplayName$startsWith, filterDisplayName$nstartsWith, filterDisplayName$endsWith, filterDisplayName$nendsWith, filterDisplayName$in, filterDisplayName$nin, filterDisplayName$null, filterDisplayName$nnull, filterDisplayName$empty, filterDisplayName$nempty, filterDisplayName$like, filterActive$eq, filterActive$neq, filterActive$null, filterActive$nnull, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlanServiceApi.planServiceListPlan']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1ListPlanRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planServiceListPlan2(body: V1ListPlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListPlanReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planServiceListPlan2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlanServiceApi.planServiceListPlan2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} planKey 
         * @param {PlanServiceUpdatePlanRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planServiceUpdatePlan(planKey: string, body: PlanServiceUpdatePlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Plan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planServiceUpdatePlan(planKey, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlanServiceApi.planServiceUpdatePlan']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} planKey 
         * @param {PlanServiceUpdatePlanRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async planServiceUpdatePlan2(planKey: string, body: PlanServiceUpdatePlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Plan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.planServiceUpdatePlan2(planKey, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlanServiceApi.planServiceUpdatePlan2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PlanServiceApi - factory interface
 * @export
 */
export const PlanServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlanServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {PlanServiceApiPlanServiceCreatePlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceCreatePlan(requestParameters: PlanServiceApiPlanServiceCreatePlanRequest, options?: AxiosRequestConfig): AxiosPromise<V1Plan> {
            return localVarFp.planServiceCreatePlan(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlanServiceApiPlanServiceDeletePlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceDeletePlan(requestParameters: PlanServiceApiPlanServiceDeletePlanRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.planServiceDeletePlan(requestParameters.key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceGetAvailablePlans(options?: AxiosRequestConfig): AxiosPromise<V1GetAvailablePlansReply> {
            return localVarFp.planServiceGetAvailablePlans(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlanServiceApiPlanServiceGetPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceGetPlan(requestParameters: PlanServiceApiPlanServiceGetPlanRequest, options?: AxiosRequestConfig): AxiosPromise<V1Plan> {
            return localVarFp.planServiceGetPlan(requestParameters.key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlanServiceApiPlanServiceListPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceListPlan(requestParameters: PlanServiceApiPlanServiceListPlanRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1ListPlanReply> {
            return localVarFp.planServiceListPlan(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterKey$eq, requestParameters.filterKey$neq, requestParameters.filterKey$contains, requestParameters.filterKey$startsWith, requestParameters.filterKey$nstartsWith, requestParameters.filterKey$endsWith, requestParameters.filterKey$nendsWith, requestParameters.filterKey$in, requestParameters.filterKey$nin, requestParameters.filterKey$null, requestParameters.filterKey$nnull, requestParameters.filterKey$empty, requestParameters.filterKey$nempty, requestParameters.filterKey$like, requestParameters.filterDisplayName$eq, requestParameters.filterDisplayName$neq, requestParameters.filterDisplayName$contains, requestParameters.filterDisplayName$startsWith, requestParameters.filterDisplayName$nstartsWith, requestParameters.filterDisplayName$endsWith, requestParameters.filterDisplayName$nendsWith, requestParameters.filterDisplayName$in, requestParameters.filterDisplayName$nin, requestParameters.filterDisplayName$null, requestParameters.filterDisplayName$nnull, requestParameters.filterDisplayName$empty, requestParameters.filterDisplayName$nempty, requestParameters.filterDisplayName$like, requestParameters.filterActive$eq, requestParameters.filterActive$neq, requestParameters.filterActive$null, requestParameters.filterActive$nnull, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlanServiceApiPlanServiceListPlan2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceListPlan2(requestParameters: PlanServiceApiPlanServiceListPlan2Request, options?: AxiosRequestConfig): AxiosPromise<V1ListPlanReply> {
            return localVarFp.planServiceListPlan2(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlanServiceApiPlanServiceUpdatePlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceUpdatePlan(requestParameters: PlanServiceApiPlanServiceUpdatePlanRequest, options?: AxiosRequestConfig): AxiosPromise<V1Plan> {
            return localVarFp.planServiceUpdatePlan(requestParameters.planKey, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PlanServiceApiPlanServiceUpdatePlan2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        planServiceUpdatePlan2(requestParameters: PlanServiceApiPlanServiceUpdatePlan2Request, options?: AxiosRequestConfig): AxiosPromise<V1Plan> {
            return localVarFp.planServiceUpdatePlan2(requestParameters.planKey, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for planServiceCreatePlan operation in PlanServiceApi.
 * @export
 * @interface PlanServiceApiPlanServiceCreatePlanRequest
 */
export interface PlanServiceApiPlanServiceCreatePlanRequest {
    /**
     * 
     * @type {V1CreatePlanRequest}
     * @memberof PlanServiceApiPlanServiceCreatePlan
     */
    readonly body: V1CreatePlanRequest
}

/**
 * Request parameters for planServiceDeletePlan operation in PlanServiceApi.
 * @export
 * @interface PlanServiceApiPlanServiceDeletePlanRequest
 */
export interface PlanServiceApiPlanServiceDeletePlanRequest {
    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceDeletePlan
     */
    readonly key: string
}

/**
 * Request parameters for planServiceGetPlan operation in PlanServiceApi.
 * @export
 * @interface PlanServiceApiPlanServiceGetPlanRequest
 */
export interface PlanServiceApiPlanServiceGetPlanRequest {
    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceGetPlan
     */
    readonly key: string
}

/**
 * Request parameters for planServiceListPlan operation in PlanServiceApi.
 * @export
 * @interface PlanServiceApiPlanServiceListPlanRequest
 */
export interface PlanServiceApiPlanServiceListPlanRequest {
    /**
     * 
     * @type {number}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly pageOffset?: number

    /**
     * 
     * @type {number}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly fields?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$eq?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$neq?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$contains?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterKey$like?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$eq?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$neq?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$contains?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterDisplayName$like?: string

    /**
     * 
     * @type {boolean}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterActive$eq?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterActive$neq?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterActive$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof PlanServiceApiPlanServiceListPlan
     */
    readonly filterActive$nnull?: boolean
}

/**
 * Request parameters for planServiceListPlan2 operation in PlanServiceApi.
 * @export
 * @interface PlanServiceApiPlanServiceListPlan2Request
 */
export interface PlanServiceApiPlanServiceListPlan2Request {
    /**
     * 
     * @type {V1ListPlanRequest}
     * @memberof PlanServiceApiPlanServiceListPlan2
     */
    readonly body: V1ListPlanRequest
}

/**
 * Request parameters for planServiceUpdatePlan operation in PlanServiceApi.
 * @export
 * @interface PlanServiceApiPlanServiceUpdatePlanRequest
 */
export interface PlanServiceApiPlanServiceUpdatePlanRequest {
    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceUpdatePlan
     */
    readonly planKey: string

    /**
     * 
     * @type {PlanServiceUpdatePlanRequest}
     * @memberof PlanServiceApiPlanServiceUpdatePlan
     */
    readonly body: PlanServiceUpdatePlanRequest
}

/**
 * Request parameters for planServiceUpdatePlan2 operation in PlanServiceApi.
 * @export
 * @interface PlanServiceApiPlanServiceUpdatePlan2Request
 */
export interface PlanServiceApiPlanServiceUpdatePlan2Request {
    /**
     * 
     * @type {string}
     * @memberof PlanServiceApiPlanServiceUpdatePlan2
     */
    readonly planKey: string

    /**
     * 
     * @type {PlanServiceUpdatePlanRequest}
     * @memberof PlanServiceApiPlanServiceUpdatePlan2
     */
    readonly body: PlanServiceUpdatePlanRequest
}

/**
 * PlanServiceApi - object-oriented interface
 * @export
 * @class PlanServiceApi
 * @extends {BaseAPI}
 */
export class PlanServiceApi extends BaseAPI {
    /**
     * 
     * @param {PlanServiceApiPlanServiceCreatePlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanServiceApi
     */
    public planServiceCreatePlan(requestParameters: PlanServiceApiPlanServiceCreatePlanRequest, options?: AxiosRequestConfig) {
        return PlanServiceApiFp(this.configuration).planServiceCreatePlan(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlanServiceApiPlanServiceDeletePlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanServiceApi
     */
    public planServiceDeletePlan(requestParameters: PlanServiceApiPlanServiceDeletePlanRequest, options?: AxiosRequestConfig) {
        return PlanServiceApiFp(this.configuration).planServiceDeletePlan(requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanServiceApi
     */
    public planServiceGetAvailablePlans(options?: AxiosRequestConfig) {
        return PlanServiceApiFp(this.configuration).planServiceGetAvailablePlans(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlanServiceApiPlanServiceGetPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanServiceApi
     */
    public planServiceGetPlan(requestParameters: PlanServiceApiPlanServiceGetPlanRequest, options?: AxiosRequestConfig) {
        return PlanServiceApiFp(this.configuration).planServiceGetPlan(requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlanServiceApiPlanServiceListPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanServiceApi
     */
    public planServiceListPlan(requestParameters: PlanServiceApiPlanServiceListPlanRequest = {}, options?: AxiosRequestConfig) {
        return PlanServiceApiFp(this.configuration).planServiceListPlan(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterKey$eq, requestParameters.filterKey$neq, requestParameters.filterKey$contains, requestParameters.filterKey$startsWith, requestParameters.filterKey$nstartsWith, requestParameters.filterKey$endsWith, requestParameters.filterKey$nendsWith, requestParameters.filterKey$in, requestParameters.filterKey$nin, requestParameters.filterKey$null, requestParameters.filterKey$nnull, requestParameters.filterKey$empty, requestParameters.filterKey$nempty, requestParameters.filterKey$like, requestParameters.filterDisplayName$eq, requestParameters.filterDisplayName$neq, requestParameters.filterDisplayName$contains, requestParameters.filterDisplayName$startsWith, requestParameters.filterDisplayName$nstartsWith, requestParameters.filterDisplayName$endsWith, requestParameters.filterDisplayName$nendsWith, requestParameters.filterDisplayName$in, requestParameters.filterDisplayName$nin, requestParameters.filterDisplayName$null, requestParameters.filterDisplayName$nnull, requestParameters.filterDisplayName$empty, requestParameters.filterDisplayName$nempty, requestParameters.filterDisplayName$like, requestParameters.filterActive$eq, requestParameters.filterActive$neq, requestParameters.filterActive$null, requestParameters.filterActive$nnull, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlanServiceApiPlanServiceListPlan2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanServiceApi
     */
    public planServiceListPlan2(requestParameters: PlanServiceApiPlanServiceListPlan2Request, options?: AxiosRequestConfig) {
        return PlanServiceApiFp(this.configuration).planServiceListPlan2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlanServiceApiPlanServiceUpdatePlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanServiceApi
     */
    public planServiceUpdatePlan(requestParameters: PlanServiceApiPlanServiceUpdatePlanRequest, options?: AxiosRequestConfig) {
        return PlanServiceApiFp(this.configuration).planServiceUpdatePlan(requestParameters.planKey, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PlanServiceApiPlanServiceUpdatePlan2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlanServiceApi
     */
    public planServiceUpdatePlan2(requestParameters: PlanServiceApiPlanServiceUpdatePlan2Request, options?: AxiosRequestConfig) {
        return PlanServiceApiFp(this.configuration).planServiceUpdatePlan2(requestParameters.planKey, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

