/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { SubscriptionServiceUpdateMySubscriptionRequest } from '../models';
// @ts-ignore
import { SubscriptionServiceUpdateSubscriptionRequest } from '../models';
// @ts-ignore
import { Subscriptionv1Subscription } from '../models';
// @ts-ignore
import { V1CreateSubscriptionRequest } from '../models';
// @ts-ignore
import { V1ListMySubscriptionReply } from '../models';
// @ts-ignore
import { V1ListMySubscriptionRequest } from '../models';
// @ts-ignore
import { V1ListSubscriptionReply } from '../models';
// @ts-ignore
import { V1ListSubscriptionRequest } from '../models';
/**
 * SubscriptionServiceApi - axios parameter creator
 * @export
 */
export const SubscriptionServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceCancelMySubscription: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionServiceCancelMySubscription', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('subscriptionServiceCancelMySubscription', 'body', body)
            const localVarPath = `/v1/subscription/my/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceCancelSubscription: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionServiceCancelSubscription', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('subscriptionServiceCancelSubscription', 'body', body)
            const localVarPath = `/v1/subscription/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1CreateSubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceCreateSubscription: async (body: V1CreateSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('subscriptionServiceCreateSubscription', 'body', body)
            const localVarPath = `/v1/subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceGetMySubscription: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionServiceGetMySubscription', 'id', id)
            const localVarPath = `/v1/subscription/my/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceGetSubscription: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionServiceGetSubscription', 'id', id)
            const localVarPath = `/v1/subscription/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterUserId$eq] 
         * @param {string} [filterUserId$neq] 
         * @param {string} [filterUserId$contains] 
         * @param {string} [filterUserId$startsWith] 
         * @param {string} [filterUserId$nstartsWith] 
         * @param {string} [filterUserId$endsWith] 
         * @param {string} [filterUserId$nendsWith] 
         * @param {Array<string>} [filterUserId$in] 
         * @param {Array<string>} [filterUserId$nin] 
         * @param {boolean} [filterUserId$null] 
         * @param {boolean} [filterUserId$nnull] 
         * @param {boolean} [filterUserId$empty] 
         * @param {boolean} [filterUserId$nempty] 
         * @param {string} [filterUserId$like] 
         * @param {string} [filterProvider$eq] 
         * @param {string} [filterProvider$neq] 
         * @param {string} [filterProvider$contains] 
         * @param {string} [filterProvider$startsWith] 
         * @param {string} [filterProvider$nstartsWith] 
         * @param {string} [filterProvider$endsWith] 
         * @param {string} [filterProvider$nendsWith] 
         * @param {Array<string>} [filterProvider$in] 
         * @param {Array<string>} [filterProvider$nin] 
         * @param {boolean} [filterProvider$null] 
         * @param {boolean} [filterProvider$nnull] 
         * @param {boolean} [filterProvider$empty] 
         * @param {boolean} [filterProvider$nempty] 
         * @param {string} [filterProvider$like] 
         * @param {string} [filterProviderKey$eq] 
         * @param {string} [filterProviderKey$neq] 
         * @param {string} [filterProviderKey$contains] 
         * @param {string} [filterProviderKey$startsWith] 
         * @param {string} [filterProviderKey$nstartsWith] 
         * @param {string} [filterProviderKey$endsWith] 
         * @param {string} [filterProviderKey$nendsWith] 
         * @param {Array<string>} [filterProviderKey$in] 
         * @param {Array<string>} [filterProviderKey$nin] 
         * @param {boolean} [filterProviderKey$null] 
         * @param {boolean} [filterProviderKey$nnull] 
         * @param {boolean} [filterProviderKey$empty] 
         * @param {boolean} [filterProviderKey$nempty] 
         * @param {string} [filterProviderKey$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceListMySubscription: async (pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterUserId$eq?: string, filterUserId$neq?: string, filterUserId$contains?: string, filterUserId$startsWith?: string, filterUserId$nstartsWith?: string, filterUserId$endsWith?: string, filterUserId$nendsWith?: string, filterUserId$in?: Array<string>, filterUserId$nin?: Array<string>, filterUserId$null?: boolean, filterUserId$nnull?: boolean, filterUserId$empty?: boolean, filterUserId$nempty?: boolean, filterUserId$like?: string, filterProvider$eq?: string, filterProvider$neq?: string, filterProvider$contains?: string, filterProvider$startsWith?: string, filterProvider$nstartsWith?: string, filterProvider$endsWith?: string, filterProvider$nendsWith?: string, filterProvider$in?: Array<string>, filterProvider$nin?: Array<string>, filterProvider$null?: boolean, filterProvider$nnull?: boolean, filterProvider$empty?: boolean, filterProvider$nempty?: boolean, filterProvider$like?: string, filterProviderKey$eq?: string, filterProviderKey$neq?: string, filterProviderKey$contains?: string, filterProviderKey$startsWith?: string, filterProviderKey$nstartsWith?: string, filterProviderKey$endsWith?: string, filterProviderKey$nendsWith?: string, filterProviderKey$in?: Array<string>, filterProviderKey$nin?: Array<string>, filterProviderKey$null?: boolean, filterProviderKey$nnull?: boolean, filterProviderKey$empty?: boolean, filterProviderKey$nempty?: boolean, filterProviderKey$like?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriptions/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageOffset !== undefined) {
                localVarQueryParameter['pageOffset'] = pageOffset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterId$eq !== undefined) {
                localVarQueryParameter['filter.id.$eq'] = filterId$eq;
            }

            if (filterId$neq !== undefined) {
                localVarQueryParameter['filter.id.$neq'] = filterId$neq;
            }

            if (filterId$contains !== undefined) {
                localVarQueryParameter['filter.id.$contains'] = filterId$contains;
            }

            if (filterId$startsWith !== undefined) {
                localVarQueryParameter['filter.id.$starts_with'] = filterId$startsWith;
            }

            if (filterId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.id.$nstarts_with'] = filterId$nstartsWith;
            }

            if (filterId$endsWith !== undefined) {
                localVarQueryParameter['filter.id.$ends_with'] = filterId$endsWith;
            }

            if (filterId$nendsWith !== undefined) {
                localVarQueryParameter['filter.id.$nends_with'] = filterId$nendsWith;
            }

            if (filterId$in) {
                localVarQueryParameter['filter.id.$in'] = filterId$in;
            }

            if (filterId$nin) {
                localVarQueryParameter['filter.id.$nin'] = filterId$nin;
            }

            if (filterId$null !== undefined) {
                localVarQueryParameter['filter.id.$null'] = filterId$null;
            }

            if (filterId$nnull !== undefined) {
                localVarQueryParameter['filter.id.$nnull'] = filterId$nnull;
            }

            if (filterId$empty !== undefined) {
                localVarQueryParameter['filter.id.$empty'] = filterId$empty;
            }

            if (filterId$nempty !== undefined) {
                localVarQueryParameter['filter.id.$nempty'] = filterId$nempty;
            }

            if (filterId$like !== undefined) {
                localVarQueryParameter['filter.id.$like'] = filterId$like;
            }

            if (filterUserId$eq !== undefined) {
                localVarQueryParameter['filter.userId.$eq'] = filterUserId$eq;
            }

            if (filterUserId$neq !== undefined) {
                localVarQueryParameter['filter.userId.$neq'] = filterUserId$neq;
            }

            if (filterUserId$contains !== undefined) {
                localVarQueryParameter['filter.userId.$contains'] = filterUserId$contains;
            }

            if (filterUserId$startsWith !== undefined) {
                localVarQueryParameter['filter.userId.$starts_with'] = filterUserId$startsWith;
            }

            if (filterUserId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.userId.$nstarts_with'] = filterUserId$nstartsWith;
            }

            if (filterUserId$endsWith !== undefined) {
                localVarQueryParameter['filter.userId.$ends_with'] = filterUserId$endsWith;
            }

            if (filterUserId$nendsWith !== undefined) {
                localVarQueryParameter['filter.userId.$nends_with'] = filterUserId$nendsWith;
            }

            if (filterUserId$in) {
                localVarQueryParameter['filter.userId.$in'] = filterUserId$in;
            }

            if (filterUserId$nin) {
                localVarQueryParameter['filter.userId.$nin'] = filterUserId$nin;
            }

            if (filterUserId$null !== undefined) {
                localVarQueryParameter['filter.userId.$null'] = filterUserId$null;
            }

            if (filterUserId$nnull !== undefined) {
                localVarQueryParameter['filter.userId.$nnull'] = filterUserId$nnull;
            }

            if (filterUserId$empty !== undefined) {
                localVarQueryParameter['filter.userId.$empty'] = filterUserId$empty;
            }

            if (filterUserId$nempty !== undefined) {
                localVarQueryParameter['filter.userId.$nempty'] = filterUserId$nempty;
            }

            if (filterUserId$like !== undefined) {
                localVarQueryParameter['filter.userId.$like'] = filterUserId$like;
            }

            if (filterProvider$eq !== undefined) {
                localVarQueryParameter['filter.provider.$eq'] = filterProvider$eq;
            }

            if (filterProvider$neq !== undefined) {
                localVarQueryParameter['filter.provider.$neq'] = filterProvider$neq;
            }

            if (filterProvider$contains !== undefined) {
                localVarQueryParameter['filter.provider.$contains'] = filterProvider$contains;
            }

            if (filterProvider$startsWith !== undefined) {
                localVarQueryParameter['filter.provider.$starts_with'] = filterProvider$startsWith;
            }

            if (filterProvider$nstartsWith !== undefined) {
                localVarQueryParameter['filter.provider.$nstarts_with'] = filterProvider$nstartsWith;
            }

            if (filterProvider$endsWith !== undefined) {
                localVarQueryParameter['filter.provider.$ends_with'] = filterProvider$endsWith;
            }

            if (filterProvider$nendsWith !== undefined) {
                localVarQueryParameter['filter.provider.$nends_with'] = filterProvider$nendsWith;
            }

            if (filterProvider$in) {
                localVarQueryParameter['filter.provider.$in'] = filterProvider$in;
            }

            if (filterProvider$nin) {
                localVarQueryParameter['filter.provider.$nin'] = filterProvider$nin;
            }

            if (filterProvider$null !== undefined) {
                localVarQueryParameter['filter.provider.$null'] = filterProvider$null;
            }

            if (filterProvider$nnull !== undefined) {
                localVarQueryParameter['filter.provider.$nnull'] = filterProvider$nnull;
            }

            if (filterProvider$empty !== undefined) {
                localVarQueryParameter['filter.provider.$empty'] = filterProvider$empty;
            }

            if (filterProvider$nempty !== undefined) {
                localVarQueryParameter['filter.provider.$nempty'] = filterProvider$nempty;
            }

            if (filterProvider$like !== undefined) {
                localVarQueryParameter['filter.provider.$like'] = filterProvider$like;
            }

            if (filterProviderKey$eq !== undefined) {
                localVarQueryParameter['filter.providerKey.$eq'] = filterProviderKey$eq;
            }

            if (filterProviderKey$neq !== undefined) {
                localVarQueryParameter['filter.providerKey.$neq'] = filterProviderKey$neq;
            }

            if (filterProviderKey$contains !== undefined) {
                localVarQueryParameter['filter.providerKey.$contains'] = filterProviderKey$contains;
            }

            if (filterProviderKey$startsWith !== undefined) {
                localVarQueryParameter['filter.providerKey.$starts_with'] = filterProviderKey$startsWith;
            }

            if (filterProviderKey$nstartsWith !== undefined) {
                localVarQueryParameter['filter.providerKey.$nstarts_with'] = filterProviderKey$nstartsWith;
            }

            if (filterProviderKey$endsWith !== undefined) {
                localVarQueryParameter['filter.providerKey.$ends_with'] = filterProviderKey$endsWith;
            }

            if (filterProviderKey$nendsWith !== undefined) {
                localVarQueryParameter['filter.providerKey.$nends_with'] = filterProviderKey$nendsWith;
            }

            if (filterProviderKey$in) {
                localVarQueryParameter['filter.providerKey.$in'] = filterProviderKey$in;
            }

            if (filterProviderKey$nin) {
                localVarQueryParameter['filter.providerKey.$nin'] = filterProviderKey$nin;
            }

            if (filterProviderKey$null !== undefined) {
                localVarQueryParameter['filter.providerKey.$null'] = filterProviderKey$null;
            }

            if (filterProviderKey$nnull !== undefined) {
                localVarQueryParameter['filter.providerKey.$nnull'] = filterProviderKey$nnull;
            }

            if (filterProviderKey$empty !== undefined) {
                localVarQueryParameter['filter.providerKey.$empty'] = filterProviderKey$empty;
            }

            if (filterProviderKey$nempty !== undefined) {
                localVarQueryParameter['filter.providerKey.$nempty'] = filterProviderKey$nempty;
            }

            if (filterProviderKey$like !== undefined) {
                localVarQueryParameter['filter.providerKey.$like'] = filterProviderKey$like;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1ListMySubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceListMySubscription2: async (body: V1ListMySubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('subscriptionServiceListMySubscription2', 'body', body)
            const localVarPath = `/v1/subscription/my/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterUserId$eq] 
         * @param {string} [filterUserId$neq] 
         * @param {string} [filterUserId$contains] 
         * @param {string} [filterUserId$startsWith] 
         * @param {string} [filterUserId$nstartsWith] 
         * @param {string} [filterUserId$endsWith] 
         * @param {string} [filterUserId$nendsWith] 
         * @param {Array<string>} [filterUserId$in] 
         * @param {Array<string>} [filterUserId$nin] 
         * @param {boolean} [filterUserId$null] 
         * @param {boolean} [filterUserId$nnull] 
         * @param {boolean} [filterUserId$empty] 
         * @param {boolean} [filterUserId$nempty] 
         * @param {string} [filterUserId$like] 
         * @param {string} [filterProvider$eq] 
         * @param {string} [filterProvider$neq] 
         * @param {string} [filterProvider$contains] 
         * @param {string} [filterProvider$startsWith] 
         * @param {string} [filterProvider$nstartsWith] 
         * @param {string} [filterProvider$endsWith] 
         * @param {string} [filterProvider$nendsWith] 
         * @param {Array<string>} [filterProvider$in] 
         * @param {Array<string>} [filterProvider$nin] 
         * @param {boolean} [filterProvider$null] 
         * @param {boolean} [filterProvider$nnull] 
         * @param {boolean} [filterProvider$empty] 
         * @param {boolean} [filterProvider$nempty] 
         * @param {string} [filterProvider$like] 
         * @param {string} [filterProviderKey$eq] 
         * @param {string} [filterProviderKey$neq] 
         * @param {string} [filterProviderKey$contains] 
         * @param {string} [filterProviderKey$startsWith] 
         * @param {string} [filterProviderKey$nstartsWith] 
         * @param {string} [filterProviderKey$endsWith] 
         * @param {string} [filterProviderKey$nendsWith] 
         * @param {Array<string>} [filterProviderKey$in] 
         * @param {Array<string>} [filterProviderKey$nin] 
         * @param {boolean} [filterProviderKey$null] 
         * @param {boolean} [filterProviderKey$nnull] 
         * @param {boolean} [filterProviderKey$empty] 
         * @param {boolean} [filterProviderKey$nempty] 
         * @param {string} [filterProviderKey$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceListSubscription: async (pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterUserId$eq?: string, filterUserId$neq?: string, filterUserId$contains?: string, filterUserId$startsWith?: string, filterUserId$nstartsWith?: string, filterUserId$endsWith?: string, filterUserId$nendsWith?: string, filterUserId$in?: Array<string>, filterUserId$nin?: Array<string>, filterUserId$null?: boolean, filterUserId$nnull?: boolean, filterUserId$empty?: boolean, filterUserId$nempty?: boolean, filterUserId$like?: string, filterProvider$eq?: string, filterProvider$neq?: string, filterProvider$contains?: string, filterProvider$startsWith?: string, filterProvider$nstartsWith?: string, filterProvider$endsWith?: string, filterProvider$nendsWith?: string, filterProvider$in?: Array<string>, filterProvider$nin?: Array<string>, filterProvider$null?: boolean, filterProvider$nnull?: boolean, filterProvider$empty?: boolean, filterProvider$nempty?: boolean, filterProvider$like?: string, filterProviderKey$eq?: string, filterProviderKey$neq?: string, filterProviderKey$contains?: string, filterProviderKey$startsWith?: string, filterProviderKey$nstartsWith?: string, filterProviderKey$endsWith?: string, filterProviderKey$nendsWith?: string, filterProviderKey$in?: Array<string>, filterProviderKey$nin?: Array<string>, filterProviderKey$null?: boolean, filterProviderKey$nnull?: boolean, filterProviderKey$empty?: boolean, filterProviderKey$nempty?: boolean, filterProviderKey$like?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageOffset !== undefined) {
                localVarQueryParameter['pageOffset'] = pageOffset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterId$eq !== undefined) {
                localVarQueryParameter['filter.id.$eq'] = filterId$eq;
            }

            if (filterId$neq !== undefined) {
                localVarQueryParameter['filter.id.$neq'] = filterId$neq;
            }

            if (filterId$contains !== undefined) {
                localVarQueryParameter['filter.id.$contains'] = filterId$contains;
            }

            if (filterId$startsWith !== undefined) {
                localVarQueryParameter['filter.id.$starts_with'] = filterId$startsWith;
            }

            if (filterId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.id.$nstarts_with'] = filterId$nstartsWith;
            }

            if (filterId$endsWith !== undefined) {
                localVarQueryParameter['filter.id.$ends_with'] = filterId$endsWith;
            }

            if (filterId$nendsWith !== undefined) {
                localVarQueryParameter['filter.id.$nends_with'] = filterId$nendsWith;
            }

            if (filterId$in) {
                localVarQueryParameter['filter.id.$in'] = filterId$in;
            }

            if (filterId$nin) {
                localVarQueryParameter['filter.id.$nin'] = filterId$nin;
            }

            if (filterId$null !== undefined) {
                localVarQueryParameter['filter.id.$null'] = filterId$null;
            }

            if (filterId$nnull !== undefined) {
                localVarQueryParameter['filter.id.$nnull'] = filterId$nnull;
            }

            if (filterId$empty !== undefined) {
                localVarQueryParameter['filter.id.$empty'] = filterId$empty;
            }

            if (filterId$nempty !== undefined) {
                localVarQueryParameter['filter.id.$nempty'] = filterId$nempty;
            }

            if (filterId$like !== undefined) {
                localVarQueryParameter['filter.id.$like'] = filterId$like;
            }

            if (filterUserId$eq !== undefined) {
                localVarQueryParameter['filter.userId.$eq'] = filterUserId$eq;
            }

            if (filterUserId$neq !== undefined) {
                localVarQueryParameter['filter.userId.$neq'] = filterUserId$neq;
            }

            if (filterUserId$contains !== undefined) {
                localVarQueryParameter['filter.userId.$contains'] = filterUserId$contains;
            }

            if (filterUserId$startsWith !== undefined) {
                localVarQueryParameter['filter.userId.$starts_with'] = filterUserId$startsWith;
            }

            if (filterUserId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.userId.$nstarts_with'] = filterUserId$nstartsWith;
            }

            if (filterUserId$endsWith !== undefined) {
                localVarQueryParameter['filter.userId.$ends_with'] = filterUserId$endsWith;
            }

            if (filterUserId$nendsWith !== undefined) {
                localVarQueryParameter['filter.userId.$nends_with'] = filterUserId$nendsWith;
            }

            if (filterUserId$in) {
                localVarQueryParameter['filter.userId.$in'] = filterUserId$in;
            }

            if (filterUserId$nin) {
                localVarQueryParameter['filter.userId.$nin'] = filterUserId$nin;
            }

            if (filterUserId$null !== undefined) {
                localVarQueryParameter['filter.userId.$null'] = filterUserId$null;
            }

            if (filterUserId$nnull !== undefined) {
                localVarQueryParameter['filter.userId.$nnull'] = filterUserId$nnull;
            }

            if (filterUserId$empty !== undefined) {
                localVarQueryParameter['filter.userId.$empty'] = filterUserId$empty;
            }

            if (filterUserId$nempty !== undefined) {
                localVarQueryParameter['filter.userId.$nempty'] = filterUserId$nempty;
            }

            if (filterUserId$like !== undefined) {
                localVarQueryParameter['filter.userId.$like'] = filterUserId$like;
            }

            if (filterProvider$eq !== undefined) {
                localVarQueryParameter['filter.provider.$eq'] = filterProvider$eq;
            }

            if (filterProvider$neq !== undefined) {
                localVarQueryParameter['filter.provider.$neq'] = filterProvider$neq;
            }

            if (filterProvider$contains !== undefined) {
                localVarQueryParameter['filter.provider.$contains'] = filterProvider$contains;
            }

            if (filterProvider$startsWith !== undefined) {
                localVarQueryParameter['filter.provider.$starts_with'] = filterProvider$startsWith;
            }

            if (filterProvider$nstartsWith !== undefined) {
                localVarQueryParameter['filter.provider.$nstarts_with'] = filterProvider$nstartsWith;
            }

            if (filterProvider$endsWith !== undefined) {
                localVarQueryParameter['filter.provider.$ends_with'] = filterProvider$endsWith;
            }

            if (filterProvider$nendsWith !== undefined) {
                localVarQueryParameter['filter.provider.$nends_with'] = filterProvider$nendsWith;
            }

            if (filterProvider$in) {
                localVarQueryParameter['filter.provider.$in'] = filterProvider$in;
            }

            if (filterProvider$nin) {
                localVarQueryParameter['filter.provider.$nin'] = filterProvider$nin;
            }

            if (filterProvider$null !== undefined) {
                localVarQueryParameter['filter.provider.$null'] = filterProvider$null;
            }

            if (filterProvider$nnull !== undefined) {
                localVarQueryParameter['filter.provider.$nnull'] = filterProvider$nnull;
            }

            if (filterProvider$empty !== undefined) {
                localVarQueryParameter['filter.provider.$empty'] = filterProvider$empty;
            }

            if (filterProvider$nempty !== undefined) {
                localVarQueryParameter['filter.provider.$nempty'] = filterProvider$nempty;
            }

            if (filterProvider$like !== undefined) {
                localVarQueryParameter['filter.provider.$like'] = filterProvider$like;
            }

            if (filterProviderKey$eq !== undefined) {
                localVarQueryParameter['filter.providerKey.$eq'] = filterProviderKey$eq;
            }

            if (filterProviderKey$neq !== undefined) {
                localVarQueryParameter['filter.providerKey.$neq'] = filterProviderKey$neq;
            }

            if (filterProviderKey$contains !== undefined) {
                localVarQueryParameter['filter.providerKey.$contains'] = filterProviderKey$contains;
            }

            if (filterProviderKey$startsWith !== undefined) {
                localVarQueryParameter['filter.providerKey.$starts_with'] = filterProviderKey$startsWith;
            }

            if (filterProviderKey$nstartsWith !== undefined) {
                localVarQueryParameter['filter.providerKey.$nstarts_with'] = filterProviderKey$nstartsWith;
            }

            if (filterProviderKey$endsWith !== undefined) {
                localVarQueryParameter['filter.providerKey.$ends_with'] = filterProviderKey$endsWith;
            }

            if (filterProviderKey$nendsWith !== undefined) {
                localVarQueryParameter['filter.providerKey.$nends_with'] = filterProviderKey$nendsWith;
            }

            if (filterProviderKey$in) {
                localVarQueryParameter['filter.providerKey.$in'] = filterProviderKey$in;
            }

            if (filterProviderKey$nin) {
                localVarQueryParameter['filter.providerKey.$nin'] = filterProviderKey$nin;
            }

            if (filterProviderKey$null !== undefined) {
                localVarQueryParameter['filter.providerKey.$null'] = filterProviderKey$null;
            }

            if (filterProviderKey$nnull !== undefined) {
                localVarQueryParameter['filter.providerKey.$nnull'] = filterProviderKey$nnull;
            }

            if (filterProviderKey$empty !== undefined) {
                localVarQueryParameter['filter.providerKey.$empty'] = filterProviderKey$empty;
            }

            if (filterProviderKey$nempty !== undefined) {
                localVarQueryParameter['filter.providerKey.$nempty'] = filterProviderKey$nempty;
            }

            if (filterProviderKey$like !== undefined) {
                localVarQueryParameter['filter.providerKey.$like'] = filterProviderKey$like;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1ListSubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceListSubscription2: async (body: V1ListSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('subscriptionServiceListSubscription2', 'body', body)
            const localVarPath = `/v1/subscription/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} subscriptionId 
         * @param {SubscriptionServiceUpdateMySubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceUpdateMySubscription: async (subscriptionId: string, body: SubscriptionServiceUpdateMySubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('subscriptionServiceUpdateMySubscription', 'subscriptionId', subscriptionId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('subscriptionServiceUpdateMySubscription', 'body', body)
            const localVarPath = `/v1/subscription/my/{subscription.id}`
                .replace(`{${"subscription.id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} subscriptionId 
         * @param {SubscriptionServiceUpdateSubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceUpdateSubscription: async (subscriptionId: string, body: SubscriptionServiceUpdateSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('subscriptionServiceUpdateSubscription', 'subscriptionId', subscriptionId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('subscriptionServiceUpdateSubscription', 'body', body)
            const localVarPath = `/v1/subscription/{subscription.id}`
                .replace(`{${"subscription.id"}}`, encodeURIComponent(String(subscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionServiceApi - functional programming interface
 * @export
 */
export const SubscriptionServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionServiceCancelMySubscription(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscriptionv1Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionServiceCancelMySubscription(id, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SubscriptionServiceApi.subscriptionServiceCancelMySubscription']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionServiceCancelSubscription(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscriptionv1Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionServiceCancelSubscription(id, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SubscriptionServiceApi.subscriptionServiceCancelSubscription']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1CreateSubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionServiceCreateSubscription(body: V1CreateSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscriptionv1Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionServiceCreateSubscription(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SubscriptionServiceApi.subscriptionServiceCreateSubscription']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionServiceGetMySubscription(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscriptionv1Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionServiceGetMySubscription(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SubscriptionServiceApi.subscriptionServiceGetMySubscription']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionServiceGetSubscription(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscriptionv1Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionServiceGetSubscription(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SubscriptionServiceApi.subscriptionServiceGetSubscription']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterUserId$eq] 
         * @param {string} [filterUserId$neq] 
         * @param {string} [filterUserId$contains] 
         * @param {string} [filterUserId$startsWith] 
         * @param {string} [filterUserId$nstartsWith] 
         * @param {string} [filterUserId$endsWith] 
         * @param {string} [filterUserId$nendsWith] 
         * @param {Array<string>} [filterUserId$in] 
         * @param {Array<string>} [filterUserId$nin] 
         * @param {boolean} [filterUserId$null] 
         * @param {boolean} [filterUserId$nnull] 
         * @param {boolean} [filterUserId$empty] 
         * @param {boolean} [filterUserId$nempty] 
         * @param {string} [filterUserId$like] 
         * @param {string} [filterProvider$eq] 
         * @param {string} [filterProvider$neq] 
         * @param {string} [filterProvider$contains] 
         * @param {string} [filterProvider$startsWith] 
         * @param {string} [filterProvider$nstartsWith] 
         * @param {string} [filterProvider$endsWith] 
         * @param {string} [filterProvider$nendsWith] 
         * @param {Array<string>} [filterProvider$in] 
         * @param {Array<string>} [filterProvider$nin] 
         * @param {boolean} [filterProvider$null] 
         * @param {boolean} [filterProvider$nnull] 
         * @param {boolean} [filterProvider$empty] 
         * @param {boolean} [filterProvider$nempty] 
         * @param {string} [filterProvider$like] 
         * @param {string} [filterProviderKey$eq] 
         * @param {string} [filterProviderKey$neq] 
         * @param {string} [filterProviderKey$contains] 
         * @param {string} [filterProviderKey$startsWith] 
         * @param {string} [filterProviderKey$nstartsWith] 
         * @param {string} [filterProviderKey$endsWith] 
         * @param {string} [filterProviderKey$nendsWith] 
         * @param {Array<string>} [filterProviderKey$in] 
         * @param {Array<string>} [filterProviderKey$nin] 
         * @param {boolean} [filterProviderKey$null] 
         * @param {boolean} [filterProviderKey$nnull] 
         * @param {boolean} [filterProviderKey$empty] 
         * @param {boolean} [filterProviderKey$nempty] 
         * @param {string} [filterProviderKey$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionServiceListMySubscription(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterUserId$eq?: string, filterUserId$neq?: string, filterUserId$contains?: string, filterUserId$startsWith?: string, filterUserId$nstartsWith?: string, filterUserId$endsWith?: string, filterUserId$nendsWith?: string, filterUserId$in?: Array<string>, filterUserId$nin?: Array<string>, filterUserId$null?: boolean, filterUserId$nnull?: boolean, filterUserId$empty?: boolean, filterUserId$nempty?: boolean, filterUserId$like?: string, filterProvider$eq?: string, filterProvider$neq?: string, filterProvider$contains?: string, filterProvider$startsWith?: string, filterProvider$nstartsWith?: string, filterProvider$endsWith?: string, filterProvider$nendsWith?: string, filterProvider$in?: Array<string>, filterProvider$nin?: Array<string>, filterProvider$null?: boolean, filterProvider$nnull?: boolean, filterProvider$empty?: boolean, filterProvider$nempty?: boolean, filterProvider$like?: string, filterProviderKey$eq?: string, filterProviderKey$neq?: string, filterProviderKey$contains?: string, filterProviderKey$startsWith?: string, filterProviderKey$nstartsWith?: string, filterProviderKey$endsWith?: string, filterProviderKey$nendsWith?: string, filterProviderKey$in?: Array<string>, filterProviderKey$nin?: Array<string>, filterProviderKey$null?: boolean, filterProviderKey$nnull?: boolean, filterProviderKey$empty?: boolean, filterProviderKey$nempty?: boolean, filterProviderKey$like?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListMySubscriptionReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionServiceListMySubscription(pageOffset, pageSize, search, sort, fields, filterId$eq, filterId$neq, filterId$contains, filterId$startsWith, filterId$nstartsWith, filterId$endsWith, filterId$nendsWith, filterId$in, filterId$nin, filterId$null, filterId$nnull, filterId$empty, filterId$nempty, filterId$like, filterUserId$eq, filterUserId$neq, filterUserId$contains, filterUserId$startsWith, filterUserId$nstartsWith, filterUserId$endsWith, filterUserId$nendsWith, filterUserId$in, filterUserId$nin, filterUserId$null, filterUserId$nnull, filterUserId$empty, filterUserId$nempty, filterUserId$like, filterProvider$eq, filterProvider$neq, filterProvider$contains, filterProvider$startsWith, filterProvider$nstartsWith, filterProvider$endsWith, filterProvider$nendsWith, filterProvider$in, filterProvider$nin, filterProvider$null, filterProvider$nnull, filterProvider$empty, filterProvider$nempty, filterProvider$like, filterProviderKey$eq, filterProviderKey$neq, filterProviderKey$contains, filterProviderKey$startsWith, filterProviderKey$nstartsWith, filterProviderKey$endsWith, filterProviderKey$nendsWith, filterProviderKey$in, filterProviderKey$nin, filterProviderKey$null, filterProviderKey$nnull, filterProviderKey$empty, filterProviderKey$nempty, filterProviderKey$like, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SubscriptionServiceApi.subscriptionServiceListMySubscription']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1ListMySubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionServiceListMySubscription2(body: V1ListMySubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListMySubscriptionReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionServiceListMySubscription2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SubscriptionServiceApi.subscriptionServiceListMySubscription2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterUserId$eq] 
         * @param {string} [filterUserId$neq] 
         * @param {string} [filterUserId$contains] 
         * @param {string} [filterUserId$startsWith] 
         * @param {string} [filterUserId$nstartsWith] 
         * @param {string} [filterUserId$endsWith] 
         * @param {string} [filterUserId$nendsWith] 
         * @param {Array<string>} [filterUserId$in] 
         * @param {Array<string>} [filterUserId$nin] 
         * @param {boolean} [filterUserId$null] 
         * @param {boolean} [filterUserId$nnull] 
         * @param {boolean} [filterUserId$empty] 
         * @param {boolean} [filterUserId$nempty] 
         * @param {string} [filterUserId$like] 
         * @param {string} [filterProvider$eq] 
         * @param {string} [filterProvider$neq] 
         * @param {string} [filterProvider$contains] 
         * @param {string} [filterProvider$startsWith] 
         * @param {string} [filterProvider$nstartsWith] 
         * @param {string} [filterProvider$endsWith] 
         * @param {string} [filterProvider$nendsWith] 
         * @param {Array<string>} [filterProvider$in] 
         * @param {Array<string>} [filterProvider$nin] 
         * @param {boolean} [filterProvider$null] 
         * @param {boolean} [filterProvider$nnull] 
         * @param {boolean} [filterProvider$empty] 
         * @param {boolean} [filterProvider$nempty] 
         * @param {string} [filterProvider$like] 
         * @param {string} [filterProviderKey$eq] 
         * @param {string} [filterProviderKey$neq] 
         * @param {string} [filterProviderKey$contains] 
         * @param {string} [filterProviderKey$startsWith] 
         * @param {string} [filterProviderKey$nstartsWith] 
         * @param {string} [filterProviderKey$endsWith] 
         * @param {string} [filterProviderKey$nendsWith] 
         * @param {Array<string>} [filterProviderKey$in] 
         * @param {Array<string>} [filterProviderKey$nin] 
         * @param {boolean} [filterProviderKey$null] 
         * @param {boolean} [filterProviderKey$nnull] 
         * @param {boolean} [filterProviderKey$empty] 
         * @param {boolean} [filterProviderKey$nempty] 
         * @param {string} [filterProviderKey$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionServiceListSubscription(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterUserId$eq?: string, filterUserId$neq?: string, filterUserId$contains?: string, filterUserId$startsWith?: string, filterUserId$nstartsWith?: string, filterUserId$endsWith?: string, filterUserId$nendsWith?: string, filterUserId$in?: Array<string>, filterUserId$nin?: Array<string>, filterUserId$null?: boolean, filterUserId$nnull?: boolean, filterUserId$empty?: boolean, filterUserId$nempty?: boolean, filterUserId$like?: string, filterProvider$eq?: string, filterProvider$neq?: string, filterProvider$contains?: string, filterProvider$startsWith?: string, filterProvider$nstartsWith?: string, filterProvider$endsWith?: string, filterProvider$nendsWith?: string, filterProvider$in?: Array<string>, filterProvider$nin?: Array<string>, filterProvider$null?: boolean, filterProvider$nnull?: boolean, filterProvider$empty?: boolean, filterProvider$nempty?: boolean, filterProvider$like?: string, filterProviderKey$eq?: string, filterProviderKey$neq?: string, filterProviderKey$contains?: string, filterProviderKey$startsWith?: string, filterProviderKey$nstartsWith?: string, filterProviderKey$endsWith?: string, filterProviderKey$nendsWith?: string, filterProviderKey$in?: Array<string>, filterProviderKey$nin?: Array<string>, filterProviderKey$null?: boolean, filterProviderKey$nnull?: boolean, filterProviderKey$empty?: boolean, filterProviderKey$nempty?: boolean, filterProviderKey$like?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListSubscriptionReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionServiceListSubscription(pageOffset, pageSize, search, sort, fields, filterId$eq, filterId$neq, filterId$contains, filterId$startsWith, filterId$nstartsWith, filterId$endsWith, filterId$nendsWith, filterId$in, filterId$nin, filterId$null, filterId$nnull, filterId$empty, filterId$nempty, filterId$like, filterUserId$eq, filterUserId$neq, filterUserId$contains, filterUserId$startsWith, filterUserId$nstartsWith, filterUserId$endsWith, filterUserId$nendsWith, filterUserId$in, filterUserId$nin, filterUserId$null, filterUserId$nnull, filterUserId$empty, filterUserId$nempty, filterUserId$like, filterProvider$eq, filterProvider$neq, filterProvider$contains, filterProvider$startsWith, filterProvider$nstartsWith, filterProvider$endsWith, filterProvider$nendsWith, filterProvider$in, filterProvider$nin, filterProvider$null, filterProvider$nnull, filterProvider$empty, filterProvider$nempty, filterProvider$like, filterProviderKey$eq, filterProviderKey$neq, filterProviderKey$contains, filterProviderKey$startsWith, filterProviderKey$nstartsWith, filterProviderKey$endsWith, filterProviderKey$nendsWith, filterProviderKey$in, filterProviderKey$nin, filterProviderKey$null, filterProviderKey$nnull, filterProviderKey$empty, filterProviderKey$nempty, filterProviderKey$like, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SubscriptionServiceApi.subscriptionServiceListSubscription']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1ListSubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionServiceListSubscription2(body: V1ListSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListSubscriptionReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionServiceListSubscription2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SubscriptionServiceApi.subscriptionServiceListSubscription2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} subscriptionId 
         * @param {SubscriptionServiceUpdateMySubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionServiceUpdateMySubscription(subscriptionId: string, body: SubscriptionServiceUpdateMySubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscriptionv1Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionServiceUpdateMySubscription(subscriptionId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SubscriptionServiceApi.subscriptionServiceUpdateMySubscription']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} subscriptionId 
         * @param {SubscriptionServiceUpdateSubscriptionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionServiceUpdateSubscription(subscriptionId: string, body: SubscriptionServiceUpdateSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscriptionv1Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionServiceUpdateSubscription(subscriptionId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SubscriptionServiceApi.subscriptionServiceUpdateSubscription']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SubscriptionServiceApi - factory interface
 * @export
 */
export const SubscriptionServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {SubscriptionServiceApiSubscriptionServiceCancelMySubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceCancelMySubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceCancelMySubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscriptionv1Subscription> {
            return localVarFp.subscriptionServiceCancelMySubscription(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionServiceApiSubscriptionServiceCancelSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceCancelSubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceCancelSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscriptionv1Subscription> {
            return localVarFp.subscriptionServiceCancelSubscription(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionServiceApiSubscriptionServiceCreateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceCreateSubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceCreateSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscriptionv1Subscription> {
            return localVarFp.subscriptionServiceCreateSubscription(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionServiceApiSubscriptionServiceGetMySubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceGetMySubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceGetMySubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscriptionv1Subscription> {
            return localVarFp.subscriptionServiceGetMySubscription(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionServiceApiSubscriptionServiceGetSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceGetSubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceGetSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscriptionv1Subscription> {
            return localVarFp.subscriptionServiceGetSubscription(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionServiceApiSubscriptionServiceListMySubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceListMySubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceListMySubscriptionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1ListMySubscriptionReply> {
            return localVarFp.subscriptionServiceListMySubscription(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterUserId$eq, requestParameters.filterUserId$neq, requestParameters.filterUserId$contains, requestParameters.filterUserId$startsWith, requestParameters.filterUserId$nstartsWith, requestParameters.filterUserId$endsWith, requestParameters.filterUserId$nendsWith, requestParameters.filterUserId$in, requestParameters.filterUserId$nin, requestParameters.filterUserId$null, requestParameters.filterUserId$nnull, requestParameters.filterUserId$empty, requestParameters.filterUserId$nempty, requestParameters.filterUserId$like, requestParameters.filterProvider$eq, requestParameters.filterProvider$neq, requestParameters.filterProvider$contains, requestParameters.filterProvider$startsWith, requestParameters.filterProvider$nstartsWith, requestParameters.filterProvider$endsWith, requestParameters.filterProvider$nendsWith, requestParameters.filterProvider$in, requestParameters.filterProvider$nin, requestParameters.filterProvider$null, requestParameters.filterProvider$nnull, requestParameters.filterProvider$empty, requestParameters.filterProvider$nempty, requestParameters.filterProvider$like, requestParameters.filterProviderKey$eq, requestParameters.filterProviderKey$neq, requestParameters.filterProviderKey$contains, requestParameters.filterProviderKey$startsWith, requestParameters.filterProviderKey$nstartsWith, requestParameters.filterProviderKey$endsWith, requestParameters.filterProviderKey$nendsWith, requestParameters.filterProviderKey$in, requestParameters.filterProviderKey$nin, requestParameters.filterProviderKey$null, requestParameters.filterProviderKey$nnull, requestParameters.filterProviderKey$empty, requestParameters.filterProviderKey$nempty, requestParameters.filterProviderKey$like, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionServiceApiSubscriptionServiceListMySubscription2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceListMySubscription2(requestParameters: SubscriptionServiceApiSubscriptionServiceListMySubscription2Request, options?: AxiosRequestConfig): AxiosPromise<V1ListMySubscriptionReply> {
            return localVarFp.subscriptionServiceListMySubscription2(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionServiceApiSubscriptionServiceListSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceListSubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceListSubscriptionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1ListSubscriptionReply> {
            return localVarFp.subscriptionServiceListSubscription(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterUserId$eq, requestParameters.filterUserId$neq, requestParameters.filterUserId$contains, requestParameters.filterUserId$startsWith, requestParameters.filterUserId$nstartsWith, requestParameters.filterUserId$endsWith, requestParameters.filterUserId$nendsWith, requestParameters.filterUserId$in, requestParameters.filterUserId$nin, requestParameters.filterUserId$null, requestParameters.filterUserId$nnull, requestParameters.filterUserId$empty, requestParameters.filterUserId$nempty, requestParameters.filterUserId$like, requestParameters.filterProvider$eq, requestParameters.filterProvider$neq, requestParameters.filterProvider$contains, requestParameters.filterProvider$startsWith, requestParameters.filterProvider$nstartsWith, requestParameters.filterProvider$endsWith, requestParameters.filterProvider$nendsWith, requestParameters.filterProvider$in, requestParameters.filterProvider$nin, requestParameters.filterProvider$null, requestParameters.filterProvider$nnull, requestParameters.filterProvider$empty, requestParameters.filterProvider$nempty, requestParameters.filterProvider$like, requestParameters.filterProviderKey$eq, requestParameters.filterProviderKey$neq, requestParameters.filterProviderKey$contains, requestParameters.filterProviderKey$startsWith, requestParameters.filterProviderKey$nstartsWith, requestParameters.filterProviderKey$endsWith, requestParameters.filterProviderKey$nendsWith, requestParameters.filterProviderKey$in, requestParameters.filterProviderKey$nin, requestParameters.filterProviderKey$null, requestParameters.filterProviderKey$nnull, requestParameters.filterProviderKey$empty, requestParameters.filterProviderKey$nempty, requestParameters.filterProviderKey$like, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionServiceApiSubscriptionServiceListSubscription2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceListSubscription2(requestParameters: SubscriptionServiceApiSubscriptionServiceListSubscription2Request, options?: AxiosRequestConfig): AxiosPromise<V1ListSubscriptionReply> {
            return localVarFp.subscriptionServiceListSubscription2(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionServiceApiSubscriptionServiceUpdateMySubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceUpdateMySubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceUpdateMySubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscriptionv1Subscription> {
            return localVarFp.subscriptionServiceUpdateMySubscription(requestParameters.subscriptionId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionServiceApiSubscriptionServiceUpdateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionServiceUpdateSubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceUpdateSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscriptionv1Subscription> {
            return localVarFp.subscriptionServiceUpdateSubscription(requestParameters.subscriptionId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for subscriptionServiceCancelMySubscription operation in SubscriptionServiceApi.
 * @export
 * @interface SubscriptionServiceApiSubscriptionServiceCancelMySubscriptionRequest
 */
export interface SubscriptionServiceApiSubscriptionServiceCancelMySubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceCancelMySubscription
     */
    readonly id: string

    /**
     * 
     * @type {object}
     * @memberof SubscriptionServiceApiSubscriptionServiceCancelMySubscription
     */
    readonly body: object
}

/**
 * Request parameters for subscriptionServiceCancelSubscription operation in SubscriptionServiceApi.
 * @export
 * @interface SubscriptionServiceApiSubscriptionServiceCancelSubscriptionRequest
 */
export interface SubscriptionServiceApiSubscriptionServiceCancelSubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceCancelSubscription
     */
    readonly id: string

    /**
     * 
     * @type {object}
     * @memberof SubscriptionServiceApiSubscriptionServiceCancelSubscription
     */
    readonly body: object
}

/**
 * Request parameters for subscriptionServiceCreateSubscription operation in SubscriptionServiceApi.
 * @export
 * @interface SubscriptionServiceApiSubscriptionServiceCreateSubscriptionRequest
 */
export interface SubscriptionServiceApiSubscriptionServiceCreateSubscriptionRequest {
    /**
     * 
     * @type {V1CreateSubscriptionRequest}
     * @memberof SubscriptionServiceApiSubscriptionServiceCreateSubscription
     */
    readonly body: V1CreateSubscriptionRequest
}

/**
 * Request parameters for subscriptionServiceGetMySubscription operation in SubscriptionServiceApi.
 * @export
 * @interface SubscriptionServiceApiSubscriptionServiceGetMySubscriptionRequest
 */
export interface SubscriptionServiceApiSubscriptionServiceGetMySubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceGetMySubscription
     */
    readonly id: string
}

/**
 * Request parameters for subscriptionServiceGetSubscription operation in SubscriptionServiceApi.
 * @export
 * @interface SubscriptionServiceApiSubscriptionServiceGetSubscriptionRequest
 */
export interface SubscriptionServiceApiSubscriptionServiceGetSubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceGetSubscription
     */
    readonly id: string
}

/**
 * Request parameters for subscriptionServiceListMySubscription operation in SubscriptionServiceApi.
 * @export
 * @interface SubscriptionServiceApiSubscriptionServiceListMySubscriptionRequest
 */
export interface SubscriptionServiceApiSubscriptionServiceListMySubscriptionRequest {
    /**
     * 
     * @type {number}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly pageOffset?: number

    /**
     * 
     * @type {number}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly fields?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterId$like?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterUserId$like?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$eq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$neq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$contains?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProvider$like?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$eq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$neq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$contains?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription
     */
    readonly filterProviderKey$like?: string
}

/**
 * Request parameters for subscriptionServiceListMySubscription2 operation in SubscriptionServiceApi.
 * @export
 * @interface SubscriptionServiceApiSubscriptionServiceListMySubscription2Request
 */
export interface SubscriptionServiceApiSubscriptionServiceListMySubscription2Request {
    /**
     * 
     * @type {V1ListMySubscriptionRequest}
     * @memberof SubscriptionServiceApiSubscriptionServiceListMySubscription2
     */
    readonly body: V1ListMySubscriptionRequest
}

/**
 * Request parameters for subscriptionServiceListSubscription operation in SubscriptionServiceApi.
 * @export
 * @interface SubscriptionServiceApiSubscriptionServiceListSubscriptionRequest
 */
export interface SubscriptionServiceApiSubscriptionServiceListSubscriptionRequest {
    /**
     * 
     * @type {number}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly pageOffset?: number

    /**
     * 
     * @type {number}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly fields?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterId$like?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterUserId$like?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$eq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$neq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$contains?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProvider$like?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$eq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$neq?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$contains?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription
     */
    readonly filterProviderKey$like?: string
}

/**
 * Request parameters for subscriptionServiceListSubscription2 operation in SubscriptionServiceApi.
 * @export
 * @interface SubscriptionServiceApiSubscriptionServiceListSubscription2Request
 */
export interface SubscriptionServiceApiSubscriptionServiceListSubscription2Request {
    /**
     * 
     * @type {V1ListSubscriptionRequest}
     * @memberof SubscriptionServiceApiSubscriptionServiceListSubscription2
     */
    readonly body: V1ListSubscriptionRequest
}

/**
 * Request parameters for subscriptionServiceUpdateMySubscription operation in SubscriptionServiceApi.
 * @export
 * @interface SubscriptionServiceApiSubscriptionServiceUpdateMySubscriptionRequest
 */
export interface SubscriptionServiceApiSubscriptionServiceUpdateMySubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceUpdateMySubscription
     */
    readonly subscriptionId: string

    /**
     * 
     * @type {SubscriptionServiceUpdateMySubscriptionRequest}
     * @memberof SubscriptionServiceApiSubscriptionServiceUpdateMySubscription
     */
    readonly body: SubscriptionServiceUpdateMySubscriptionRequest
}

/**
 * Request parameters for subscriptionServiceUpdateSubscription operation in SubscriptionServiceApi.
 * @export
 * @interface SubscriptionServiceApiSubscriptionServiceUpdateSubscriptionRequest
 */
export interface SubscriptionServiceApiSubscriptionServiceUpdateSubscriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionServiceApiSubscriptionServiceUpdateSubscription
     */
    readonly subscriptionId: string

    /**
     * 
     * @type {SubscriptionServiceUpdateSubscriptionRequest}
     * @memberof SubscriptionServiceApiSubscriptionServiceUpdateSubscription
     */
    readonly body: SubscriptionServiceUpdateSubscriptionRequest
}

/**
 * SubscriptionServiceApi - object-oriented interface
 * @export
 * @class SubscriptionServiceApi
 * @extends {BaseAPI}
 */
export class SubscriptionServiceApi extends BaseAPI {
    /**
     * 
     * @param {SubscriptionServiceApiSubscriptionServiceCancelMySubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionServiceApi
     */
    public subscriptionServiceCancelMySubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceCancelMySubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionServiceApiFp(this.configuration).subscriptionServiceCancelMySubscription(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionServiceApiSubscriptionServiceCancelSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionServiceApi
     */
    public subscriptionServiceCancelSubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceCancelSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionServiceApiFp(this.configuration).subscriptionServiceCancelSubscription(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionServiceApiSubscriptionServiceCreateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionServiceApi
     */
    public subscriptionServiceCreateSubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceCreateSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionServiceApiFp(this.configuration).subscriptionServiceCreateSubscription(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionServiceApiSubscriptionServiceGetMySubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionServiceApi
     */
    public subscriptionServiceGetMySubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceGetMySubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionServiceApiFp(this.configuration).subscriptionServiceGetMySubscription(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionServiceApiSubscriptionServiceGetSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionServiceApi
     */
    public subscriptionServiceGetSubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceGetSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionServiceApiFp(this.configuration).subscriptionServiceGetSubscription(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionServiceApiSubscriptionServiceListMySubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionServiceApi
     */
    public subscriptionServiceListMySubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceListMySubscriptionRequest = {}, options?: AxiosRequestConfig) {
        return SubscriptionServiceApiFp(this.configuration).subscriptionServiceListMySubscription(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterUserId$eq, requestParameters.filterUserId$neq, requestParameters.filterUserId$contains, requestParameters.filterUserId$startsWith, requestParameters.filterUserId$nstartsWith, requestParameters.filterUserId$endsWith, requestParameters.filterUserId$nendsWith, requestParameters.filterUserId$in, requestParameters.filterUserId$nin, requestParameters.filterUserId$null, requestParameters.filterUserId$nnull, requestParameters.filterUserId$empty, requestParameters.filterUserId$nempty, requestParameters.filterUserId$like, requestParameters.filterProvider$eq, requestParameters.filterProvider$neq, requestParameters.filterProvider$contains, requestParameters.filterProvider$startsWith, requestParameters.filterProvider$nstartsWith, requestParameters.filterProvider$endsWith, requestParameters.filterProvider$nendsWith, requestParameters.filterProvider$in, requestParameters.filterProvider$nin, requestParameters.filterProvider$null, requestParameters.filterProvider$nnull, requestParameters.filterProvider$empty, requestParameters.filterProvider$nempty, requestParameters.filterProvider$like, requestParameters.filterProviderKey$eq, requestParameters.filterProviderKey$neq, requestParameters.filterProviderKey$contains, requestParameters.filterProviderKey$startsWith, requestParameters.filterProviderKey$nstartsWith, requestParameters.filterProviderKey$endsWith, requestParameters.filterProviderKey$nendsWith, requestParameters.filterProviderKey$in, requestParameters.filterProviderKey$nin, requestParameters.filterProviderKey$null, requestParameters.filterProviderKey$nnull, requestParameters.filterProviderKey$empty, requestParameters.filterProviderKey$nempty, requestParameters.filterProviderKey$like, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionServiceApiSubscriptionServiceListMySubscription2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionServiceApi
     */
    public subscriptionServiceListMySubscription2(requestParameters: SubscriptionServiceApiSubscriptionServiceListMySubscription2Request, options?: AxiosRequestConfig) {
        return SubscriptionServiceApiFp(this.configuration).subscriptionServiceListMySubscription2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionServiceApiSubscriptionServiceListSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionServiceApi
     */
    public subscriptionServiceListSubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceListSubscriptionRequest = {}, options?: AxiosRequestConfig) {
        return SubscriptionServiceApiFp(this.configuration).subscriptionServiceListSubscription(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterUserId$eq, requestParameters.filterUserId$neq, requestParameters.filterUserId$contains, requestParameters.filterUserId$startsWith, requestParameters.filterUserId$nstartsWith, requestParameters.filterUserId$endsWith, requestParameters.filterUserId$nendsWith, requestParameters.filterUserId$in, requestParameters.filterUserId$nin, requestParameters.filterUserId$null, requestParameters.filterUserId$nnull, requestParameters.filterUserId$empty, requestParameters.filterUserId$nempty, requestParameters.filterUserId$like, requestParameters.filterProvider$eq, requestParameters.filterProvider$neq, requestParameters.filterProvider$contains, requestParameters.filterProvider$startsWith, requestParameters.filterProvider$nstartsWith, requestParameters.filterProvider$endsWith, requestParameters.filterProvider$nendsWith, requestParameters.filterProvider$in, requestParameters.filterProvider$nin, requestParameters.filterProvider$null, requestParameters.filterProvider$nnull, requestParameters.filterProvider$empty, requestParameters.filterProvider$nempty, requestParameters.filterProvider$like, requestParameters.filterProviderKey$eq, requestParameters.filterProviderKey$neq, requestParameters.filterProviderKey$contains, requestParameters.filterProviderKey$startsWith, requestParameters.filterProviderKey$nstartsWith, requestParameters.filterProviderKey$endsWith, requestParameters.filterProviderKey$nendsWith, requestParameters.filterProviderKey$in, requestParameters.filterProviderKey$nin, requestParameters.filterProviderKey$null, requestParameters.filterProviderKey$nnull, requestParameters.filterProviderKey$empty, requestParameters.filterProviderKey$nempty, requestParameters.filterProviderKey$like, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionServiceApiSubscriptionServiceListSubscription2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionServiceApi
     */
    public subscriptionServiceListSubscription2(requestParameters: SubscriptionServiceApiSubscriptionServiceListSubscription2Request, options?: AxiosRequestConfig) {
        return SubscriptionServiceApiFp(this.configuration).subscriptionServiceListSubscription2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionServiceApiSubscriptionServiceUpdateMySubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionServiceApi
     */
    public subscriptionServiceUpdateMySubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceUpdateMySubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionServiceApiFp(this.configuration).subscriptionServiceUpdateMySubscription(requestParameters.subscriptionId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionServiceApiSubscriptionServiceUpdateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionServiceApi
     */
    public subscriptionServiceUpdateSubscription(requestParameters: SubscriptionServiceApiSubscriptionServiceUpdateSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionServiceApiFp(this.configuration).subscriptionServiceUpdateSubscription(requestParameters.subscriptionId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

