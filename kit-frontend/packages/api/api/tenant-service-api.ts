/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { TenantServiceUpdateTenantRequest } from '../models';
// @ts-ignore
import { V1ChangeTenantReply } from '../models';
// @ts-ignore
import { V1CreateTenantRequest } from '../models';
// @ts-ignore
import { V1DeleteTenantReply } from '../models';
// @ts-ignore
import { V1GetCurrentTenantReply } from '../models';
// @ts-ignore
import { V1ListTenantReply } from '../models';
// @ts-ignore
import { V1ListTenantRequest } from '../models';
// @ts-ignore
import { V1Tenant } from '../models';
// @ts-ignore
import { V1TenantInfo } from '../models';
// @ts-ignore
import { V1UserCreateTenantReply } from '../models';
// @ts-ignore
import { V1UserCreateTenantRequest } from '../models';
/**
 * TenantServiceApi - axios parameter creator
 * @export
 */
export const TenantServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} idOrName 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceChangeTenant: async (idOrName: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrName' is not null or undefined
            assertParamExists('tenantServiceChangeTenant', 'idOrName', idOrName)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tenantServiceChangeTenant', 'body', body)
            const localVarPath = `/v1/saas/change-tenant/{idOrName}`
                .replace(`{${"idOrName"}}`, encodeURIComponent(String(idOrName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CreateTenant authz: saas.tenant,*,create
         * @param {V1CreateTenantRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceCreateTenant: async (body: V1CreateTenantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tenantServiceCreateTenant', 'body', body)
            const localVarPath = `/v1/saas/tenant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteTenant authz: saas.tenant,{id},delete
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceDeleteTenant: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tenantServiceDeleteTenant', 'id', id)
            const localVarPath = `/v1/saas/tenant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetCurrentTenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceGetCurrentTenant: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/saas/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTenant authz: saas.tenant,{id},get
         * @param {string} idOrName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceGetTenant: async (idOrName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrName' is not null or undefined
            assertParamExists('tenantServiceGetTenant', 'idOrName', idOrName)
            const localVarPath = `/v1/saas/tenant/{idOrName}`
                .replace(`{${"idOrName"}}`, encodeURIComponent(String(idOrName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTenant authz: saas.tenant,{id},get
         * @param {string} idOrName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceGetTenantPublic: async (idOrName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idOrName' is not null or undefined
            assertParamExists('tenantServiceGetTenantPublic', 'idOrName', idOrName)
            const localVarPath = `/v1/saas/tenant/{idOrName}/public`
                .replace(`{${"idOrName"}}`, encodeURIComponent(String(idOrName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ListTenant authz: saas.tenant,*,list
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {string} [filterRegion$eq] 
         * @param {string} [filterRegion$neq] 
         * @param {string} [filterRegion$contains] 
         * @param {string} [filterRegion$startsWith] 
         * @param {string} [filterRegion$nstartsWith] 
         * @param {string} [filterRegion$endsWith] 
         * @param {string} [filterRegion$nendsWith] 
         * @param {Array<string>} [filterRegion$in] 
         * @param {Array<string>} [filterRegion$nin] 
         * @param {boolean} [filterRegion$null] 
         * @param {boolean} [filterRegion$nnull] 
         * @param {boolean} [filterRegion$empty] 
         * @param {boolean} [filterRegion$nempty] 
         * @param {string} [filterRegion$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceListTenant: async (pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, filterRegion$eq?: string, filterRegion$neq?: string, filterRegion$contains?: string, filterRegion$startsWith?: string, filterRegion$nstartsWith?: string, filterRegion$endsWith?: string, filterRegion$nendsWith?: string, filterRegion$in?: Array<string>, filterRegion$nin?: Array<string>, filterRegion$null?: boolean, filterRegion$nnull?: boolean, filterRegion$empty?: boolean, filterRegion$nempty?: boolean, filterRegion$like?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/saas/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageOffset !== undefined) {
                localVarQueryParameter['pageOffset'] = pageOffset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterId$eq !== undefined) {
                localVarQueryParameter['filter.id.$eq'] = filterId$eq;
            }

            if (filterId$neq !== undefined) {
                localVarQueryParameter['filter.id.$neq'] = filterId$neq;
            }

            if (filterId$contains !== undefined) {
                localVarQueryParameter['filter.id.$contains'] = filterId$contains;
            }

            if (filterId$startsWith !== undefined) {
                localVarQueryParameter['filter.id.$starts_with'] = filterId$startsWith;
            }

            if (filterId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.id.$nstarts_with'] = filterId$nstartsWith;
            }

            if (filterId$endsWith !== undefined) {
                localVarQueryParameter['filter.id.$ends_with'] = filterId$endsWith;
            }

            if (filterId$nendsWith !== undefined) {
                localVarQueryParameter['filter.id.$nends_with'] = filterId$nendsWith;
            }

            if (filterId$in) {
                localVarQueryParameter['filter.id.$in'] = filterId$in;
            }

            if (filterId$nin) {
                localVarQueryParameter['filter.id.$nin'] = filterId$nin;
            }

            if (filterId$null !== undefined) {
                localVarQueryParameter['filter.id.$null'] = filterId$null;
            }

            if (filterId$nnull !== undefined) {
                localVarQueryParameter['filter.id.$nnull'] = filterId$nnull;
            }

            if (filterId$empty !== undefined) {
                localVarQueryParameter['filter.id.$empty'] = filterId$empty;
            }

            if (filterId$nempty !== undefined) {
                localVarQueryParameter['filter.id.$nempty'] = filterId$nempty;
            }

            if (filterId$like !== undefined) {
                localVarQueryParameter['filter.id.$like'] = filterId$like;
            }

            if (filterName$eq !== undefined) {
                localVarQueryParameter['filter.name.$eq'] = filterName$eq;
            }

            if (filterName$neq !== undefined) {
                localVarQueryParameter['filter.name.$neq'] = filterName$neq;
            }

            if (filterName$contains !== undefined) {
                localVarQueryParameter['filter.name.$contains'] = filterName$contains;
            }

            if (filterName$startsWith !== undefined) {
                localVarQueryParameter['filter.name.$starts_with'] = filterName$startsWith;
            }

            if (filterName$nstartsWith !== undefined) {
                localVarQueryParameter['filter.name.$nstarts_with'] = filterName$nstartsWith;
            }

            if (filterName$endsWith !== undefined) {
                localVarQueryParameter['filter.name.$ends_with'] = filterName$endsWith;
            }

            if (filterName$nendsWith !== undefined) {
                localVarQueryParameter['filter.name.$nends_with'] = filterName$nendsWith;
            }

            if (filterName$in) {
                localVarQueryParameter['filter.name.$in'] = filterName$in;
            }

            if (filterName$nin) {
                localVarQueryParameter['filter.name.$nin'] = filterName$nin;
            }

            if (filterName$null !== undefined) {
                localVarQueryParameter['filter.name.$null'] = filterName$null;
            }

            if (filterName$nnull !== undefined) {
                localVarQueryParameter['filter.name.$nnull'] = filterName$nnull;
            }

            if (filterName$empty !== undefined) {
                localVarQueryParameter['filter.name.$empty'] = filterName$empty;
            }

            if (filterName$nempty !== undefined) {
                localVarQueryParameter['filter.name.$nempty'] = filterName$nempty;
            }

            if (filterName$like !== undefined) {
                localVarQueryParameter['filter.name.$like'] = filterName$like;
            }

            if (filterRegion$eq !== undefined) {
                localVarQueryParameter['filter.region.$eq'] = filterRegion$eq;
            }

            if (filterRegion$neq !== undefined) {
                localVarQueryParameter['filter.region.$neq'] = filterRegion$neq;
            }

            if (filterRegion$contains !== undefined) {
                localVarQueryParameter['filter.region.$contains'] = filterRegion$contains;
            }

            if (filterRegion$startsWith !== undefined) {
                localVarQueryParameter['filter.region.$starts_with'] = filterRegion$startsWith;
            }

            if (filterRegion$nstartsWith !== undefined) {
                localVarQueryParameter['filter.region.$nstarts_with'] = filterRegion$nstartsWith;
            }

            if (filterRegion$endsWith !== undefined) {
                localVarQueryParameter['filter.region.$ends_with'] = filterRegion$endsWith;
            }

            if (filterRegion$nendsWith !== undefined) {
                localVarQueryParameter['filter.region.$nends_with'] = filterRegion$nendsWith;
            }

            if (filterRegion$in) {
                localVarQueryParameter['filter.region.$in'] = filterRegion$in;
            }

            if (filterRegion$nin) {
                localVarQueryParameter['filter.region.$nin'] = filterRegion$nin;
            }

            if (filterRegion$null !== undefined) {
                localVarQueryParameter['filter.region.$null'] = filterRegion$null;
            }

            if (filterRegion$nnull !== undefined) {
                localVarQueryParameter['filter.region.$nnull'] = filterRegion$nnull;
            }

            if (filterRegion$empty !== undefined) {
                localVarQueryParameter['filter.region.$empty'] = filterRegion$empty;
            }

            if (filterRegion$nempty !== undefined) {
                localVarQueryParameter['filter.region.$nempty'] = filterRegion$nempty;
            }

            if (filterRegion$like !== undefined) {
                localVarQueryParameter['filter.region.$like'] = filterRegion$like;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ListTenant authz: saas.tenant,*,list
         * @param {V1ListTenantRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceListTenant2: async (body: V1ListTenantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tenantServiceListTenant2', 'body', body)
            const localVarPath = `/v1/saas/tenant/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UpdateTenant authz: saas.tenant,{id},update
         * @param {string} tenantId 
         * @param {TenantServiceUpdateTenantRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceUpdateTenant: async (tenantId: string, body: TenantServiceUpdateTenantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('tenantServiceUpdateTenant', 'tenantId', tenantId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tenantServiceUpdateTenant', 'body', body)
            const localVarPath = `/v1/saas/tenant/{tenant.id}`
                .replace(`{${"tenant.id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UpdateTenant authz: saas.tenant,{id},update
         * @param {string} tenantId 
         * @param {TenantServiceUpdateTenantRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceUpdateTenant2: async (tenantId: string, body: TenantServiceUpdateTenantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('tenantServiceUpdateTenant2', 'tenantId', tenantId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tenantServiceUpdateTenant2', 'body', body)
            const localVarPath = `/v1/saas/tenant/{tenant.id}`
                .replace(`{${"tenant.id"}}`, encodeURIComponent(String(tenantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CreateTenant
         * @param {V1UserCreateTenantRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceUserCreateTenant: async (body: V1UserCreateTenantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tenantServiceUserCreateTenant', 'body', body)
            const localVarPath = `/v1/saas/user/tenant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantServiceApi - functional programming interface
 * @export
 */
export const TenantServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} idOrName 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantServiceChangeTenant(idOrName: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ChangeTenantReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantServiceChangeTenant(idOrName, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TenantServiceApi.tenantServiceChangeTenant']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary CreateTenant authz: saas.tenant,*,create
         * @param {V1CreateTenantRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantServiceCreateTenant(body: V1CreateTenantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantServiceCreateTenant(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TenantServiceApi.tenantServiceCreateTenant']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary DeleteTenant authz: saas.tenant,{id},delete
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantServiceDeleteTenant(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeleteTenantReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantServiceDeleteTenant(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TenantServiceApi.tenantServiceDeleteTenant']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary GetCurrentTenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantServiceGetCurrentTenant(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetCurrentTenantReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantServiceGetCurrentTenant(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TenantServiceApi.tenantServiceGetCurrentTenant']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary GetTenant authz: saas.tenant,{id},get
         * @param {string} idOrName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantServiceGetTenant(idOrName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantServiceGetTenant(idOrName, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TenantServiceApi.tenantServiceGetTenant']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary GetTenant authz: saas.tenant,{id},get
         * @param {string} idOrName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantServiceGetTenantPublic(idOrName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TenantInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantServiceGetTenantPublic(idOrName, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TenantServiceApi.tenantServiceGetTenantPublic']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary ListTenant authz: saas.tenant,*,list
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {string} [filterRegion$eq] 
         * @param {string} [filterRegion$neq] 
         * @param {string} [filterRegion$contains] 
         * @param {string} [filterRegion$startsWith] 
         * @param {string} [filterRegion$nstartsWith] 
         * @param {string} [filterRegion$endsWith] 
         * @param {string} [filterRegion$nendsWith] 
         * @param {Array<string>} [filterRegion$in] 
         * @param {Array<string>} [filterRegion$nin] 
         * @param {boolean} [filterRegion$null] 
         * @param {boolean} [filterRegion$nnull] 
         * @param {boolean} [filterRegion$empty] 
         * @param {boolean} [filterRegion$nempty] 
         * @param {string} [filterRegion$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantServiceListTenant(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, filterRegion$eq?: string, filterRegion$neq?: string, filterRegion$contains?: string, filterRegion$startsWith?: string, filterRegion$nstartsWith?: string, filterRegion$endsWith?: string, filterRegion$nendsWith?: string, filterRegion$in?: Array<string>, filterRegion$nin?: Array<string>, filterRegion$null?: boolean, filterRegion$nnull?: boolean, filterRegion$empty?: boolean, filterRegion$nempty?: boolean, filterRegion$like?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListTenantReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantServiceListTenant(pageOffset, pageSize, search, sort, fields, filterId$eq, filterId$neq, filterId$contains, filterId$startsWith, filterId$nstartsWith, filterId$endsWith, filterId$nendsWith, filterId$in, filterId$nin, filterId$null, filterId$nnull, filterId$empty, filterId$nempty, filterId$like, filterName$eq, filterName$neq, filterName$contains, filterName$startsWith, filterName$nstartsWith, filterName$endsWith, filterName$nendsWith, filterName$in, filterName$nin, filterName$null, filterName$nnull, filterName$empty, filterName$nempty, filterName$like, filterRegion$eq, filterRegion$neq, filterRegion$contains, filterRegion$startsWith, filterRegion$nstartsWith, filterRegion$endsWith, filterRegion$nendsWith, filterRegion$in, filterRegion$nin, filterRegion$null, filterRegion$nnull, filterRegion$empty, filterRegion$nempty, filterRegion$like, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TenantServiceApi.tenantServiceListTenant']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary ListTenant authz: saas.tenant,*,list
         * @param {V1ListTenantRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantServiceListTenant2(body: V1ListTenantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListTenantReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantServiceListTenant2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TenantServiceApi.tenantServiceListTenant2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary UpdateTenant authz: saas.tenant,{id},update
         * @param {string} tenantId 
         * @param {TenantServiceUpdateTenantRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantServiceUpdateTenant(tenantId: string, body: TenantServiceUpdateTenantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantServiceUpdateTenant(tenantId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TenantServiceApi.tenantServiceUpdateTenant']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary UpdateTenant authz: saas.tenant,{id},update
         * @param {string} tenantId 
         * @param {TenantServiceUpdateTenantRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantServiceUpdateTenant2(tenantId: string, body: TenantServiceUpdateTenantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Tenant>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantServiceUpdateTenant2(tenantId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TenantServiceApi.tenantServiceUpdateTenant2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary CreateTenant
         * @param {V1UserCreateTenantRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantServiceUserCreateTenant(body: V1UserCreateTenantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1UserCreateTenantReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantServiceUserCreateTenant(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TenantServiceApi.tenantServiceUserCreateTenant']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TenantServiceApi - factory interface
 * @export
 */
export const TenantServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {TenantServiceApiTenantServiceChangeTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceChangeTenant(requestParameters: TenantServiceApiTenantServiceChangeTenantRequest, options?: AxiosRequestConfig): AxiosPromise<V1ChangeTenantReply> {
            return localVarFp.tenantServiceChangeTenant(requestParameters.idOrName, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CreateTenant authz: saas.tenant,*,create
         * @param {TenantServiceApiTenantServiceCreateTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceCreateTenant(requestParameters: TenantServiceApiTenantServiceCreateTenantRequest, options?: AxiosRequestConfig): AxiosPromise<V1Tenant> {
            return localVarFp.tenantServiceCreateTenant(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteTenant authz: saas.tenant,{id},delete
         * @param {TenantServiceApiTenantServiceDeleteTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceDeleteTenant(requestParameters: TenantServiceApiTenantServiceDeleteTenantRequest, options?: AxiosRequestConfig): AxiosPromise<V1DeleteTenantReply> {
            return localVarFp.tenantServiceDeleteTenant(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetCurrentTenant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceGetCurrentTenant(options?: AxiosRequestConfig): AxiosPromise<V1GetCurrentTenantReply> {
            return localVarFp.tenantServiceGetCurrentTenant(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetTenant authz: saas.tenant,{id},get
         * @param {TenantServiceApiTenantServiceGetTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceGetTenant(requestParameters: TenantServiceApiTenantServiceGetTenantRequest, options?: AxiosRequestConfig): AxiosPromise<V1Tenant> {
            return localVarFp.tenantServiceGetTenant(requestParameters.idOrName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetTenant authz: saas.tenant,{id},get
         * @param {TenantServiceApiTenantServiceGetTenantPublicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceGetTenantPublic(requestParameters: TenantServiceApiTenantServiceGetTenantPublicRequest, options?: AxiosRequestConfig): AxiosPromise<V1TenantInfo> {
            return localVarFp.tenantServiceGetTenantPublic(requestParameters.idOrName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ListTenant authz: saas.tenant,*,list
         * @param {TenantServiceApiTenantServiceListTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceListTenant(requestParameters: TenantServiceApiTenantServiceListTenantRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1ListTenantReply> {
            return localVarFp.tenantServiceListTenant(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterName$eq, requestParameters.filterName$neq, requestParameters.filterName$contains, requestParameters.filterName$startsWith, requestParameters.filterName$nstartsWith, requestParameters.filterName$endsWith, requestParameters.filterName$nendsWith, requestParameters.filterName$in, requestParameters.filterName$nin, requestParameters.filterName$null, requestParameters.filterName$nnull, requestParameters.filterName$empty, requestParameters.filterName$nempty, requestParameters.filterName$like, requestParameters.filterRegion$eq, requestParameters.filterRegion$neq, requestParameters.filterRegion$contains, requestParameters.filterRegion$startsWith, requestParameters.filterRegion$nstartsWith, requestParameters.filterRegion$endsWith, requestParameters.filterRegion$nendsWith, requestParameters.filterRegion$in, requestParameters.filterRegion$nin, requestParameters.filterRegion$null, requestParameters.filterRegion$nnull, requestParameters.filterRegion$empty, requestParameters.filterRegion$nempty, requestParameters.filterRegion$like, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ListTenant authz: saas.tenant,*,list
         * @param {TenantServiceApiTenantServiceListTenant2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceListTenant2(requestParameters: TenantServiceApiTenantServiceListTenant2Request, options?: AxiosRequestConfig): AxiosPromise<V1ListTenantReply> {
            return localVarFp.tenantServiceListTenant2(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary UpdateTenant authz: saas.tenant,{id},update
         * @param {TenantServiceApiTenantServiceUpdateTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceUpdateTenant(requestParameters: TenantServiceApiTenantServiceUpdateTenantRequest, options?: AxiosRequestConfig): AxiosPromise<V1Tenant> {
            return localVarFp.tenantServiceUpdateTenant(requestParameters.tenantId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary UpdateTenant authz: saas.tenant,{id},update
         * @param {TenantServiceApiTenantServiceUpdateTenant2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceUpdateTenant2(requestParameters: TenantServiceApiTenantServiceUpdateTenant2Request, options?: AxiosRequestConfig): AxiosPromise<V1Tenant> {
            return localVarFp.tenantServiceUpdateTenant2(requestParameters.tenantId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CreateTenant
         * @param {TenantServiceApiTenantServiceUserCreateTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantServiceUserCreateTenant(requestParameters: TenantServiceApiTenantServiceUserCreateTenantRequest, options?: AxiosRequestConfig): AxiosPromise<V1UserCreateTenantReply> {
            return localVarFp.tenantServiceUserCreateTenant(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for tenantServiceChangeTenant operation in TenantServiceApi.
 * @export
 * @interface TenantServiceApiTenantServiceChangeTenantRequest
 */
export interface TenantServiceApiTenantServiceChangeTenantRequest {
    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceChangeTenant
     */
    readonly idOrName: string

    /**
     * 
     * @type {object}
     * @memberof TenantServiceApiTenantServiceChangeTenant
     */
    readonly body: object
}

/**
 * Request parameters for tenantServiceCreateTenant operation in TenantServiceApi.
 * @export
 * @interface TenantServiceApiTenantServiceCreateTenantRequest
 */
export interface TenantServiceApiTenantServiceCreateTenantRequest {
    /**
     * 
     * @type {V1CreateTenantRequest}
     * @memberof TenantServiceApiTenantServiceCreateTenant
     */
    readonly body: V1CreateTenantRequest
}

/**
 * Request parameters for tenantServiceDeleteTenant operation in TenantServiceApi.
 * @export
 * @interface TenantServiceApiTenantServiceDeleteTenantRequest
 */
export interface TenantServiceApiTenantServiceDeleteTenantRequest {
    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceDeleteTenant
     */
    readonly id: string
}

/**
 * Request parameters for tenantServiceGetTenant operation in TenantServiceApi.
 * @export
 * @interface TenantServiceApiTenantServiceGetTenantRequest
 */
export interface TenantServiceApiTenantServiceGetTenantRequest {
    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceGetTenant
     */
    readonly idOrName: string
}

/**
 * Request parameters for tenantServiceGetTenantPublic operation in TenantServiceApi.
 * @export
 * @interface TenantServiceApiTenantServiceGetTenantPublicRequest
 */
export interface TenantServiceApiTenantServiceGetTenantPublicRequest {
    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceGetTenantPublic
     */
    readonly idOrName: string
}

/**
 * Request parameters for tenantServiceListTenant operation in TenantServiceApi.
 * @export
 * @interface TenantServiceApiTenantServiceListTenantRequest
 */
export interface TenantServiceApiTenantServiceListTenantRequest {
    /**
     * 
     * @type {number}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly pageOffset?: number

    /**
     * 
     * @type {number}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly fields?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterId$like?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$eq?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$neq?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$contains?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterName$like?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$eq?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$neq?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$contains?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceListTenant
     */
    readonly filterRegion$like?: string
}

/**
 * Request parameters for tenantServiceListTenant2 operation in TenantServiceApi.
 * @export
 * @interface TenantServiceApiTenantServiceListTenant2Request
 */
export interface TenantServiceApiTenantServiceListTenant2Request {
    /**
     * 
     * @type {V1ListTenantRequest}
     * @memberof TenantServiceApiTenantServiceListTenant2
     */
    readonly body: V1ListTenantRequest
}

/**
 * Request parameters for tenantServiceUpdateTenant operation in TenantServiceApi.
 * @export
 * @interface TenantServiceApiTenantServiceUpdateTenantRequest
 */
export interface TenantServiceApiTenantServiceUpdateTenantRequest {
    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceUpdateTenant
     */
    readonly tenantId: string

    /**
     * 
     * @type {TenantServiceUpdateTenantRequest}
     * @memberof TenantServiceApiTenantServiceUpdateTenant
     */
    readonly body: TenantServiceUpdateTenantRequest
}

/**
 * Request parameters for tenantServiceUpdateTenant2 operation in TenantServiceApi.
 * @export
 * @interface TenantServiceApiTenantServiceUpdateTenant2Request
 */
export interface TenantServiceApiTenantServiceUpdateTenant2Request {
    /**
     * 
     * @type {string}
     * @memberof TenantServiceApiTenantServiceUpdateTenant2
     */
    readonly tenantId: string

    /**
     * 
     * @type {TenantServiceUpdateTenantRequest}
     * @memberof TenantServiceApiTenantServiceUpdateTenant2
     */
    readonly body: TenantServiceUpdateTenantRequest
}

/**
 * Request parameters for tenantServiceUserCreateTenant operation in TenantServiceApi.
 * @export
 * @interface TenantServiceApiTenantServiceUserCreateTenantRequest
 */
export interface TenantServiceApiTenantServiceUserCreateTenantRequest {
    /**
     * 
     * @type {V1UserCreateTenantRequest}
     * @memberof TenantServiceApiTenantServiceUserCreateTenant
     */
    readonly body: V1UserCreateTenantRequest
}

/**
 * TenantServiceApi - object-oriented interface
 * @export
 * @class TenantServiceApi
 * @extends {BaseAPI}
 */
export class TenantServiceApi extends BaseAPI {
    /**
     * 
     * @param {TenantServiceApiTenantServiceChangeTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantServiceApi
     */
    public tenantServiceChangeTenant(requestParameters: TenantServiceApiTenantServiceChangeTenantRequest, options?: AxiosRequestConfig) {
        return TenantServiceApiFp(this.configuration).tenantServiceChangeTenant(requestParameters.idOrName, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CreateTenant authz: saas.tenant,*,create
     * @param {TenantServiceApiTenantServiceCreateTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantServiceApi
     */
    public tenantServiceCreateTenant(requestParameters: TenantServiceApiTenantServiceCreateTenantRequest, options?: AxiosRequestConfig) {
        return TenantServiceApiFp(this.configuration).tenantServiceCreateTenant(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteTenant authz: saas.tenant,{id},delete
     * @param {TenantServiceApiTenantServiceDeleteTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantServiceApi
     */
    public tenantServiceDeleteTenant(requestParameters: TenantServiceApiTenantServiceDeleteTenantRequest, options?: AxiosRequestConfig) {
        return TenantServiceApiFp(this.configuration).tenantServiceDeleteTenant(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetCurrentTenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantServiceApi
     */
    public tenantServiceGetCurrentTenant(options?: AxiosRequestConfig) {
        return TenantServiceApiFp(this.configuration).tenantServiceGetCurrentTenant(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetTenant authz: saas.tenant,{id},get
     * @param {TenantServiceApiTenantServiceGetTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantServiceApi
     */
    public tenantServiceGetTenant(requestParameters: TenantServiceApiTenantServiceGetTenantRequest, options?: AxiosRequestConfig) {
        return TenantServiceApiFp(this.configuration).tenantServiceGetTenant(requestParameters.idOrName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetTenant authz: saas.tenant,{id},get
     * @param {TenantServiceApiTenantServiceGetTenantPublicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantServiceApi
     */
    public tenantServiceGetTenantPublic(requestParameters: TenantServiceApiTenantServiceGetTenantPublicRequest, options?: AxiosRequestConfig) {
        return TenantServiceApiFp(this.configuration).tenantServiceGetTenantPublic(requestParameters.idOrName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ListTenant authz: saas.tenant,*,list
     * @param {TenantServiceApiTenantServiceListTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantServiceApi
     */
    public tenantServiceListTenant(requestParameters: TenantServiceApiTenantServiceListTenantRequest = {}, options?: AxiosRequestConfig) {
        return TenantServiceApiFp(this.configuration).tenantServiceListTenant(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterName$eq, requestParameters.filterName$neq, requestParameters.filterName$contains, requestParameters.filterName$startsWith, requestParameters.filterName$nstartsWith, requestParameters.filterName$endsWith, requestParameters.filterName$nendsWith, requestParameters.filterName$in, requestParameters.filterName$nin, requestParameters.filterName$null, requestParameters.filterName$nnull, requestParameters.filterName$empty, requestParameters.filterName$nempty, requestParameters.filterName$like, requestParameters.filterRegion$eq, requestParameters.filterRegion$neq, requestParameters.filterRegion$contains, requestParameters.filterRegion$startsWith, requestParameters.filterRegion$nstartsWith, requestParameters.filterRegion$endsWith, requestParameters.filterRegion$nendsWith, requestParameters.filterRegion$in, requestParameters.filterRegion$nin, requestParameters.filterRegion$null, requestParameters.filterRegion$nnull, requestParameters.filterRegion$empty, requestParameters.filterRegion$nempty, requestParameters.filterRegion$like, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ListTenant authz: saas.tenant,*,list
     * @param {TenantServiceApiTenantServiceListTenant2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantServiceApi
     */
    public tenantServiceListTenant2(requestParameters: TenantServiceApiTenantServiceListTenant2Request, options?: AxiosRequestConfig) {
        return TenantServiceApiFp(this.configuration).tenantServiceListTenant2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary UpdateTenant authz: saas.tenant,{id},update
     * @param {TenantServiceApiTenantServiceUpdateTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantServiceApi
     */
    public tenantServiceUpdateTenant(requestParameters: TenantServiceApiTenantServiceUpdateTenantRequest, options?: AxiosRequestConfig) {
        return TenantServiceApiFp(this.configuration).tenantServiceUpdateTenant(requestParameters.tenantId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary UpdateTenant authz: saas.tenant,{id},update
     * @param {TenantServiceApiTenantServiceUpdateTenant2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantServiceApi
     */
    public tenantServiceUpdateTenant2(requestParameters: TenantServiceApiTenantServiceUpdateTenant2Request, options?: AxiosRequestConfig) {
        return TenantServiceApiFp(this.configuration).tenantServiceUpdateTenant2(requestParameters.tenantId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CreateTenant
     * @param {TenantServiceApiTenantServiceUserCreateTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantServiceApi
     */
    public tenantServiceUserCreateTenant(requestParameters: TenantServiceApiTenantServiceUserCreateTenantRequest, options?: AxiosRequestConfig) {
        return TenantServiceApiFp(this.configuration).tenantServiceUserCreateTenant(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

