/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { KeyJsonWebKey } from '../models';
// @ts-ignore
import { KeyJsonWebKeySet } from '../models';
// @ts-ignore
import { KeyServiceCreateJsonWebKeySetRequest } from '../models';
// @ts-ignore
import { KeyServiceUpdateJsonWebKeyRequest } from '../models';
// @ts-ignore
import { KeyServiceUpdateJsonWebKeySetRequest } from '../models';
/**
 * KeyServiceApi - axios parameter creator
 * @export
 */
export const KeyServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} set 
         * @param {KeyServiceCreateJsonWebKeySetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceCreateJsonWebKeySet: async (set: string, body: KeyServiceCreateJsonWebKeySetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('keyServiceCreateJsonWebKeySet', 'set', set)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('keyServiceCreateJsonWebKeySet', 'body', body)
            const localVarPath = `/v1/oidc/keys/{set}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} set 
         * @param {string} kid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceDeleteJsonWebKey: async (set: string, kid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('keyServiceDeleteJsonWebKey', 'set', set)
            // verify required parameter 'kid' is not null or undefined
            assertParamExists('keyServiceDeleteJsonWebKey', 'kid', kid)
            const localVarPath = `/v1/oidc/keys/{set}/{kid}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)))
                .replace(`{${"kid"}}`, encodeURIComponent(String(kid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} set 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceDeleteJsonWebKeySet: async (set: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('keyServiceDeleteJsonWebKeySet', 'set', set)
            const localVarPath = `/v1/oidc/keys/{set}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} set 
         * @param {string} kid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceGetJsonWebKey: async (set: string, kid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('keyServiceGetJsonWebKey', 'set', set)
            // verify required parameter 'kid' is not null or undefined
            assertParamExists('keyServiceGetJsonWebKey', 'kid', kid)
            const localVarPath = `/v1/oidc/keys/{set}/{kid}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)))
                .replace(`{${"kid"}}`, encodeURIComponent(String(kid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} set 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceGetJsonWebKeySet: async (set: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('keyServiceGetJsonWebKeySet', 'set', set)
            const localVarPath = `/v1/oidc/keys/{set}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} set 
         * @param {string} kid 
         * @param {KeyServiceUpdateJsonWebKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceUpdateJsonWebKey: async (set: string, kid: string, body: KeyServiceUpdateJsonWebKeyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('keyServiceUpdateJsonWebKey', 'set', set)
            // verify required parameter 'kid' is not null or undefined
            assertParamExists('keyServiceUpdateJsonWebKey', 'kid', kid)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('keyServiceUpdateJsonWebKey', 'body', body)
            const localVarPath = `/v1/oidc/keys/{set}/{kid}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)))
                .replace(`{${"kid"}}`, encodeURIComponent(String(kid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} set 
         * @param {KeyServiceUpdateJsonWebKeySetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceUpdateJsonWebKeySet: async (set: string, body: KeyServiceUpdateJsonWebKeySetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'set' is not null or undefined
            assertParamExists('keyServiceUpdateJsonWebKeySet', 'set', set)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('keyServiceUpdateJsonWebKeySet', 'body', body)
            const localVarPath = `/v1/oidc/keys/{set}`
                .replace(`{${"set"}}`, encodeURIComponent(String(set)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeyServiceApi - functional programming interface
 * @export
 */
export const KeyServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KeyServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} set 
         * @param {KeyServiceCreateJsonWebKeySetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keyServiceCreateJsonWebKeySet(set: string, body: KeyServiceCreateJsonWebKeySetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyJsonWebKeySet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keyServiceCreateJsonWebKeySet(set, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyServiceApi.keyServiceCreateJsonWebKeySet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} set 
         * @param {string} kid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keyServiceDeleteJsonWebKey(set: string, kid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keyServiceDeleteJsonWebKey(set, kid, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyServiceApi.keyServiceDeleteJsonWebKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} set 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keyServiceDeleteJsonWebKeySet(set: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keyServiceDeleteJsonWebKeySet(set, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyServiceApi.keyServiceDeleteJsonWebKeySet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} set 
         * @param {string} kid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keyServiceGetJsonWebKey(set: string, kid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyJsonWebKeySet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keyServiceGetJsonWebKey(set, kid, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyServiceApi.keyServiceGetJsonWebKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} set 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keyServiceGetJsonWebKeySet(set: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyJsonWebKeySet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keyServiceGetJsonWebKeySet(set, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyServiceApi.keyServiceGetJsonWebKeySet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} set 
         * @param {string} kid 
         * @param {KeyServiceUpdateJsonWebKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keyServiceUpdateJsonWebKey(set: string, kid: string, body: KeyServiceUpdateJsonWebKeyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyJsonWebKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keyServiceUpdateJsonWebKey(set, kid, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyServiceApi.keyServiceUpdateJsonWebKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} set 
         * @param {KeyServiceUpdateJsonWebKeySetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keyServiceUpdateJsonWebKeySet(set: string, body: KeyServiceUpdateJsonWebKeySetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyJsonWebKeySet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keyServiceUpdateJsonWebKeySet(set, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyServiceApi.keyServiceUpdateJsonWebKeySet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * KeyServiceApi - factory interface
 * @export
 */
export const KeyServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KeyServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {KeyServiceApiKeyServiceCreateJsonWebKeySetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceCreateJsonWebKeySet(requestParameters: KeyServiceApiKeyServiceCreateJsonWebKeySetRequest, options?: AxiosRequestConfig): AxiosPromise<KeyJsonWebKeySet> {
            return localVarFp.keyServiceCreateJsonWebKeySet(requestParameters.set, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {KeyServiceApiKeyServiceDeleteJsonWebKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceDeleteJsonWebKey(requestParameters: KeyServiceApiKeyServiceDeleteJsonWebKeyRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.keyServiceDeleteJsonWebKey(requestParameters.set, requestParameters.kid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {KeyServiceApiKeyServiceDeleteJsonWebKeySetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceDeleteJsonWebKeySet(requestParameters: KeyServiceApiKeyServiceDeleteJsonWebKeySetRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.keyServiceDeleteJsonWebKeySet(requestParameters.set, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {KeyServiceApiKeyServiceGetJsonWebKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceGetJsonWebKey(requestParameters: KeyServiceApiKeyServiceGetJsonWebKeyRequest, options?: AxiosRequestConfig): AxiosPromise<KeyJsonWebKeySet> {
            return localVarFp.keyServiceGetJsonWebKey(requestParameters.set, requestParameters.kid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {KeyServiceApiKeyServiceGetJsonWebKeySetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceGetJsonWebKeySet(requestParameters: KeyServiceApiKeyServiceGetJsonWebKeySetRequest, options?: AxiosRequestConfig): AxiosPromise<KeyJsonWebKeySet> {
            return localVarFp.keyServiceGetJsonWebKeySet(requestParameters.set, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {KeyServiceApiKeyServiceUpdateJsonWebKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceUpdateJsonWebKey(requestParameters: KeyServiceApiKeyServiceUpdateJsonWebKeyRequest, options?: AxiosRequestConfig): AxiosPromise<KeyJsonWebKey> {
            return localVarFp.keyServiceUpdateJsonWebKey(requestParameters.set, requestParameters.kid, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {KeyServiceApiKeyServiceUpdateJsonWebKeySetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyServiceUpdateJsonWebKeySet(requestParameters: KeyServiceApiKeyServiceUpdateJsonWebKeySetRequest, options?: AxiosRequestConfig): AxiosPromise<KeyJsonWebKeySet> {
            return localVarFp.keyServiceUpdateJsonWebKeySet(requestParameters.set, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for keyServiceCreateJsonWebKeySet operation in KeyServiceApi.
 * @export
 * @interface KeyServiceApiKeyServiceCreateJsonWebKeySetRequest
 */
export interface KeyServiceApiKeyServiceCreateJsonWebKeySetRequest {
    /**
     * 
     * @type {string}
     * @memberof KeyServiceApiKeyServiceCreateJsonWebKeySet
     */
    readonly set: string

    /**
     * 
     * @type {KeyServiceCreateJsonWebKeySetRequest}
     * @memberof KeyServiceApiKeyServiceCreateJsonWebKeySet
     */
    readonly body: KeyServiceCreateJsonWebKeySetRequest
}

/**
 * Request parameters for keyServiceDeleteJsonWebKey operation in KeyServiceApi.
 * @export
 * @interface KeyServiceApiKeyServiceDeleteJsonWebKeyRequest
 */
export interface KeyServiceApiKeyServiceDeleteJsonWebKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof KeyServiceApiKeyServiceDeleteJsonWebKey
     */
    readonly set: string

    /**
     * 
     * @type {string}
     * @memberof KeyServiceApiKeyServiceDeleteJsonWebKey
     */
    readonly kid: string
}

/**
 * Request parameters for keyServiceDeleteJsonWebKeySet operation in KeyServiceApi.
 * @export
 * @interface KeyServiceApiKeyServiceDeleteJsonWebKeySetRequest
 */
export interface KeyServiceApiKeyServiceDeleteJsonWebKeySetRequest {
    /**
     * 
     * @type {string}
     * @memberof KeyServiceApiKeyServiceDeleteJsonWebKeySet
     */
    readonly set: string
}

/**
 * Request parameters for keyServiceGetJsonWebKey operation in KeyServiceApi.
 * @export
 * @interface KeyServiceApiKeyServiceGetJsonWebKeyRequest
 */
export interface KeyServiceApiKeyServiceGetJsonWebKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof KeyServiceApiKeyServiceGetJsonWebKey
     */
    readonly set: string

    /**
     * 
     * @type {string}
     * @memberof KeyServiceApiKeyServiceGetJsonWebKey
     */
    readonly kid: string
}

/**
 * Request parameters for keyServiceGetJsonWebKeySet operation in KeyServiceApi.
 * @export
 * @interface KeyServiceApiKeyServiceGetJsonWebKeySetRequest
 */
export interface KeyServiceApiKeyServiceGetJsonWebKeySetRequest {
    /**
     * 
     * @type {string}
     * @memberof KeyServiceApiKeyServiceGetJsonWebKeySet
     */
    readonly set: string
}

/**
 * Request parameters for keyServiceUpdateJsonWebKey operation in KeyServiceApi.
 * @export
 * @interface KeyServiceApiKeyServiceUpdateJsonWebKeyRequest
 */
export interface KeyServiceApiKeyServiceUpdateJsonWebKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof KeyServiceApiKeyServiceUpdateJsonWebKey
     */
    readonly set: string

    /**
     * 
     * @type {string}
     * @memberof KeyServiceApiKeyServiceUpdateJsonWebKey
     */
    readonly kid: string

    /**
     * 
     * @type {KeyServiceUpdateJsonWebKeyRequest}
     * @memberof KeyServiceApiKeyServiceUpdateJsonWebKey
     */
    readonly body: KeyServiceUpdateJsonWebKeyRequest
}

/**
 * Request parameters for keyServiceUpdateJsonWebKeySet operation in KeyServiceApi.
 * @export
 * @interface KeyServiceApiKeyServiceUpdateJsonWebKeySetRequest
 */
export interface KeyServiceApiKeyServiceUpdateJsonWebKeySetRequest {
    /**
     * 
     * @type {string}
     * @memberof KeyServiceApiKeyServiceUpdateJsonWebKeySet
     */
    readonly set: string

    /**
     * 
     * @type {KeyServiceUpdateJsonWebKeySetRequest}
     * @memberof KeyServiceApiKeyServiceUpdateJsonWebKeySet
     */
    readonly body: KeyServiceUpdateJsonWebKeySetRequest
}

/**
 * KeyServiceApi - object-oriented interface
 * @export
 * @class KeyServiceApi
 * @extends {BaseAPI}
 */
export class KeyServiceApi extends BaseAPI {
    /**
     * 
     * @param {KeyServiceApiKeyServiceCreateJsonWebKeySetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyServiceApi
     */
    public keyServiceCreateJsonWebKeySet(requestParameters: KeyServiceApiKeyServiceCreateJsonWebKeySetRequest, options?: AxiosRequestConfig) {
        return KeyServiceApiFp(this.configuration).keyServiceCreateJsonWebKeySet(requestParameters.set, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {KeyServiceApiKeyServiceDeleteJsonWebKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyServiceApi
     */
    public keyServiceDeleteJsonWebKey(requestParameters: KeyServiceApiKeyServiceDeleteJsonWebKeyRequest, options?: AxiosRequestConfig) {
        return KeyServiceApiFp(this.configuration).keyServiceDeleteJsonWebKey(requestParameters.set, requestParameters.kid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {KeyServiceApiKeyServiceDeleteJsonWebKeySetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyServiceApi
     */
    public keyServiceDeleteJsonWebKeySet(requestParameters: KeyServiceApiKeyServiceDeleteJsonWebKeySetRequest, options?: AxiosRequestConfig) {
        return KeyServiceApiFp(this.configuration).keyServiceDeleteJsonWebKeySet(requestParameters.set, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {KeyServiceApiKeyServiceGetJsonWebKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyServiceApi
     */
    public keyServiceGetJsonWebKey(requestParameters: KeyServiceApiKeyServiceGetJsonWebKeyRequest, options?: AxiosRequestConfig) {
        return KeyServiceApiFp(this.configuration).keyServiceGetJsonWebKey(requestParameters.set, requestParameters.kid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {KeyServiceApiKeyServiceGetJsonWebKeySetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyServiceApi
     */
    public keyServiceGetJsonWebKeySet(requestParameters: KeyServiceApiKeyServiceGetJsonWebKeySetRequest, options?: AxiosRequestConfig) {
        return KeyServiceApiFp(this.configuration).keyServiceGetJsonWebKeySet(requestParameters.set, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {KeyServiceApiKeyServiceUpdateJsonWebKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyServiceApi
     */
    public keyServiceUpdateJsonWebKey(requestParameters: KeyServiceApiKeyServiceUpdateJsonWebKeyRequest, options?: AxiosRequestConfig) {
        return KeyServiceApiFp(this.configuration).keyServiceUpdateJsonWebKey(requestParameters.set, requestParameters.kid, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {KeyServiceApiKeyServiceUpdateJsonWebKeySetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyServiceApi
     */
    public keyServiceUpdateJsonWebKeySet(requestParameters: KeyServiceApiKeyServiceUpdateJsonWebKeySetRequest, options?: AxiosRequestConfig) {
        return KeyServiceApiFp(this.configuration).keyServiceUpdateJsonWebKeySet(requestParameters.set, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

