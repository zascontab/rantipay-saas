/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CheckoutServiceCheckoutOrderRequest } from '../models';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { V1CheckoutNowReply } from '../models';
// @ts-ignore
import { V1CheckoutNowRequest } from '../models';
// @ts-ignore
import { V1CheckoutOrderReply } from '../models';
/**
 * CheckoutServiceApi - axios parameter creator
 * @export
 */
export const CheckoutServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1CheckoutNowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutServiceCheckoutNow: async (body: V1CheckoutNowRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('checkoutServiceCheckoutNow', 'body', body)
            const localVarPath = `/v1/payment/checkout/now`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {CheckoutServiceCheckoutOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutServiceCheckoutOrder: async (orderId: string, body: CheckoutServiceCheckoutOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('checkoutServiceCheckoutOrder', 'orderId', orderId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('checkoutServiceCheckoutOrder', 'body', body)
            const localVarPath = `/v1/payment/checkout/order/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckoutServiceApi - functional programming interface
 * @export
 */
export const CheckoutServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckoutServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1CheckoutNowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutServiceCheckoutNow(body: V1CheckoutNowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CheckoutNowReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutServiceCheckoutNow(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CheckoutServiceApi.checkoutServiceCheckoutNow']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} orderId 
         * @param {CheckoutServiceCheckoutOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutServiceCheckoutOrder(orderId: string, body: CheckoutServiceCheckoutOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CheckoutOrderReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutServiceCheckoutOrder(orderId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CheckoutServiceApi.checkoutServiceCheckoutOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CheckoutServiceApi - factory interface
 * @export
 */
export const CheckoutServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckoutServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {CheckoutServiceApiCheckoutServiceCheckoutNowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutServiceCheckoutNow(requestParameters: CheckoutServiceApiCheckoutServiceCheckoutNowRequest, options?: AxiosRequestConfig): AxiosPromise<V1CheckoutNowReply> {
            return localVarFp.checkoutServiceCheckoutNow(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CheckoutServiceApiCheckoutServiceCheckoutOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutServiceCheckoutOrder(requestParameters: CheckoutServiceApiCheckoutServiceCheckoutOrderRequest, options?: AxiosRequestConfig): AxiosPromise<V1CheckoutOrderReply> {
            return localVarFp.checkoutServiceCheckoutOrder(requestParameters.orderId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkoutServiceCheckoutNow operation in CheckoutServiceApi.
 * @export
 * @interface CheckoutServiceApiCheckoutServiceCheckoutNowRequest
 */
export interface CheckoutServiceApiCheckoutServiceCheckoutNowRequest {
    /**
     * 
     * @type {V1CheckoutNowRequest}
     * @memberof CheckoutServiceApiCheckoutServiceCheckoutNow
     */
    readonly body: V1CheckoutNowRequest
}

/**
 * Request parameters for checkoutServiceCheckoutOrder operation in CheckoutServiceApi.
 * @export
 * @interface CheckoutServiceApiCheckoutServiceCheckoutOrderRequest
 */
export interface CheckoutServiceApiCheckoutServiceCheckoutOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof CheckoutServiceApiCheckoutServiceCheckoutOrder
     */
    readonly orderId: string

    /**
     * 
     * @type {CheckoutServiceCheckoutOrderRequest}
     * @memberof CheckoutServiceApiCheckoutServiceCheckoutOrder
     */
    readonly body: CheckoutServiceCheckoutOrderRequest
}

/**
 * CheckoutServiceApi - object-oriented interface
 * @export
 * @class CheckoutServiceApi
 * @extends {BaseAPI}
 */
export class CheckoutServiceApi extends BaseAPI {
    /**
     * 
     * @param {CheckoutServiceApiCheckoutServiceCheckoutNowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutServiceApi
     */
    public checkoutServiceCheckoutNow(requestParameters: CheckoutServiceApiCheckoutServiceCheckoutNowRequest, options?: AxiosRequestConfig) {
        return CheckoutServiceApiFp(this.configuration).checkoutServiceCheckoutNow(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CheckoutServiceApiCheckoutServiceCheckoutOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutServiceApi
     */
    public checkoutServiceCheckoutOrder(requestParameters: CheckoutServiceApiCheckoutServiceCheckoutOrderRequest, options?: AxiosRequestConfig) {
        return CheckoutServiceApiFp(this.configuration).checkoutServiceCheckoutOrder(requestParameters.orderId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

