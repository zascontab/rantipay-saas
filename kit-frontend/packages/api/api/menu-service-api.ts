/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { MenuServiceUpdateMenuRequest } from '../models';
// @ts-ignore
import { V1CreateMenuRequest } from '../models';
// @ts-ignore
import { V1DeleteMenuReply } from '../models';
// @ts-ignore
import { V1GetAvailableMenusReply } from '../models';
// @ts-ignore
import { V1ListMenuReply } from '../models';
// @ts-ignore
import { V1ListMenuRequest } from '../models';
// @ts-ignore
import { V1Menu } from '../models';
/**
 * MenuServiceApi - axios parameter creator
 * @export
 */
export const MenuServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1CreateMenuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceCreateMenu: async (body: V1CreateMenuRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('menuServiceCreateMenu', 'body', body)
            const localVarPath = `/v1/sys/menu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceDeleteMenu: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuServiceDeleteMenu', 'id', id)
            const localVarPath = `/v1/sys/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceGetAvailableMenus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/sys/menus/available`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceGetMenu: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('menuServiceGetMenu', 'id', id)
            const localVarPath = `/v1/sys/menu/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {string} [filterParent$eq] 
         * @param {string} [filterParent$neq] 
         * @param {string} [filterParent$contains] 
         * @param {string} [filterParent$startsWith] 
         * @param {string} [filterParent$nstartsWith] 
         * @param {string} [filterParent$endsWith] 
         * @param {string} [filterParent$nendsWith] 
         * @param {Array<string>} [filterParent$in] 
         * @param {Array<string>} [filterParent$nin] 
         * @param {boolean} [filterParent$null] 
         * @param {boolean} [filterParent$nnull] 
         * @param {boolean} [filterParent$empty] 
         * @param {boolean} [filterParent$nempty] 
         * @param {string} [filterParent$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceListMenu: async (pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, filterParent$eq?: string, filterParent$neq?: string, filterParent$contains?: string, filterParent$startsWith?: string, filterParent$nstartsWith?: string, filterParent$endsWith?: string, filterParent$nendsWith?: string, filterParent$in?: Array<string>, filterParent$nin?: Array<string>, filterParent$null?: boolean, filterParent$nnull?: boolean, filterParent$empty?: boolean, filterParent$nempty?: boolean, filterParent$like?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/sys/menus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageOffset !== undefined) {
                localVarQueryParameter['pageOffset'] = pageOffset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterId$eq !== undefined) {
                localVarQueryParameter['filter.id.$eq'] = filterId$eq;
            }

            if (filterId$neq !== undefined) {
                localVarQueryParameter['filter.id.$neq'] = filterId$neq;
            }

            if (filterId$contains !== undefined) {
                localVarQueryParameter['filter.id.$contains'] = filterId$contains;
            }

            if (filterId$startsWith !== undefined) {
                localVarQueryParameter['filter.id.$starts_with'] = filterId$startsWith;
            }

            if (filterId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.id.$nstarts_with'] = filterId$nstartsWith;
            }

            if (filterId$endsWith !== undefined) {
                localVarQueryParameter['filter.id.$ends_with'] = filterId$endsWith;
            }

            if (filterId$nendsWith !== undefined) {
                localVarQueryParameter['filter.id.$nends_with'] = filterId$nendsWith;
            }

            if (filterId$in) {
                localVarQueryParameter['filter.id.$in'] = filterId$in;
            }

            if (filterId$nin) {
                localVarQueryParameter['filter.id.$nin'] = filterId$nin;
            }

            if (filterId$null !== undefined) {
                localVarQueryParameter['filter.id.$null'] = filterId$null;
            }

            if (filterId$nnull !== undefined) {
                localVarQueryParameter['filter.id.$nnull'] = filterId$nnull;
            }

            if (filterId$empty !== undefined) {
                localVarQueryParameter['filter.id.$empty'] = filterId$empty;
            }

            if (filterId$nempty !== undefined) {
                localVarQueryParameter['filter.id.$nempty'] = filterId$nempty;
            }

            if (filterId$like !== undefined) {
                localVarQueryParameter['filter.id.$like'] = filterId$like;
            }

            if (filterName$eq !== undefined) {
                localVarQueryParameter['filter.name.$eq'] = filterName$eq;
            }

            if (filterName$neq !== undefined) {
                localVarQueryParameter['filter.name.$neq'] = filterName$neq;
            }

            if (filterName$contains !== undefined) {
                localVarQueryParameter['filter.name.$contains'] = filterName$contains;
            }

            if (filterName$startsWith !== undefined) {
                localVarQueryParameter['filter.name.$starts_with'] = filterName$startsWith;
            }

            if (filterName$nstartsWith !== undefined) {
                localVarQueryParameter['filter.name.$nstarts_with'] = filterName$nstartsWith;
            }

            if (filterName$endsWith !== undefined) {
                localVarQueryParameter['filter.name.$ends_with'] = filterName$endsWith;
            }

            if (filterName$nendsWith !== undefined) {
                localVarQueryParameter['filter.name.$nends_with'] = filterName$nendsWith;
            }

            if (filterName$in) {
                localVarQueryParameter['filter.name.$in'] = filterName$in;
            }

            if (filterName$nin) {
                localVarQueryParameter['filter.name.$nin'] = filterName$nin;
            }

            if (filterName$null !== undefined) {
                localVarQueryParameter['filter.name.$null'] = filterName$null;
            }

            if (filterName$nnull !== undefined) {
                localVarQueryParameter['filter.name.$nnull'] = filterName$nnull;
            }

            if (filterName$empty !== undefined) {
                localVarQueryParameter['filter.name.$empty'] = filterName$empty;
            }

            if (filterName$nempty !== undefined) {
                localVarQueryParameter['filter.name.$nempty'] = filterName$nempty;
            }

            if (filterName$like !== undefined) {
                localVarQueryParameter['filter.name.$like'] = filterName$like;
            }

            if (filterParent$eq !== undefined) {
                localVarQueryParameter['filter.parent.$eq'] = filterParent$eq;
            }

            if (filterParent$neq !== undefined) {
                localVarQueryParameter['filter.parent.$neq'] = filterParent$neq;
            }

            if (filterParent$contains !== undefined) {
                localVarQueryParameter['filter.parent.$contains'] = filterParent$contains;
            }

            if (filterParent$startsWith !== undefined) {
                localVarQueryParameter['filter.parent.$starts_with'] = filterParent$startsWith;
            }

            if (filterParent$nstartsWith !== undefined) {
                localVarQueryParameter['filter.parent.$nstarts_with'] = filterParent$nstartsWith;
            }

            if (filterParent$endsWith !== undefined) {
                localVarQueryParameter['filter.parent.$ends_with'] = filterParent$endsWith;
            }

            if (filterParent$nendsWith !== undefined) {
                localVarQueryParameter['filter.parent.$nends_with'] = filterParent$nendsWith;
            }

            if (filterParent$in) {
                localVarQueryParameter['filter.parent.$in'] = filterParent$in;
            }

            if (filterParent$nin) {
                localVarQueryParameter['filter.parent.$nin'] = filterParent$nin;
            }

            if (filterParent$null !== undefined) {
                localVarQueryParameter['filter.parent.$null'] = filterParent$null;
            }

            if (filterParent$nnull !== undefined) {
                localVarQueryParameter['filter.parent.$nnull'] = filterParent$nnull;
            }

            if (filterParent$empty !== undefined) {
                localVarQueryParameter['filter.parent.$empty'] = filterParent$empty;
            }

            if (filterParent$nempty !== undefined) {
                localVarQueryParameter['filter.parent.$nempty'] = filterParent$nempty;
            }

            if (filterParent$like !== undefined) {
                localVarQueryParameter['filter.parent.$like'] = filterParent$like;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1ListMenuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceListMenu2: async (body: V1ListMenuRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('menuServiceListMenu2', 'body', body)
            const localVarPath = `/v1/sys/menu/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} menuId 
         * @param {MenuServiceUpdateMenuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceUpdateMenu: async (menuId: string, body: MenuServiceUpdateMenuRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('menuServiceUpdateMenu', 'menuId', menuId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('menuServiceUpdateMenu', 'body', body)
            const localVarPath = `/v1/sys/menu/{menu.id}`
                .replace(`{${"menu.id"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} menuId 
         * @param {MenuServiceUpdateMenuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceUpdateMenu2: async (menuId: string, body: MenuServiceUpdateMenuRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'menuId' is not null or undefined
            assertParamExists('menuServiceUpdateMenu2', 'menuId', menuId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('menuServiceUpdateMenu2', 'body', body)
            const localVarPath = `/v1/sys/menu/{menu.id}`
                .replace(`{${"menu.id"}}`, encodeURIComponent(String(menuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MenuServiceApi - functional programming interface
 * @export
 */
export const MenuServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MenuServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1CreateMenuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuServiceCreateMenu(body: V1CreateMenuRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Menu>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuServiceCreateMenu(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MenuServiceApi.menuServiceCreateMenu']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuServiceDeleteMenu(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeleteMenuReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuServiceDeleteMenu(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MenuServiceApi.menuServiceDeleteMenu']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuServiceGetAvailableMenus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetAvailableMenusReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuServiceGetAvailableMenus(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MenuServiceApi.menuServiceGetAvailableMenus']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuServiceGetMenu(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Menu>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuServiceGetMenu(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MenuServiceApi.menuServiceGetMenu']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {string} [filterParent$eq] 
         * @param {string} [filterParent$neq] 
         * @param {string} [filterParent$contains] 
         * @param {string} [filterParent$startsWith] 
         * @param {string} [filterParent$nstartsWith] 
         * @param {string} [filterParent$endsWith] 
         * @param {string} [filterParent$nendsWith] 
         * @param {Array<string>} [filterParent$in] 
         * @param {Array<string>} [filterParent$nin] 
         * @param {boolean} [filterParent$null] 
         * @param {boolean} [filterParent$nnull] 
         * @param {boolean} [filterParent$empty] 
         * @param {boolean} [filterParent$nempty] 
         * @param {string} [filterParent$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuServiceListMenu(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, filterParent$eq?: string, filterParent$neq?: string, filterParent$contains?: string, filterParent$startsWith?: string, filterParent$nstartsWith?: string, filterParent$endsWith?: string, filterParent$nendsWith?: string, filterParent$in?: Array<string>, filterParent$nin?: Array<string>, filterParent$null?: boolean, filterParent$nnull?: boolean, filterParent$empty?: boolean, filterParent$nempty?: boolean, filterParent$like?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListMenuReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuServiceListMenu(pageOffset, pageSize, search, sort, fields, filterId$eq, filterId$neq, filterId$contains, filterId$startsWith, filterId$nstartsWith, filterId$endsWith, filterId$nendsWith, filterId$in, filterId$nin, filterId$null, filterId$nnull, filterId$empty, filterId$nempty, filterId$like, filterName$eq, filterName$neq, filterName$contains, filterName$startsWith, filterName$nstartsWith, filterName$endsWith, filterName$nendsWith, filterName$in, filterName$nin, filterName$null, filterName$nnull, filterName$empty, filterName$nempty, filterName$like, filterParent$eq, filterParent$neq, filterParent$contains, filterParent$startsWith, filterParent$nstartsWith, filterParent$endsWith, filterParent$nendsWith, filterParent$in, filterParent$nin, filterParent$null, filterParent$nnull, filterParent$empty, filterParent$nempty, filterParent$like, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MenuServiceApi.menuServiceListMenu']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1ListMenuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuServiceListMenu2(body: V1ListMenuRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListMenuReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuServiceListMenu2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MenuServiceApi.menuServiceListMenu2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} menuId 
         * @param {MenuServiceUpdateMenuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuServiceUpdateMenu(menuId: string, body: MenuServiceUpdateMenuRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Menu>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuServiceUpdateMenu(menuId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MenuServiceApi.menuServiceUpdateMenu']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} menuId 
         * @param {MenuServiceUpdateMenuRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async menuServiceUpdateMenu2(menuId: string, body: MenuServiceUpdateMenuRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Menu>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.menuServiceUpdateMenu2(menuId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MenuServiceApi.menuServiceUpdateMenu2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MenuServiceApi - factory interface
 * @export
 */
export const MenuServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MenuServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {MenuServiceApiMenuServiceCreateMenuRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceCreateMenu(requestParameters: MenuServiceApiMenuServiceCreateMenuRequest, options?: AxiosRequestConfig): AxiosPromise<V1Menu> {
            return localVarFp.menuServiceCreateMenu(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MenuServiceApiMenuServiceDeleteMenuRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceDeleteMenu(requestParameters: MenuServiceApiMenuServiceDeleteMenuRequest, options?: AxiosRequestConfig): AxiosPromise<V1DeleteMenuReply> {
            return localVarFp.menuServiceDeleteMenu(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceGetAvailableMenus(options?: AxiosRequestConfig): AxiosPromise<V1GetAvailableMenusReply> {
            return localVarFp.menuServiceGetAvailableMenus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MenuServiceApiMenuServiceGetMenuRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceGetMenu(requestParameters: MenuServiceApiMenuServiceGetMenuRequest, options?: AxiosRequestConfig): AxiosPromise<V1Menu> {
            return localVarFp.menuServiceGetMenu(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MenuServiceApiMenuServiceListMenuRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceListMenu(requestParameters: MenuServiceApiMenuServiceListMenuRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1ListMenuReply> {
            return localVarFp.menuServiceListMenu(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterName$eq, requestParameters.filterName$neq, requestParameters.filterName$contains, requestParameters.filterName$startsWith, requestParameters.filterName$nstartsWith, requestParameters.filterName$endsWith, requestParameters.filterName$nendsWith, requestParameters.filterName$in, requestParameters.filterName$nin, requestParameters.filterName$null, requestParameters.filterName$nnull, requestParameters.filterName$empty, requestParameters.filterName$nempty, requestParameters.filterName$like, requestParameters.filterParent$eq, requestParameters.filterParent$neq, requestParameters.filterParent$contains, requestParameters.filterParent$startsWith, requestParameters.filterParent$nstartsWith, requestParameters.filterParent$endsWith, requestParameters.filterParent$nendsWith, requestParameters.filterParent$in, requestParameters.filterParent$nin, requestParameters.filterParent$null, requestParameters.filterParent$nnull, requestParameters.filterParent$empty, requestParameters.filterParent$nempty, requestParameters.filterParent$like, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MenuServiceApiMenuServiceListMenu2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceListMenu2(requestParameters: MenuServiceApiMenuServiceListMenu2Request, options?: AxiosRequestConfig): AxiosPromise<V1ListMenuReply> {
            return localVarFp.menuServiceListMenu2(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MenuServiceApiMenuServiceUpdateMenuRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceUpdateMenu(requestParameters: MenuServiceApiMenuServiceUpdateMenuRequest, options?: AxiosRequestConfig): AxiosPromise<V1Menu> {
            return localVarFp.menuServiceUpdateMenu(requestParameters.menuId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MenuServiceApiMenuServiceUpdateMenu2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        menuServiceUpdateMenu2(requestParameters: MenuServiceApiMenuServiceUpdateMenu2Request, options?: AxiosRequestConfig): AxiosPromise<V1Menu> {
            return localVarFp.menuServiceUpdateMenu2(requestParameters.menuId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for menuServiceCreateMenu operation in MenuServiceApi.
 * @export
 * @interface MenuServiceApiMenuServiceCreateMenuRequest
 */
export interface MenuServiceApiMenuServiceCreateMenuRequest {
    /**
     * 
     * @type {V1CreateMenuRequest}
     * @memberof MenuServiceApiMenuServiceCreateMenu
     */
    readonly body: V1CreateMenuRequest
}

/**
 * Request parameters for menuServiceDeleteMenu operation in MenuServiceApi.
 * @export
 * @interface MenuServiceApiMenuServiceDeleteMenuRequest
 */
export interface MenuServiceApiMenuServiceDeleteMenuRequest {
    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceDeleteMenu
     */
    readonly id: string
}

/**
 * Request parameters for menuServiceGetMenu operation in MenuServiceApi.
 * @export
 * @interface MenuServiceApiMenuServiceGetMenuRequest
 */
export interface MenuServiceApiMenuServiceGetMenuRequest {
    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceGetMenu
     */
    readonly id: string
}

/**
 * Request parameters for menuServiceListMenu operation in MenuServiceApi.
 * @export
 * @interface MenuServiceApiMenuServiceListMenuRequest
 */
export interface MenuServiceApiMenuServiceListMenuRequest {
    /**
     * 
     * @type {number}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly pageOffset?: number

    /**
     * 
     * @type {number}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly fields?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterId$like?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$eq?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$neq?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$contains?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterName$like?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$eq?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$neq?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$contains?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceListMenu
     */
    readonly filterParent$like?: string
}

/**
 * Request parameters for menuServiceListMenu2 operation in MenuServiceApi.
 * @export
 * @interface MenuServiceApiMenuServiceListMenu2Request
 */
export interface MenuServiceApiMenuServiceListMenu2Request {
    /**
     * 
     * @type {V1ListMenuRequest}
     * @memberof MenuServiceApiMenuServiceListMenu2
     */
    readonly body: V1ListMenuRequest
}

/**
 * Request parameters for menuServiceUpdateMenu operation in MenuServiceApi.
 * @export
 * @interface MenuServiceApiMenuServiceUpdateMenuRequest
 */
export interface MenuServiceApiMenuServiceUpdateMenuRequest {
    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceUpdateMenu
     */
    readonly menuId: string

    /**
     * 
     * @type {MenuServiceUpdateMenuRequest}
     * @memberof MenuServiceApiMenuServiceUpdateMenu
     */
    readonly body: MenuServiceUpdateMenuRequest
}

/**
 * Request parameters for menuServiceUpdateMenu2 operation in MenuServiceApi.
 * @export
 * @interface MenuServiceApiMenuServiceUpdateMenu2Request
 */
export interface MenuServiceApiMenuServiceUpdateMenu2Request {
    /**
     * 
     * @type {string}
     * @memberof MenuServiceApiMenuServiceUpdateMenu2
     */
    readonly menuId: string

    /**
     * 
     * @type {MenuServiceUpdateMenuRequest}
     * @memberof MenuServiceApiMenuServiceUpdateMenu2
     */
    readonly body: MenuServiceUpdateMenuRequest
}

/**
 * MenuServiceApi - object-oriented interface
 * @export
 * @class MenuServiceApi
 * @extends {BaseAPI}
 */
export class MenuServiceApi extends BaseAPI {
    /**
     * 
     * @param {MenuServiceApiMenuServiceCreateMenuRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuServiceApi
     */
    public menuServiceCreateMenu(requestParameters: MenuServiceApiMenuServiceCreateMenuRequest, options?: AxiosRequestConfig) {
        return MenuServiceApiFp(this.configuration).menuServiceCreateMenu(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MenuServiceApiMenuServiceDeleteMenuRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuServiceApi
     */
    public menuServiceDeleteMenu(requestParameters: MenuServiceApiMenuServiceDeleteMenuRequest, options?: AxiosRequestConfig) {
        return MenuServiceApiFp(this.configuration).menuServiceDeleteMenu(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuServiceApi
     */
    public menuServiceGetAvailableMenus(options?: AxiosRequestConfig) {
        return MenuServiceApiFp(this.configuration).menuServiceGetAvailableMenus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MenuServiceApiMenuServiceGetMenuRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuServiceApi
     */
    public menuServiceGetMenu(requestParameters: MenuServiceApiMenuServiceGetMenuRequest, options?: AxiosRequestConfig) {
        return MenuServiceApiFp(this.configuration).menuServiceGetMenu(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MenuServiceApiMenuServiceListMenuRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuServiceApi
     */
    public menuServiceListMenu(requestParameters: MenuServiceApiMenuServiceListMenuRequest = {}, options?: AxiosRequestConfig) {
        return MenuServiceApiFp(this.configuration).menuServiceListMenu(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterName$eq, requestParameters.filterName$neq, requestParameters.filterName$contains, requestParameters.filterName$startsWith, requestParameters.filterName$nstartsWith, requestParameters.filterName$endsWith, requestParameters.filterName$nendsWith, requestParameters.filterName$in, requestParameters.filterName$nin, requestParameters.filterName$null, requestParameters.filterName$nnull, requestParameters.filterName$empty, requestParameters.filterName$nempty, requestParameters.filterName$like, requestParameters.filterParent$eq, requestParameters.filterParent$neq, requestParameters.filterParent$contains, requestParameters.filterParent$startsWith, requestParameters.filterParent$nstartsWith, requestParameters.filterParent$endsWith, requestParameters.filterParent$nendsWith, requestParameters.filterParent$in, requestParameters.filterParent$nin, requestParameters.filterParent$null, requestParameters.filterParent$nnull, requestParameters.filterParent$empty, requestParameters.filterParent$nempty, requestParameters.filterParent$like, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MenuServiceApiMenuServiceListMenu2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuServiceApi
     */
    public menuServiceListMenu2(requestParameters: MenuServiceApiMenuServiceListMenu2Request, options?: AxiosRequestConfig) {
        return MenuServiceApiFp(this.configuration).menuServiceListMenu2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MenuServiceApiMenuServiceUpdateMenuRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuServiceApi
     */
    public menuServiceUpdateMenu(requestParameters: MenuServiceApiMenuServiceUpdateMenuRequest, options?: AxiosRequestConfig) {
        return MenuServiceApiFp(this.configuration).menuServiceUpdateMenu(requestParameters.menuId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MenuServiceApiMenuServiceUpdateMenu2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MenuServiceApi
     */
    public menuServiceUpdateMenu2(requestParameters: MenuServiceApiMenuServiceUpdateMenu2Request, options?: AxiosRequestConfig) {
        return MenuServiceApiFp(this.configuration).menuServiceUpdateMenu2(requestParameters.menuId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

