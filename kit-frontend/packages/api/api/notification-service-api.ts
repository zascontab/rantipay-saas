/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { V1DeleteNotificationReply } from '../models';
// @ts-ignore
import { V1ListNotificationReply } from '../models';
// @ts-ignore
import { V1ListNotificationRequest } from '../models';
// @ts-ignore
import { V1Notification } from '../models';
/**
 * NotificationServiceApi - axios parameter creator
 * @export
 */
export const NotificationServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationServiceDeleteNotification: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificationServiceDeleteNotification', 'id', id)
            const localVarPath = `/v1/realtime/notification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationServiceGetNotification: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificationServiceGetNotification', 'id', id)
            const localVarPath = `/v1/realtime/notification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [afterPageToken] 
         * @param {string} [beforePageToken] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {boolean} [filterHasRead$eq] 
         * @param {boolean} [filterHasRead$neq] 
         * @param {boolean} [filterHasRead$null] 
         * @param {boolean} [filterHasRead$nnull] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationServiceListNotification: async (afterPageToken?: string, beforePageToken?: string, pageSize?: number, sort?: Array<string>, fields?: string, filterHasRead$eq?: boolean, filterHasRead$neq?: boolean, filterHasRead$null?: boolean, filterHasRead$nnull?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/realtime/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (afterPageToken !== undefined) {
                localVarQueryParameter['afterPageToken'] = afterPageToken;
            }

            if (beforePageToken !== undefined) {
                localVarQueryParameter['beforePageToken'] = beforePageToken;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterHasRead$eq !== undefined) {
                localVarQueryParameter['filter.hasRead.$eq'] = filterHasRead$eq;
            }

            if (filterHasRead$neq !== undefined) {
                localVarQueryParameter['filter.hasRead.$neq'] = filterHasRead$neq;
            }

            if (filterHasRead$null !== undefined) {
                localVarQueryParameter['filter.hasRead.$null'] = filterHasRead$null;
            }

            if (filterHasRead$nnull !== undefined) {
                localVarQueryParameter['filter.hasRead.$nnull'] = filterHasRead$nnull;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1ListNotificationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationServiceListNotification2: async (body: V1ListNotificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('notificationServiceListNotification2', 'body', body)
            const localVarPath = `/v1/realtime/notification/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ReadNotification set notification as read
         * @param {string} id id. set \&quot;-\&quot; for read all
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationServiceReadNotification: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificationServiceReadNotification', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('notificationServiceReadNotification', 'body', body)
            const localVarPath = `/v1/realtime/notification/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationServiceApi - functional programming interface
 * @export
 */
export const NotificationServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationServiceDeleteNotification(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeleteNotificationReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationServiceDeleteNotification(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['NotificationServiceApi.notificationServiceDeleteNotification']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationServiceGetNotification(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationServiceGetNotification(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['NotificationServiceApi.notificationServiceGetNotification']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [afterPageToken] 
         * @param {string} [beforePageToken] 
         * @param {number} [pageSize] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {boolean} [filterHasRead$eq] 
         * @param {boolean} [filterHasRead$neq] 
         * @param {boolean} [filterHasRead$null] 
         * @param {boolean} [filterHasRead$nnull] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationServiceListNotification(afterPageToken?: string, beforePageToken?: string, pageSize?: number, sort?: Array<string>, fields?: string, filterHasRead$eq?: boolean, filterHasRead$neq?: boolean, filterHasRead$null?: boolean, filterHasRead$nnull?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListNotificationReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationServiceListNotification(afterPageToken, beforePageToken, pageSize, sort, fields, filterHasRead$eq, filterHasRead$neq, filterHasRead$null, filterHasRead$nnull, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['NotificationServiceApi.notificationServiceListNotification']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1ListNotificationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationServiceListNotification2(body: V1ListNotificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListNotificationReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationServiceListNotification2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['NotificationServiceApi.notificationServiceListNotification2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary ReadNotification set notification as read
         * @param {string} id id. set \&quot;-\&quot; for read all
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationServiceReadNotification(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationServiceReadNotification(id, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['NotificationServiceApi.notificationServiceReadNotification']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * NotificationServiceApi - factory interface
 * @export
 */
export const NotificationServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {NotificationServiceApiNotificationServiceDeleteNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationServiceDeleteNotification(requestParameters: NotificationServiceApiNotificationServiceDeleteNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<V1DeleteNotificationReply> {
            return localVarFp.notificationServiceDeleteNotification(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NotificationServiceApiNotificationServiceGetNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationServiceGetNotification(requestParameters: NotificationServiceApiNotificationServiceGetNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<V1Notification> {
            return localVarFp.notificationServiceGetNotification(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NotificationServiceApiNotificationServiceListNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationServiceListNotification(requestParameters: NotificationServiceApiNotificationServiceListNotificationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1ListNotificationReply> {
            return localVarFp.notificationServiceListNotification(requestParameters.afterPageToken, requestParameters.beforePageToken, requestParameters.pageSize, requestParameters.sort, requestParameters.fields, requestParameters.filterHasRead$eq, requestParameters.filterHasRead$neq, requestParameters.filterHasRead$null, requestParameters.filterHasRead$nnull, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NotificationServiceApiNotificationServiceListNotification2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationServiceListNotification2(requestParameters: NotificationServiceApiNotificationServiceListNotification2Request, options?: AxiosRequestConfig): AxiosPromise<V1ListNotificationReply> {
            return localVarFp.notificationServiceListNotification2(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ReadNotification set notification as read
         * @param {NotificationServiceApiNotificationServiceReadNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationServiceReadNotification(requestParameters: NotificationServiceApiNotificationServiceReadNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.notificationServiceReadNotification(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for notificationServiceDeleteNotification operation in NotificationServiceApi.
 * @export
 * @interface NotificationServiceApiNotificationServiceDeleteNotificationRequest
 */
export interface NotificationServiceApiNotificationServiceDeleteNotificationRequest {
    /**
     * 
     * @type {string}
     * @memberof NotificationServiceApiNotificationServiceDeleteNotification
     */
    readonly id: string
}

/**
 * Request parameters for notificationServiceGetNotification operation in NotificationServiceApi.
 * @export
 * @interface NotificationServiceApiNotificationServiceGetNotificationRequest
 */
export interface NotificationServiceApiNotificationServiceGetNotificationRequest {
    /**
     * 
     * @type {string}
     * @memberof NotificationServiceApiNotificationServiceGetNotification
     */
    readonly id: string
}

/**
 * Request parameters for notificationServiceListNotification operation in NotificationServiceApi.
 * @export
 * @interface NotificationServiceApiNotificationServiceListNotificationRequest
 */
export interface NotificationServiceApiNotificationServiceListNotificationRequest {
    /**
     * 
     * @type {string}
     * @memberof NotificationServiceApiNotificationServiceListNotification
     */
    readonly afterPageToken?: string

    /**
     * 
     * @type {string}
     * @memberof NotificationServiceApiNotificationServiceListNotification
     */
    readonly beforePageToken?: string

    /**
     * 
     * @type {number}
     * @memberof NotificationServiceApiNotificationServiceListNotification
     */
    readonly pageSize?: number

    /**
     * 
     * @type {Array<string>}
     * @memberof NotificationServiceApiNotificationServiceListNotification
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof NotificationServiceApiNotificationServiceListNotification
     */
    readonly fields?: string

    /**
     * 
     * @type {boolean}
     * @memberof NotificationServiceApiNotificationServiceListNotification
     */
    readonly filterHasRead$eq?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof NotificationServiceApiNotificationServiceListNotification
     */
    readonly filterHasRead$neq?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof NotificationServiceApiNotificationServiceListNotification
     */
    readonly filterHasRead$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof NotificationServiceApiNotificationServiceListNotification
     */
    readonly filterHasRead$nnull?: boolean
}

/**
 * Request parameters for notificationServiceListNotification2 operation in NotificationServiceApi.
 * @export
 * @interface NotificationServiceApiNotificationServiceListNotification2Request
 */
export interface NotificationServiceApiNotificationServiceListNotification2Request {
    /**
     * 
     * @type {V1ListNotificationRequest}
     * @memberof NotificationServiceApiNotificationServiceListNotification2
     */
    readonly body: V1ListNotificationRequest
}

/**
 * Request parameters for notificationServiceReadNotification operation in NotificationServiceApi.
 * @export
 * @interface NotificationServiceApiNotificationServiceReadNotificationRequest
 */
export interface NotificationServiceApiNotificationServiceReadNotificationRequest {
    /**
     * id. set \&quot;-\&quot; for read all
     * @type {string}
     * @memberof NotificationServiceApiNotificationServiceReadNotification
     */
    readonly id: string

    /**
     * 
     * @type {object}
     * @memberof NotificationServiceApiNotificationServiceReadNotification
     */
    readonly body: object
}

/**
 * NotificationServiceApi - object-oriented interface
 * @export
 * @class NotificationServiceApi
 * @extends {BaseAPI}
 */
export class NotificationServiceApi extends BaseAPI {
    /**
     * 
     * @param {NotificationServiceApiNotificationServiceDeleteNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationServiceApi
     */
    public notificationServiceDeleteNotification(requestParameters: NotificationServiceApiNotificationServiceDeleteNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationServiceApiFp(this.configuration).notificationServiceDeleteNotification(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NotificationServiceApiNotificationServiceGetNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationServiceApi
     */
    public notificationServiceGetNotification(requestParameters: NotificationServiceApiNotificationServiceGetNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationServiceApiFp(this.configuration).notificationServiceGetNotification(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NotificationServiceApiNotificationServiceListNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationServiceApi
     */
    public notificationServiceListNotification(requestParameters: NotificationServiceApiNotificationServiceListNotificationRequest = {}, options?: AxiosRequestConfig) {
        return NotificationServiceApiFp(this.configuration).notificationServiceListNotification(requestParameters.afterPageToken, requestParameters.beforePageToken, requestParameters.pageSize, requestParameters.sort, requestParameters.fields, requestParameters.filterHasRead$eq, requestParameters.filterHasRead$neq, requestParameters.filterHasRead$null, requestParameters.filterHasRead$nnull, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NotificationServiceApiNotificationServiceListNotification2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationServiceApi
     */
    public notificationServiceListNotification2(requestParameters: NotificationServiceApiNotificationServiceListNotification2Request, options?: AxiosRequestConfig) {
        return NotificationServiceApiFp(this.configuration).notificationServiceListNotification2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ReadNotification set notification as read
     * @param {NotificationServiceApiNotificationServiceReadNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationServiceApi
     */
    public notificationServiceReadNotification(requestParameters: NotificationServiceApiNotificationServiceReadNotificationRequest, options?: AxiosRequestConfig) {
        return NotificationServiceApiFp(this.configuration).notificationServiceReadNotification(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

