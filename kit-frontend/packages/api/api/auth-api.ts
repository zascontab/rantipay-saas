/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { V1ChangePasswordByForgetRequest } from '../models';
// @ts-ignore
import { V1ChangePasswordByPreRequest } from '../models';
// @ts-ignore
import { V1ForgetPasswordReply } from '../models';
// @ts-ignore
import { V1ForgetPasswordRequest } from '../models';
// @ts-ignore
import { V1ForgetPasswordTokenReply } from '../models';
// @ts-ignore
import { V1ForgetPasswordTokenRequest } from '../models';
// @ts-ignore
import { V1GetCsrfTokenResponse } from '../models';
// @ts-ignore
import { V1GetLoginResponse } from '../models';
// @ts-ignore
import { V1LoginAuthReply } from '../models';
// @ts-ignore
import { V1LoginAuthRequest } from '../models';
// @ts-ignore
import { V1LoginPasswordlessReply } from '../models';
// @ts-ignore
import { V1LoginPasswordlessRequest } from '../models';
// @ts-ignore
import { V1PasswordlessTokenAuthReply } from '../models';
// @ts-ignore
import { V1PasswordlessTokenAuthRequest } from '../models';
// @ts-ignore
import { V1RefreshTokenAuthReply } from '../models';
// @ts-ignore
import { V1RefreshTokenAuthRequest } from '../models';
// @ts-ignore
import { V1RegisterAuthReply } from '../models';
// @ts-ignore
import { V1RegisterAuthRequest } from '../models';
// @ts-ignore
import { V1TokenReply } from '../models';
// @ts-ignore
import { V1TokenRequest } from '../models';
// @ts-ignore
import { V1ValidatePasswordReply } from '../models';
// @ts-ignore
import { V1ValidatePasswordRequest } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1ChangePasswordByForgetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordByForget: async (body: V1ChangePasswordByForgetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authChangePasswordByForget', 'body', body)
            const localVarPath = `/v1/auth/password/forget/change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1ChangePasswordByPreRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordByPre: async (body: V1ChangePasswordByPreRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authChangePasswordByPre', 'body', body)
            const localVarPath = `/v1/auth/password/change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ForgetPassword  verify forget password token
         * @param {V1ForgetPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgetPassword: async (body: V1ForgetPasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authForgetPassword', 'body', body)
            const localVarPath = `/v1/auth/password/forget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetCsrfToken: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/csrf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [redirect] redirect url
         * @param {string} [loginChallenge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetLogin: async (redirect?: string, loginChallenge?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (redirect !== undefined) {
                localVarQueryParameter['redirect'] = redirect;
            }

            if (loginChallenge !== undefined) {
                localVarQueryParameter['loginChallenge'] = loginChallenge;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1LoginAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin: async (body: V1LoginAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authLogin', 'body', body)
            const localVarPath = `/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1LoginPasswordlessRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPasswordless: async (body: V1LoginPasswordlessRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authLoginPasswordless', 'body', body)
            const localVarPath = `/v1/auth/login/passwordless`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1RefreshTokenAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefresh: async (body: V1RefreshTokenAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authRefresh', 'body', body)
            const localVarPath = `/v1/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1RegisterAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister: async (body: V1RegisterAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authRegister', 'body', body)
            const localVarPath = `/v1/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1ForgetPasswordTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendForgetPasswordToken: async (body: V1ForgetPasswordTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authSendForgetPasswordToken', 'body', body)
            const localVarPath = `/v1/auth/action/forget`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1PasswordlessTokenAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendPasswordlessToken: async (body: V1PasswordlessTokenAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authSendPasswordlessToken', 'body', body)
            const localVarPath = `/v1/auth/action/passwordless`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1TokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authToken: async (body: V1TokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authToken', 'body', body)
            const localVarPath = `/v1/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ValidatePassword  server validation for password strength
         * @param {V1ValidatePasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authValidatePassword: async (body: V1ValidatePasswordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authValidatePassword', 'body', body)
            const localVarPath = `/v1/auth/password/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1ChangePasswordByForgetRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authChangePasswordByForget(body: V1ChangePasswordByForgetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authChangePasswordByForget(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authChangePasswordByForget']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1ChangePasswordByPreRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authChangePasswordByPre(body: V1ChangePasswordByPreRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authChangePasswordByPre(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authChangePasswordByPre']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary ForgetPassword  verify forget password token
         * @param {V1ForgetPasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authForgetPassword(body: V1ForgetPasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ForgetPasswordReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authForgetPassword(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authForgetPassword']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGetCsrfToken(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetCsrfTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGetCsrfToken(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authGetCsrfToken']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [redirect] redirect url
         * @param {string} [loginChallenge] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGetLogin(redirect?: string, loginChallenge?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGetLogin(redirect, loginChallenge, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authGetLogin']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1LoginAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogin(body: V1LoginAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1LoginAuthReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogin(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authLogin']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1LoginPasswordlessRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPasswordless(body: V1LoginPasswordlessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1LoginPasswordlessReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPasswordless(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authLoginPasswordless']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1RefreshTokenAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefresh(body: V1RefreshTokenAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1RefreshTokenAuthReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRefresh(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authRefresh']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1RegisterAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegister(body: V1RegisterAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1RegisterAuthReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegister(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authRegister']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1ForgetPasswordTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSendForgetPasswordToken(body: V1ForgetPasswordTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ForgetPasswordTokenReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSendForgetPasswordToken(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authSendForgetPasswordToken']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1PasswordlessTokenAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSendPasswordlessToken(body: V1PasswordlessTokenAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1PasswordlessTokenAuthReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSendPasswordlessToken(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authSendPasswordlessToken']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1TokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authToken(body: V1TokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TokenReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authToken(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authToken']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary ValidatePassword  server validation for password strength
         * @param {V1ValidatePasswordRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authValidatePassword(body: V1ValidatePasswordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ValidatePasswordReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authValidatePassword(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuthApi.authValidatePassword']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthApiAuthChangePasswordByForgetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordByForget(requestParameters: AuthApiAuthChangePasswordByForgetRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.authChangePasswordByForget(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthChangePasswordByPreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordByPre(requestParameters: AuthApiAuthChangePasswordByPreRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.authChangePasswordByPre(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ForgetPassword  verify forget password token
         * @param {AuthApiAuthForgetPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgetPassword(requestParameters: AuthApiAuthForgetPasswordRequest, options?: AxiosRequestConfig): AxiosPromise<V1ForgetPasswordReply> {
            return localVarFp.authForgetPassword(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetCsrfToken(options?: AxiosRequestConfig): AxiosPromise<V1GetCsrfTokenResponse> {
            return localVarFp.authGetCsrfToken(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthGetLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGetLogin(requestParameters: AuthApiAuthGetLoginRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1GetLoginResponse> {
            return localVarFp.authGetLogin(requestParameters.redirect, requestParameters.loginChallenge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogin(requestParameters: AuthApiAuthLoginRequest, options?: AxiosRequestConfig): AxiosPromise<V1LoginAuthReply> {
            return localVarFp.authLogin(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthLoginPasswordlessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPasswordless(requestParameters: AuthApiAuthLoginPasswordlessRequest, options?: AxiosRequestConfig): AxiosPromise<V1LoginPasswordlessReply> {
            return localVarFp.authLoginPasswordless(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthRefreshRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefresh(requestParameters: AuthApiAuthRefreshRequest, options?: AxiosRequestConfig): AxiosPromise<V1RefreshTokenAuthReply> {
            return localVarFp.authRefresh(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthRegisterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegister(requestParameters: AuthApiAuthRegisterRequest, options?: AxiosRequestConfig): AxiosPromise<V1RegisterAuthReply> {
            return localVarFp.authRegister(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthSendForgetPasswordTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendForgetPasswordToken(requestParameters: AuthApiAuthSendForgetPasswordTokenRequest, options?: AxiosRequestConfig): AxiosPromise<V1ForgetPasswordTokenReply> {
            return localVarFp.authSendForgetPasswordToken(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthSendPasswordlessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendPasswordlessToken(requestParameters: AuthApiAuthSendPasswordlessTokenRequest, options?: AxiosRequestConfig): AxiosPromise<V1PasswordlessTokenAuthReply> {
            return localVarFp.authSendPasswordlessToken(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiAuthTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authToken(requestParameters: AuthApiAuthTokenRequest, options?: AxiosRequestConfig): AxiosPromise<V1TokenReply> {
            return localVarFp.authToken(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ValidatePassword  server validation for password strength
         * @param {AuthApiAuthValidatePasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authValidatePassword(requestParameters: AuthApiAuthValidatePasswordRequest, options?: AxiosRequestConfig): AxiosPromise<V1ValidatePasswordReply> {
            return localVarFp.authValidatePassword(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authChangePasswordByForget operation in AuthApi.
 * @export
 * @interface AuthApiAuthChangePasswordByForgetRequest
 */
export interface AuthApiAuthChangePasswordByForgetRequest {
    /**
     * 
     * @type {V1ChangePasswordByForgetRequest}
     * @memberof AuthApiAuthChangePasswordByForget
     */
    readonly body: V1ChangePasswordByForgetRequest
}

/**
 * Request parameters for authChangePasswordByPre operation in AuthApi.
 * @export
 * @interface AuthApiAuthChangePasswordByPreRequest
 */
export interface AuthApiAuthChangePasswordByPreRequest {
    /**
     * 
     * @type {V1ChangePasswordByPreRequest}
     * @memberof AuthApiAuthChangePasswordByPre
     */
    readonly body: V1ChangePasswordByPreRequest
}

/**
 * Request parameters for authForgetPassword operation in AuthApi.
 * @export
 * @interface AuthApiAuthForgetPasswordRequest
 */
export interface AuthApiAuthForgetPasswordRequest {
    /**
     * 
     * @type {V1ForgetPasswordRequest}
     * @memberof AuthApiAuthForgetPassword
     */
    readonly body: V1ForgetPasswordRequest
}

/**
 * Request parameters for authGetLogin operation in AuthApi.
 * @export
 * @interface AuthApiAuthGetLoginRequest
 */
export interface AuthApiAuthGetLoginRequest {
    /**
     * redirect url
     * @type {string}
     * @memberof AuthApiAuthGetLogin
     */
    readonly redirect?: string

    /**
     * 
     * @type {string}
     * @memberof AuthApiAuthGetLogin
     */
    readonly loginChallenge?: string
}

/**
 * Request parameters for authLogin operation in AuthApi.
 * @export
 * @interface AuthApiAuthLoginRequest
 */
export interface AuthApiAuthLoginRequest {
    /**
     * 
     * @type {V1LoginAuthRequest}
     * @memberof AuthApiAuthLogin
     */
    readonly body: V1LoginAuthRequest
}

/**
 * Request parameters for authLoginPasswordless operation in AuthApi.
 * @export
 * @interface AuthApiAuthLoginPasswordlessRequest
 */
export interface AuthApiAuthLoginPasswordlessRequest {
    /**
     * 
     * @type {V1LoginPasswordlessRequest}
     * @memberof AuthApiAuthLoginPasswordless
     */
    readonly body: V1LoginPasswordlessRequest
}

/**
 * Request parameters for authRefresh operation in AuthApi.
 * @export
 * @interface AuthApiAuthRefreshRequest
 */
export interface AuthApiAuthRefreshRequest {
    /**
     * 
     * @type {V1RefreshTokenAuthRequest}
     * @memberof AuthApiAuthRefresh
     */
    readonly body: V1RefreshTokenAuthRequest
}

/**
 * Request parameters for authRegister operation in AuthApi.
 * @export
 * @interface AuthApiAuthRegisterRequest
 */
export interface AuthApiAuthRegisterRequest {
    /**
     * 
     * @type {V1RegisterAuthRequest}
     * @memberof AuthApiAuthRegister
     */
    readonly body: V1RegisterAuthRequest
}

/**
 * Request parameters for authSendForgetPasswordToken operation in AuthApi.
 * @export
 * @interface AuthApiAuthSendForgetPasswordTokenRequest
 */
export interface AuthApiAuthSendForgetPasswordTokenRequest {
    /**
     * 
     * @type {V1ForgetPasswordTokenRequest}
     * @memberof AuthApiAuthSendForgetPasswordToken
     */
    readonly body: V1ForgetPasswordTokenRequest
}

/**
 * Request parameters for authSendPasswordlessToken operation in AuthApi.
 * @export
 * @interface AuthApiAuthSendPasswordlessTokenRequest
 */
export interface AuthApiAuthSendPasswordlessTokenRequest {
    /**
     * 
     * @type {V1PasswordlessTokenAuthRequest}
     * @memberof AuthApiAuthSendPasswordlessToken
     */
    readonly body: V1PasswordlessTokenAuthRequest
}

/**
 * Request parameters for authToken operation in AuthApi.
 * @export
 * @interface AuthApiAuthTokenRequest
 */
export interface AuthApiAuthTokenRequest {
    /**
     * 
     * @type {V1TokenRequest}
     * @memberof AuthApiAuthToken
     */
    readonly body: V1TokenRequest
}

/**
 * Request parameters for authValidatePassword operation in AuthApi.
 * @export
 * @interface AuthApiAuthValidatePasswordRequest
 */
export interface AuthApiAuthValidatePasswordRequest {
    /**
     * 
     * @type {V1ValidatePasswordRequest}
     * @memberof AuthApiAuthValidatePassword
     */
    readonly body: V1ValidatePasswordRequest
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {AuthApiAuthChangePasswordByForgetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authChangePasswordByForget(requestParameters: AuthApiAuthChangePasswordByForgetRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authChangePasswordByForget(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthChangePasswordByPreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authChangePasswordByPre(requestParameters: AuthApiAuthChangePasswordByPreRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authChangePasswordByPre(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ForgetPassword  verify forget password token
     * @param {AuthApiAuthForgetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authForgetPassword(requestParameters: AuthApiAuthForgetPasswordRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authForgetPassword(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGetCsrfToken(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGetCsrfToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthGetLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGetLogin(requestParameters: AuthApiAuthGetLoginRequest = {}, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGetLogin(requestParameters.redirect, requestParameters.loginChallenge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogin(requestParameters: AuthApiAuthLoginRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLogin(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthLoginPasswordlessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLoginPasswordless(requestParameters: AuthApiAuthLoginPasswordlessRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLoginPasswordless(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthRefreshRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRefresh(requestParameters: AuthApiAuthRefreshRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRefresh(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRegister(requestParameters: AuthApiAuthRegisterRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRegister(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthSendForgetPasswordTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authSendForgetPasswordToken(requestParameters: AuthApiAuthSendForgetPasswordTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authSendForgetPasswordToken(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthSendPasswordlessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authSendPasswordlessToken(requestParameters: AuthApiAuthSendPasswordlessTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authSendPasswordlessToken(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiAuthTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authToken(requestParameters: AuthApiAuthTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authToken(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ValidatePassword  server validation for password strength
     * @param {AuthApiAuthValidatePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authValidatePassword(requestParameters: AuthApiAuthValidatePasswordRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authValidatePassword(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

