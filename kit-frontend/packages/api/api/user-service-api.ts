/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { UserServiceUpdateUserPermissionRequest } from '../models';
// @ts-ignore
import { UserServiceUpdateUserRequest } from '../models';
// @ts-ignore
import { V1CreateUserRequest } from '../models';
// @ts-ignore
import { V1GetUserPermissionReply } from '../models';
// @ts-ignore
import { V1GetUserRoleReply } from '../models';
// @ts-ignore
import { V1InviteUserReply } from '../models';
// @ts-ignore
import { V1InviteUserRequest } from '../models';
// @ts-ignore
import { V1ListUsersRequest } from '../models';
// @ts-ignore
import { V1ListUsersResponse } from '../models';
// @ts-ignore
import { V1SearchUserResponse } from '../models';
// @ts-ignore
import { V1User } from '../models';
/**
 * UserServiceApi - axios parameter creator
 * @export
 */
export const UserServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CreateUser authz: user.user,*,create
         * @param {V1CreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceCreateUser: async (body: V1CreateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userServiceCreateUser', 'body', body)
            const localVarPath = `/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteUser authz: user.user,id,delete
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceDeleteUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userServiceDeleteUser', 'id', id)
            const localVarPath = `/v1/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetUser authz: user.user,id,get
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceGetUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userServiceGetUser', 'id', id)
            const localVarPath = `/v1/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceGetUserPermission: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userServiceGetUserPermission', 'id', id)
            const localVarPath = `/v1/user/{id}/permission`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetUserRoles authz: user.user,id,get
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceGetUserRoles: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userServiceGetUserRoles', 'id', id)
            const localVarPath = `/v1/user/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary InviteUser authz: user.user,*,create
         * @param {V1InviteUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceInviteUser: async (body: V1InviteUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userServiceInviteUser', 'body', body)
            const localVarPath = `/v1/user/public/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ListUsers authz: user.user,*,list
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterGender$eq] 
         * @param {string} [filterGender$neq] 
         * @param {string} [filterGender$contains] 
         * @param {string} [filterGender$startsWith] 
         * @param {string} [filterGender$nstartsWith] 
         * @param {string} [filterGender$endsWith] 
         * @param {string} [filterGender$nendsWith] 
         * @param {Array<string>} [filterGender$in] 
         * @param {Array<string>} [filterGender$nin] 
         * @param {boolean} [filterGender$null] 
         * @param {boolean} [filterGender$nnull] 
         * @param {boolean} [filterGender$empty] 
         * @param {boolean} [filterGender$nempty] 
         * @param {string} [filterGender$like] 
         * @param {string} [filterBirthday$eq] 
         * @param {string} [filterBirthday$neq] 
         * @param {string} [filterBirthday$gt] 
         * @param {string} [filterBirthday$gte] 
         * @param {string} [filterBirthday$lt] 
         * @param {string} [filterBirthday$lte] 
         * @param {boolean} [filterBirthday$null] 
         * @param {boolean} [filterBirthday$nnull] 
         * @param {string} [filterRolesId$eq] 
         * @param {string} [filterRolesId$neq] 
         * @param {string} [filterRolesId$contains] 
         * @param {string} [filterRolesId$startsWith] 
         * @param {string} [filterRolesId$nstartsWith] 
         * @param {string} [filterRolesId$endsWith] 
         * @param {string} [filterRolesId$nendsWith] 
         * @param {Array<string>} [filterRolesId$in] 
         * @param {Array<string>} [filterRolesId$nin] 
         * @param {boolean} [filterRolesId$null] 
         * @param {boolean} [filterRolesId$nnull] 
         * @param {boolean} [filterRolesId$empty] 
         * @param {boolean} [filterRolesId$nempty] 
         * @param {string} [filterRolesId$like] 
         * @param {string} [filterRolesName$eq] 
         * @param {string} [filterRolesName$neq] 
         * @param {string} [filterRolesName$contains] 
         * @param {string} [filterRolesName$startsWith] 
         * @param {string} [filterRolesName$nstartsWith] 
         * @param {string} [filterRolesName$endsWith] 
         * @param {string} [filterRolesName$nendsWith] 
         * @param {Array<string>} [filterRolesName$in] 
         * @param {Array<string>} [filterRolesName$nin] 
         * @param {boolean} [filterRolesName$null] 
         * @param {boolean} [filterRolesName$nnull] 
         * @param {boolean} [filterRolesName$empty] 
         * @param {boolean} [filterRolesName$nempty] 
         * @param {string} [filterRolesName$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceListUsers: async (pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterGender$eq?: string, filterGender$neq?: string, filterGender$contains?: string, filterGender$startsWith?: string, filterGender$nstartsWith?: string, filterGender$endsWith?: string, filterGender$nendsWith?: string, filterGender$in?: Array<string>, filterGender$nin?: Array<string>, filterGender$null?: boolean, filterGender$nnull?: boolean, filterGender$empty?: boolean, filterGender$nempty?: boolean, filterGender$like?: string, filterBirthday$eq?: string, filterBirthday$neq?: string, filterBirthday$gt?: string, filterBirthday$gte?: string, filterBirthday$lt?: string, filterBirthday$lte?: string, filterBirthday$null?: boolean, filterBirthday$nnull?: boolean, filterRolesId$eq?: string, filterRolesId$neq?: string, filterRolesId$contains?: string, filterRolesId$startsWith?: string, filterRolesId$nstartsWith?: string, filterRolesId$endsWith?: string, filterRolesId$nendsWith?: string, filterRolesId$in?: Array<string>, filterRolesId$nin?: Array<string>, filterRolesId$null?: boolean, filterRolesId$nnull?: boolean, filterRolesId$empty?: boolean, filterRolesId$nempty?: boolean, filterRolesId$like?: string, filterRolesName$eq?: string, filterRolesName$neq?: string, filterRolesName$contains?: string, filterRolesName$startsWith?: string, filterRolesName$nstartsWith?: string, filterRolesName$endsWith?: string, filterRolesName$nendsWith?: string, filterRolesName$in?: Array<string>, filterRolesName$nin?: Array<string>, filterRolesName$null?: boolean, filterRolesName$nnull?: boolean, filterRolesName$empty?: boolean, filterRolesName$nempty?: boolean, filterRolesName$like?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageOffset !== undefined) {
                localVarQueryParameter['pageOffset'] = pageOffset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterId$eq !== undefined) {
                localVarQueryParameter['filter.id.$eq'] = filterId$eq;
            }

            if (filterId$neq !== undefined) {
                localVarQueryParameter['filter.id.$neq'] = filterId$neq;
            }

            if (filterId$contains !== undefined) {
                localVarQueryParameter['filter.id.$contains'] = filterId$contains;
            }

            if (filterId$startsWith !== undefined) {
                localVarQueryParameter['filter.id.$starts_with'] = filterId$startsWith;
            }

            if (filterId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.id.$nstarts_with'] = filterId$nstartsWith;
            }

            if (filterId$endsWith !== undefined) {
                localVarQueryParameter['filter.id.$ends_with'] = filterId$endsWith;
            }

            if (filterId$nendsWith !== undefined) {
                localVarQueryParameter['filter.id.$nends_with'] = filterId$nendsWith;
            }

            if (filterId$in) {
                localVarQueryParameter['filter.id.$in'] = filterId$in;
            }

            if (filterId$nin) {
                localVarQueryParameter['filter.id.$nin'] = filterId$nin;
            }

            if (filterId$null !== undefined) {
                localVarQueryParameter['filter.id.$null'] = filterId$null;
            }

            if (filterId$nnull !== undefined) {
                localVarQueryParameter['filter.id.$nnull'] = filterId$nnull;
            }

            if (filterId$empty !== undefined) {
                localVarQueryParameter['filter.id.$empty'] = filterId$empty;
            }

            if (filterId$nempty !== undefined) {
                localVarQueryParameter['filter.id.$nempty'] = filterId$nempty;
            }

            if (filterId$like !== undefined) {
                localVarQueryParameter['filter.id.$like'] = filterId$like;
            }

            if (filterGender$eq !== undefined) {
                localVarQueryParameter['filter.gender.$eq'] = filterGender$eq;
            }

            if (filterGender$neq !== undefined) {
                localVarQueryParameter['filter.gender.$neq'] = filterGender$neq;
            }

            if (filterGender$contains !== undefined) {
                localVarQueryParameter['filter.gender.$contains'] = filterGender$contains;
            }

            if (filterGender$startsWith !== undefined) {
                localVarQueryParameter['filter.gender.$starts_with'] = filterGender$startsWith;
            }

            if (filterGender$nstartsWith !== undefined) {
                localVarQueryParameter['filter.gender.$nstarts_with'] = filterGender$nstartsWith;
            }

            if (filterGender$endsWith !== undefined) {
                localVarQueryParameter['filter.gender.$ends_with'] = filterGender$endsWith;
            }

            if (filterGender$nendsWith !== undefined) {
                localVarQueryParameter['filter.gender.$nends_with'] = filterGender$nendsWith;
            }

            if (filterGender$in) {
                localVarQueryParameter['filter.gender.$in'] = filterGender$in;
            }

            if (filterGender$nin) {
                localVarQueryParameter['filter.gender.$nin'] = filterGender$nin;
            }

            if (filterGender$null !== undefined) {
                localVarQueryParameter['filter.gender.$null'] = filterGender$null;
            }

            if (filterGender$nnull !== undefined) {
                localVarQueryParameter['filter.gender.$nnull'] = filterGender$nnull;
            }

            if (filterGender$empty !== undefined) {
                localVarQueryParameter['filter.gender.$empty'] = filterGender$empty;
            }

            if (filterGender$nempty !== undefined) {
                localVarQueryParameter['filter.gender.$nempty'] = filterGender$nempty;
            }

            if (filterGender$like !== undefined) {
                localVarQueryParameter['filter.gender.$like'] = filterGender$like;
            }

            if (filterBirthday$eq !== undefined) {
                localVarQueryParameter['filter.birthday.$eq'] = (filterBirthday$eq as any instanceof Date) ?
                    (filterBirthday$eq as any).toISOString() :
                    filterBirthday$eq;
            }

            if (filterBirthday$neq !== undefined) {
                localVarQueryParameter['filter.birthday.$neq'] = (filterBirthday$neq as any instanceof Date) ?
                    (filterBirthday$neq as any).toISOString() :
                    filterBirthday$neq;
            }

            if (filterBirthday$gt !== undefined) {
                localVarQueryParameter['filter.birthday.$gt'] = (filterBirthday$gt as any instanceof Date) ?
                    (filterBirthday$gt as any).toISOString() :
                    filterBirthday$gt;
            }

            if (filterBirthday$gte !== undefined) {
                localVarQueryParameter['filter.birthday.$gte'] = (filterBirthday$gte as any instanceof Date) ?
                    (filterBirthday$gte as any).toISOString() :
                    filterBirthday$gte;
            }

            if (filterBirthday$lt !== undefined) {
                localVarQueryParameter['filter.birthday.$lt'] = (filterBirthday$lt as any instanceof Date) ?
                    (filterBirthday$lt as any).toISOString() :
                    filterBirthday$lt;
            }

            if (filterBirthday$lte !== undefined) {
                localVarQueryParameter['filter.birthday.$lte'] = (filterBirthday$lte as any instanceof Date) ?
                    (filterBirthday$lte as any).toISOString() :
                    filterBirthday$lte;
            }

            if (filterBirthday$null !== undefined) {
                localVarQueryParameter['filter.birthday.$null'] = filterBirthday$null;
            }

            if (filterBirthday$nnull !== undefined) {
                localVarQueryParameter['filter.birthday.$nnull'] = filterBirthday$nnull;
            }

            if (filterRolesId$eq !== undefined) {
                localVarQueryParameter['filter.roles.id.$eq'] = filterRolesId$eq;
            }

            if (filterRolesId$neq !== undefined) {
                localVarQueryParameter['filter.roles.id.$neq'] = filterRolesId$neq;
            }

            if (filterRolesId$contains !== undefined) {
                localVarQueryParameter['filter.roles.id.$contains'] = filterRolesId$contains;
            }

            if (filterRolesId$startsWith !== undefined) {
                localVarQueryParameter['filter.roles.id.$starts_with'] = filterRolesId$startsWith;
            }

            if (filterRolesId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.roles.id.$nstarts_with'] = filterRolesId$nstartsWith;
            }

            if (filterRolesId$endsWith !== undefined) {
                localVarQueryParameter['filter.roles.id.$ends_with'] = filterRolesId$endsWith;
            }

            if (filterRolesId$nendsWith !== undefined) {
                localVarQueryParameter['filter.roles.id.$nends_with'] = filterRolesId$nendsWith;
            }

            if (filterRolesId$in) {
                localVarQueryParameter['filter.roles.id.$in'] = filterRolesId$in;
            }

            if (filterRolesId$nin) {
                localVarQueryParameter['filter.roles.id.$nin'] = filterRolesId$nin;
            }

            if (filterRolesId$null !== undefined) {
                localVarQueryParameter['filter.roles.id.$null'] = filterRolesId$null;
            }

            if (filterRolesId$nnull !== undefined) {
                localVarQueryParameter['filter.roles.id.$nnull'] = filterRolesId$nnull;
            }

            if (filterRolesId$empty !== undefined) {
                localVarQueryParameter['filter.roles.id.$empty'] = filterRolesId$empty;
            }

            if (filterRolesId$nempty !== undefined) {
                localVarQueryParameter['filter.roles.id.$nempty'] = filterRolesId$nempty;
            }

            if (filterRolesId$like !== undefined) {
                localVarQueryParameter['filter.roles.id.$like'] = filterRolesId$like;
            }

            if (filterRolesName$eq !== undefined) {
                localVarQueryParameter['filter.roles.name.$eq'] = filterRolesName$eq;
            }

            if (filterRolesName$neq !== undefined) {
                localVarQueryParameter['filter.roles.name.$neq'] = filterRolesName$neq;
            }

            if (filterRolesName$contains !== undefined) {
                localVarQueryParameter['filter.roles.name.$contains'] = filterRolesName$contains;
            }

            if (filterRolesName$startsWith !== undefined) {
                localVarQueryParameter['filter.roles.name.$starts_with'] = filterRolesName$startsWith;
            }

            if (filterRolesName$nstartsWith !== undefined) {
                localVarQueryParameter['filter.roles.name.$nstarts_with'] = filterRolesName$nstartsWith;
            }

            if (filterRolesName$endsWith !== undefined) {
                localVarQueryParameter['filter.roles.name.$ends_with'] = filterRolesName$endsWith;
            }

            if (filterRolesName$nendsWith !== undefined) {
                localVarQueryParameter['filter.roles.name.$nends_with'] = filterRolesName$nendsWith;
            }

            if (filterRolesName$in) {
                localVarQueryParameter['filter.roles.name.$in'] = filterRolesName$in;
            }

            if (filterRolesName$nin) {
                localVarQueryParameter['filter.roles.name.$nin'] = filterRolesName$nin;
            }

            if (filterRolesName$null !== undefined) {
                localVarQueryParameter['filter.roles.name.$null'] = filterRolesName$null;
            }

            if (filterRolesName$nnull !== undefined) {
                localVarQueryParameter['filter.roles.name.$nnull'] = filterRolesName$nnull;
            }

            if (filterRolesName$empty !== undefined) {
                localVarQueryParameter['filter.roles.name.$empty'] = filterRolesName$empty;
            }

            if (filterRolesName$nempty !== undefined) {
                localVarQueryParameter['filter.roles.name.$nempty'] = filterRolesName$nempty;
            }

            if (filterRolesName$like !== undefined) {
                localVarQueryParameter['filter.roles.name.$like'] = filterRolesName$like;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ListUsers authz: user.user,*,list
         * @param {V1ListUsersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceListUsers2: async (body: V1ListUsersRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userServiceListUsers2', 'body', body)
            const localVarPath = `/v1/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [identity] 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [phone] 
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServicePublicSearchUser: async (identity?: string, username?: string, email?: string, phone?: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/user/public/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (identity !== undefined) {
                localVarQueryParameter['identity'] = identity;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UpdateUser authz: user.user,id,update
         * @param {string} userId 
         * @param {UserServiceUpdateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceUpdateUser: async (userId: string, body: UserServiceUpdateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userServiceUpdateUser', 'userId', userId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userServiceUpdateUser', 'body', body)
            const localVarPath = `/v1/user/{user.id}`
                .replace(`{${"user.id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UpdateUser authz: user.user,id,update
         * @param {string} userId 
         * @param {UserServiceUpdateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceUpdateUser2: async (userId: string, body: UserServiceUpdateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userServiceUpdateUser2', 'userId', userId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userServiceUpdateUser2', 'body', body)
            const localVarPath = `/v1/user/{user.id}`
                .replace(`{${"user.id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UserServiceUpdateUserPermissionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceUpdateUserPermission: async (id: string, body: UserServiceUpdateUserPermissionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userServiceUpdateUserPermission', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('userServiceUpdateUserPermission', 'body', body)
            const localVarPath = `/v1/user/{id}/permission`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserServiceApi - functional programming interface
 * @export
 */
export const UserServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary CreateUser authz: user.user,*,create
         * @param {V1CreateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceCreateUser(body: V1CreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceCreateUser(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserServiceApi.userServiceCreateUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary DeleteUser authz: user.user,id,delete
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceDeleteUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceDeleteUser(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserServiceApi.userServiceDeleteUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary GetUser authz: user.user,id,get
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceGetUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceGetUser(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserServiceApi.userServiceGetUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceGetUserPermission(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetUserPermissionReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceGetUserPermission(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserServiceApi.userServiceGetUserPermission']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary GetUserRoles authz: user.user,id,get
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceGetUserRoles(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetUserRoleReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceGetUserRoles(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserServiceApi.userServiceGetUserRoles']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary InviteUser authz: user.user,*,create
         * @param {V1InviteUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceInviteUser(body: V1InviteUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1InviteUserReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceInviteUser(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserServiceApi.userServiceInviteUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary ListUsers authz: user.user,*,list
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterGender$eq] 
         * @param {string} [filterGender$neq] 
         * @param {string} [filterGender$contains] 
         * @param {string} [filterGender$startsWith] 
         * @param {string} [filterGender$nstartsWith] 
         * @param {string} [filterGender$endsWith] 
         * @param {string} [filterGender$nendsWith] 
         * @param {Array<string>} [filterGender$in] 
         * @param {Array<string>} [filterGender$nin] 
         * @param {boolean} [filterGender$null] 
         * @param {boolean} [filterGender$nnull] 
         * @param {boolean} [filterGender$empty] 
         * @param {boolean} [filterGender$nempty] 
         * @param {string} [filterGender$like] 
         * @param {string} [filterBirthday$eq] 
         * @param {string} [filterBirthday$neq] 
         * @param {string} [filterBirthday$gt] 
         * @param {string} [filterBirthday$gte] 
         * @param {string} [filterBirthday$lt] 
         * @param {string} [filterBirthday$lte] 
         * @param {boolean} [filterBirthday$null] 
         * @param {boolean} [filterBirthday$nnull] 
         * @param {string} [filterRolesId$eq] 
         * @param {string} [filterRolesId$neq] 
         * @param {string} [filterRolesId$contains] 
         * @param {string} [filterRolesId$startsWith] 
         * @param {string} [filterRolesId$nstartsWith] 
         * @param {string} [filterRolesId$endsWith] 
         * @param {string} [filterRolesId$nendsWith] 
         * @param {Array<string>} [filterRolesId$in] 
         * @param {Array<string>} [filterRolesId$nin] 
         * @param {boolean} [filterRolesId$null] 
         * @param {boolean} [filterRolesId$nnull] 
         * @param {boolean} [filterRolesId$empty] 
         * @param {boolean} [filterRolesId$nempty] 
         * @param {string} [filterRolesId$like] 
         * @param {string} [filterRolesName$eq] 
         * @param {string} [filterRolesName$neq] 
         * @param {string} [filterRolesName$contains] 
         * @param {string} [filterRolesName$startsWith] 
         * @param {string} [filterRolesName$nstartsWith] 
         * @param {string} [filterRolesName$endsWith] 
         * @param {string} [filterRolesName$nendsWith] 
         * @param {Array<string>} [filterRolesName$in] 
         * @param {Array<string>} [filterRolesName$nin] 
         * @param {boolean} [filterRolesName$null] 
         * @param {boolean} [filterRolesName$nnull] 
         * @param {boolean} [filterRolesName$empty] 
         * @param {boolean} [filterRolesName$nempty] 
         * @param {string} [filterRolesName$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceListUsers(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterGender$eq?: string, filterGender$neq?: string, filterGender$contains?: string, filterGender$startsWith?: string, filterGender$nstartsWith?: string, filterGender$endsWith?: string, filterGender$nendsWith?: string, filterGender$in?: Array<string>, filterGender$nin?: Array<string>, filterGender$null?: boolean, filterGender$nnull?: boolean, filterGender$empty?: boolean, filterGender$nempty?: boolean, filterGender$like?: string, filterBirthday$eq?: string, filterBirthday$neq?: string, filterBirthday$gt?: string, filterBirthday$gte?: string, filterBirthday$lt?: string, filterBirthday$lte?: string, filterBirthday$null?: boolean, filterBirthday$nnull?: boolean, filterRolesId$eq?: string, filterRolesId$neq?: string, filterRolesId$contains?: string, filterRolesId$startsWith?: string, filterRolesId$nstartsWith?: string, filterRolesId$endsWith?: string, filterRolesId$nendsWith?: string, filterRolesId$in?: Array<string>, filterRolesId$nin?: Array<string>, filterRolesId$null?: boolean, filterRolesId$nnull?: boolean, filterRolesId$empty?: boolean, filterRolesId$nempty?: boolean, filterRolesId$like?: string, filterRolesName$eq?: string, filterRolesName$neq?: string, filterRolesName$contains?: string, filterRolesName$startsWith?: string, filterRolesName$nstartsWith?: string, filterRolesName$endsWith?: string, filterRolesName$nendsWith?: string, filterRolesName$in?: Array<string>, filterRolesName$nin?: Array<string>, filterRolesName$null?: boolean, filterRolesName$nnull?: boolean, filterRolesName$empty?: boolean, filterRolesName$nempty?: boolean, filterRolesName$like?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceListUsers(pageOffset, pageSize, search, sort, fields, filterId$eq, filterId$neq, filterId$contains, filterId$startsWith, filterId$nstartsWith, filterId$endsWith, filterId$nendsWith, filterId$in, filterId$nin, filterId$null, filterId$nnull, filterId$empty, filterId$nempty, filterId$like, filterGender$eq, filterGender$neq, filterGender$contains, filterGender$startsWith, filterGender$nstartsWith, filterGender$endsWith, filterGender$nendsWith, filterGender$in, filterGender$nin, filterGender$null, filterGender$nnull, filterGender$empty, filterGender$nempty, filterGender$like, filterBirthday$eq, filterBirthday$neq, filterBirthday$gt, filterBirthday$gte, filterBirthday$lt, filterBirthday$lte, filterBirthday$null, filterBirthday$nnull, filterRolesId$eq, filterRolesId$neq, filterRolesId$contains, filterRolesId$startsWith, filterRolesId$nstartsWith, filterRolesId$endsWith, filterRolesId$nendsWith, filterRolesId$in, filterRolesId$nin, filterRolesId$null, filterRolesId$nnull, filterRolesId$empty, filterRolesId$nempty, filterRolesId$like, filterRolesName$eq, filterRolesName$neq, filterRolesName$contains, filterRolesName$startsWith, filterRolesName$nstartsWith, filterRolesName$endsWith, filterRolesName$nendsWith, filterRolesName$in, filterRolesName$nin, filterRolesName$null, filterRolesName$nnull, filterRolesName$empty, filterRolesName$nempty, filterRolesName$like, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserServiceApi.userServiceListUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary ListUsers authz: user.user,*,list
         * @param {V1ListUsersRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceListUsers2(body: V1ListUsersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceListUsers2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserServiceApi.userServiceListUsers2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} [identity] 
         * @param {string} [username] 
         * @param {string} [email] 
         * @param {string} [phone] 
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServicePublicSearchUser(identity?: string, username?: string, email?: string, phone?: string, fields?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1SearchUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServicePublicSearchUser(identity, username, email, phone, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserServiceApi.userServicePublicSearchUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary UpdateUser authz: user.user,id,update
         * @param {string} userId 
         * @param {UserServiceUpdateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceUpdateUser(userId: string, body: UserServiceUpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceUpdateUser(userId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserServiceApi.userServiceUpdateUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary UpdateUser authz: user.user,id,update
         * @param {string} userId 
         * @param {UserServiceUpdateUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceUpdateUser2(userId: string, body: UserServiceUpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceUpdateUser2(userId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserServiceApi.userServiceUpdateUser2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UserServiceUpdateUserPermissionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userServiceUpdateUserPermission(id: string, body: UserServiceUpdateUserPermissionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userServiceUpdateUserPermission(id, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserServiceApi.userServiceUpdateUserPermission']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UserServiceApi - factory interface
 * @export
 */
export const UserServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary CreateUser authz: user.user,*,create
         * @param {UserServiceApiUserServiceCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceCreateUser(requestParameters: UserServiceApiUserServiceCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<V1User> {
            return localVarFp.userServiceCreateUser(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteUser authz: user.user,id,delete
         * @param {UserServiceApiUserServiceDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceDeleteUser(requestParameters: UserServiceApiUserServiceDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.userServiceDeleteUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetUser authz: user.user,id,get
         * @param {UserServiceApiUserServiceGetUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceGetUser(requestParameters: UserServiceApiUserServiceGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<V1User> {
            return localVarFp.userServiceGetUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserServiceApiUserServiceGetUserPermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceGetUserPermission(requestParameters: UserServiceApiUserServiceGetUserPermissionRequest, options?: AxiosRequestConfig): AxiosPromise<V1GetUserPermissionReply> {
            return localVarFp.userServiceGetUserPermission(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetUserRoles authz: user.user,id,get
         * @param {UserServiceApiUserServiceGetUserRolesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceGetUserRoles(requestParameters: UserServiceApiUserServiceGetUserRolesRequest, options?: AxiosRequestConfig): AxiosPromise<V1GetUserRoleReply> {
            return localVarFp.userServiceGetUserRoles(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary InviteUser authz: user.user,*,create
         * @param {UserServiceApiUserServiceInviteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceInviteUser(requestParameters: UserServiceApiUserServiceInviteUserRequest, options?: AxiosRequestConfig): AxiosPromise<V1InviteUserReply> {
            return localVarFp.userServiceInviteUser(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ListUsers authz: user.user,*,list
         * @param {UserServiceApiUserServiceListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceListUsers(requestParameters: UserServiceApiUserServiceListUsersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1ListUsersResponse> {
            return localVarFp.userServiceListUsers(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterGender$eq, requestParameters.filterGender$neq, requestParameters.filterGender$contains, requestParameters.filterGender$startsWith, requestParameters.filterGender$nstartsWith, requestParameters.filterGender$endsWith, requestParameters.filterGender$nendsWith, requestParameters.filterGender$in, requestParameters.filterGender$nin, requestParameters.filterGender$null, requestParameters.filterGender$nnull, requestParameters.filterGender$empty, requestParameters.filterGender$nempty, requestParameters.filterGender$like, requestParameters.filterBirthday$eq, requestParameters.filterBirthday$neq, requestParameters.filterBirthday$gt, requestParameters.filterBirthday$gte, requestParameters.filterBirthday$lt, requestParameters.filterBirthday$lte, requestParameters.filterBirthday$null, requestParameters.filterBirthday$nnull, requestParameters.filterRolesId$eq, requestParameters.filterRolesId$neq, requestParameters.filterRolesId$contains, requestParameters.filterRolesId$startsWith, requestParameters.filterRolesId$nstartsWith, requestParameters.filterRolesId$endsWith, requestParameters.filterRolesId$nendsWith, requestParameters.filterRolesId$in, requestParameters.filterRolesId$nin, requestParameters.filterRolesId$null, requestParameters.filterRolesId$nnull, requestParameters.filterRolesId$empty, requestParameters.filterRolesId$nempty, requestParameters.filterRolesId$like, requestParameters.filterRolesName$eq, requestParameters.filterRolesName$neq, requestParameters.filterRolesName$contains, requestParameters.filterRolesName$startsWith, requestParameters.filterRolesName$nstartsWith, requestParameters.filterRolesName$endsWith, requestParameters.filterRolesName$nendsWith, requestParameters.filterRolesName$in, requestParameters.filterRolesName$nin, requestParameters.filterRolesName$null, requestParameters.filterRolesName$nnull, requestParameters.filterRolesName$empty, requestParameters.filterRolesName$nempty, requestParameters.filterRolesName$like, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ListUsers authz: user.user,*,list
         * @param {UserServiceApiUserServiceListUsers2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceListUsers2(requestParameters: UserServiceApiUserServiceListUsers2Request, options?: AxiosRequestConfig): AxiosPromise<V1ListUsersResponse> {
            return localVarFp.userServiceListUsers2(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserServiceApiUserServicePublicSearchUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServicePublicSearchUser(requestParameters: UserServiceApiUserServicePublicSearchUserRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1SearchUserResponse> {
            return localVarFp.userServicePublicSearchUser(requestParameters.identity, requestParameters.username, requestParameters.email, requestParameters.phone, requestParameters.fields, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary UpdateUser authz: user.user,id,update
         * @param {UserServiceApiUserServiceUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceUpdateUser(requestParameters: UserServiceApiUserServiceUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<V1User> {
            return localVarFp.userServiceUpdateUser(requestParameters.userId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary UpdateUser authz: user.user,id,update
         * @param {UserServiceApiUserServiceUpdateUser2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceUpdateUser2(requestParameters: UserServiceApiUserServiceUpdateUser2Request, options?: AxiosRequestConfig): AxiosPromise<V1User> {
            return localVarFp.userServiceUpdateUser2(requestParameters.userId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserServiceApiUserServiceUpdateUserPermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userServiceUpdateUserPermission(requestParameters: UserServiceApiUserServiceUpdateUserPermissionRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.userServiceUpdateUserPermission(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userServiceCreateUser operation in UserServiceApi.
 * @export
 * @interface UserServiceApiUserServiceCreateUserRequest
 */
export interface UserServiceApiUserServiceCreateUserRequest {
    /**
     * 
     * @type {V1CreateUserRequest}
     * @memberof UserServiceApiUserServiceCreateUser
     */
    readonly body: V1CreateUserRequest
}

/**
 * Request parameters for userServiceDeleteUser operation in UserServiceApi.
 * @export
 * @interface UserServiceApiUserServiceDeleteUserRequest
 */
export interface UserServiceApiUserServiceDeleteUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceDeleteUser
     */
    readonly id: string
}

/**
 * Request parameters for userServiceGetUser operation in UserServiceApi.
 * @export
 * @interface UserServiceApiUserServiceGetUserRequest
 */
export interface UserServiceApiUserServiceGetUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceGetUser
     */
    readonly id: string
}

/**
 * Request parameters for userServiceGetUserPermission operation in UserServiceApi.
 * @export
 * @interface UserServiceApiUserServiceGetUserPermissionRequest
 */
export interface UserServiceApiUserServiceGetUserPermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceGetUserPermission
     */
    readonly id: string
}

/**
 * Request parameters for userServiceGetUserRoles operation in UserServiceApi.
 * @export
 * @interface UserServiceApiUserServiceGetUserRolesRequest
 */
export interface UserServiceApiUserServiceGetUserRolesRequest {
    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceGetUserRoles
     */
    readonly id: string
}

/**
 * Request parameters for userServiceInviteUser operation in UserServiceApi.
 * @export
 * @interface UserServiceApiUserServiceInviteUserRequest
 */
export interface UserServiceApiUserServiceInviteUserRequest {
    /**
     * 
     * @type {V1InviteUserRequest}
     * @memberof UserServiceApiUserServiceInviteUser
     */
    readonly body: V1InviteUserRequest
}

/**
 * Request parameters for userServiceListUsers operation in UserServiceApi.
 * @export
 * @interface UserServiceApiUserServiceListUsersRequest
 */
export interface UserServiceApiUserServiceListUsersRequest {
    /**
     * 
     * @type {number}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly pageOffset?: number

    /**
     * 
     * @type {number}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly fields?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterId$like?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$eq?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$neq?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$contains?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterGender$like?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterBirthday$eq?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterBirthday$neq?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterBirthday$gt?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterBirthday$gte?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterBirthday$lt?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterBirthday$lte?: string

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterBirthday$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterBirthday$nnull?: boolean

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesId$like?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$eq?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$neq?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$contains?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceListUsers
     */
    readonly filterRolesName$like?: string
}

/**
 * Request parameters for userServiceListUsers2 operation in UserServiceApi.
 * @export
 * @interface UserServiceApiUserServiceListUsers2Request
 */
export interface UserServiceApiUserServiceListUsers2Request {
    /**
     * 
     * @type {V1ListUsersRequest}
     * @memberof UserServiceApiUserServiceListUsers2
     */
    readonly body: V1ListUsersRequest
}

/**
 * Request parameters for userServicePublicSearchUser operation in UserServiceApi.
 * @export
 * @interface UserServiceApiUserServicePublicSearchUserRequest
 */
export interface UserServiceApiUserServicePublicSearchUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServicePublicSearchUser
     */
    readonly identity?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServicePublicSearchUser
     */
    readonly username?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServicePublicSearchUser
     */
    readonly email?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServicePublicSearchUser
     */
    readonly phone?: string

    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServicePublicSearchUser
     */
    readonly fields?: string
}

/**
 * Request parameters for userServiceUpdateUser operation in UserServiceApi.
 * @export
 * @interface UserServiceApiUserServiceUpdateUserRequest
 */
export interface UserServiceApiUserServiceUpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceUpdateUser
     */
    readonly userId: string

    /**
     * 
     * @type {UserServiceUpdateUserRequest}
     * @memberof UserServiceApiUserServiceUpdateUser
     */
    readonly body: UserServiceUpdateUserRequest
}

/**
 * Request parameters for userServiceUpdateUser2 operation in UserServiceApi.
 * @export
 * @interface UserServiceApiUserServiceUpdateUser2Request
 */
export interface UserServiceApiUserServiceUpdateUser2Request {
    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceUpdateUser2
     */
    readonly userId: string

    /**
     * 
     * @type {UserServiceUpdateUserRequest}
     * @memberof UserServiceApiUserServiceUpdateUser2
     */
    readonly body: UserServiceUpdateUserRequest
}

/**
 * Request parameters for userServiceUpdateUserPermission operation in UserServiceApi.
 * @export
 * @interface UserServiceApiUserServiceUpdateUserPermissionRequest
 */
export interface UserServiceApiUserServiceUpdateUserPermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof UserServiceApiUserServiceUpdateUserPermission
     */
    readonly id: string

    /**
     * 
     * @type {UserServiceUpdateUserPermissionRequest}
     * @memberof UserServiceApiUserServiceUpdateUserPermission
     */
    readonly body: UserServiceUpdateUserPermissionRequest
}

/**
 * UserServiceApi - object-oriented interface
 * @export
 * @class UserServiceApi
 * @extends {BaseAPI}
 */
export class UserServiceApi extends BaseAPI {
    /**
     * 
     * @summary CreateUser authz: user.user,*,create
     * @param {UserServiceApiUserServiceCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceCreateUser(requestParameters: UserServiceApiUserServiceCreateUserRequest, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceCreateUser(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteUser authz: user.user,id,delete
     * @param {UserServiceApiUserServiceDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceDeleteUser(requestParameters: UserServiceApiUserServiceDeleteUserRequest, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceDeleteUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetUser authz: user.user,id,get
     * @param {UserServiceApiUserServiceGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceGetUser(requestParameters: UserServiceApiUserServiceGetUserRequest, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceGetUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserServiceApiUserServiceGetUserPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceGetUserPermission(requestParameters: UserServiceApiUserServiceGetUserPermissionRequest, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceGetUserPermission(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetUserRoles authz: user.user,id,get
     * @param {UserServiceApiUserServiceGetUserRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceGetUserRoles(requestParameters: UserServiceApiUserServiceGetUserRolesRequest, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceGetUserRoles(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary InviteUser authz: user.user,*,create
     * @param {UserServiceApiUserServiceInviteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceInviteUser(requestParameters: UserServiceApiUserServiceInviteUserRequest, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceInviteUser(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ListUsers authz: user.user,*,list
     * @param {UserServiceApiUserServiceListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceListUsers(requestParameters: UserServiceApiUserServiceListUsersRequest = {}, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceListUsers(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterGender$eq, requestParameters.filterGender$neq, requestParameters.filterGender$contains, requestParameters.filterGender$startsWith, requestParameters.filterGender$nstartsWith, requestParameters.filterGender$endsWith, requestParameters.filterGender$nendsWith, requestParameters.filterGender$in, requestParameters.filterGender$nin, requestParameters.filterGender$null, requestParameters.filterGender$nnull, requestParameters.filterGender$empty, requestParameters.filterGender$nempty, requestParameters.filterGender$like, requestParameters.filterBirthday$eq, requestParameters.filterBirthday$neq, requestParameters.filterBirthday$gt, requestParameters.filterBirthday$gte, requestParameters.filterBirthday$lt, requestParameters.filterBirthday$lte, requestParameters.filterBirthday$null, requestParameters.filterBirthday$nnull, requestParameters.filterRolesId$eq, requestParameters.filterRolesId$neq, requestParameters.filterRolesId$contains, requestParameters.filterRolesId$startsWith, requestParameters.filterRolesId$nstartsWith, requestParameters.filterRolesId$endsWith, requestParameters.filterRolesId$nendsWith, requestParameters.filterRolesId$in, requestParameters.filterRolesId$nin, requestParameters.filterRolesId$null, requestParameters.filterRolesId$nnull, requestParameters.filterRolesId$empty, requestParameters.filterRolesId$nempty, requestParameters.filterRolesId$like, requestParameters.filterRolesName$eq, requestParameters.filterRolesName$neq, requestParameters.filterRolesName$contains, requestParameters.filterRolesName$startsWith, requestParameters.filterRolesName$nstartsWith, requestParameters.filterRolesName$endsWith, requestParameters.filterRolesName$nendsWith, requestParameters.filterRolesName$in, requestParameters.filterRolesName$nin, requestParameters.filterRolesName$null, requestParameters.filterRolesName$nnull, requestParameters.filterRolesName$empty, requestParameters.filterRolesName$nempty, requestParameters.filterRolesName$like, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ListUsers authz: user.user,*,list
     * @param {UserServiceApiUserServiceListUsers2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceListUsers2(requestParameters: UserServiceApiUserServiceListUsers2Request, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceListUsers2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserServiceApiUserServicePublicSearchUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServicePublicSearchUser(requestParameters: UserServiceApiUserServicePublicSearchUserRequest = {}, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServicePublicSearchUser(requestParameters.identity, requestParameters.username, requestParameters.email, requestParameters.phone, requestParameters.fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary UpdateUser authz: user.user,id,update
     * @param {UserServiceApiUserServiceUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceUpdateUser(requestParameters: UserServiceApiUserServiceUpdateUserRequest, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceUpdateUser(requestParameters.userId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary UpdateUser authz: user.user,id,update
     * @param {UserServiceApiUserServiceUpdateUser2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceUpdateUser2(requestParameters: UserServiceApiUserServiceUpdateUser2Request, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceUpdateUser2(requestParameters.userId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserServiceApiUserServiceUpdateUserPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserServiceApi
     */
    public userServiceUpdateUserPermission(requestParameters: UserServiceApiUserServiceUpdateUserPermissionRequest, options?: AxiosRequestConfig) {
        return UserServiceApiFp(this.configuration).userServiceUpdateUserPermission(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

