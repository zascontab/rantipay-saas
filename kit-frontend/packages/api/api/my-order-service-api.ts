/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { V1ListOrderReply } from '../models';
// @ts-ignore
import { V1ListOrderRequest } from '../models';
// @ts-ignore
import { V1Order } from '../models';
/**
 * MyOrderServiceApi - axios parameter creator
 * @export
 */
export const MyOrderServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myOrderServiceGetMyOrder: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('myOrderServiceGetMyOrder', 'id', id)
            const localVarPath = `/v1/order/my/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {string} [filterCustomerId$eq] 
         * @param {string} [filterCustomerId$neq] 
         * @param {string} [filterCustomerId$contains] 
         * @param {string} [filterCustomerId$startsWith] 
         * @param {string} [filterCustomerId$nstartsWith] 
         * @param {string} [filterCustomerId$endsWith] 
         * @param {string} [filterCustomerId$nendsWith] 
         * @param {Array<string>} [filterCustomerId$in] 
         * @param {Array<string>} [filterCustomerId$nin] 
         * @param {boolean} [filterCustomerId$null] 
         * @param {boolean} [filterCustomerId$nnull] 
         * @param {boolean} [filterCustomerId$empty] 
         * @param {boolean} [filterCustomerId$nempty] 
         * @param {string} [filterCustomerId$like] 
         * @param {string} [afterPageToken] 
         * @param {string} [beforePageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myOrderServiceListMyOrder: async (pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, filterCustomerId$eq?: string, filterCustomerId$neq?: string, filterCustomerId$contains?: string, filterCustomerId$startsWith?: string, filterCustomerId$nstartsWith?: string, filterCustomerId$endsWith?: string, filterCustomerId$nendsWith?: string, filterCustomerId$in?: Array<string>, filterCustomerId$nin?: Array<string>, filterCustomerId$null?: boolean, filterCustomerId$nnull?: boolean, filterCustomerId$empty?: boolean, filterCustomerId$nempty?: boolean, filterCustomerId$like?: string, afterPageToken?: string, beforePageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/order/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageOffset !== undefined) {
                localVarQueryParameter['pageOffset'] = pageOffset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterId$eq !== undefined) {
                localVarQueryParameter['filter.id.$eq'] = filterId$eq;
            }

            if (filterId$neq !== undefined) {
                localVarQueryParameter['filter.id.$neq'] = filterId$neq;
            }

            if (filterId$contains !== undefined) {
                localVarQueryParameter['filter.id.$contains'] = filterId$contains;
            }

            if (filterId$startsWith !== undefined) {
                localVarQueryParameter['filter.id.$starts_with'] = filterId$startsWith;
            }

            if (filterId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.id.$nstarts_with'] = filterId$nstartsWith;
            }

            if (filterId$endsWith !== undefined) {
                localVarQueryParameter['filter.id.$ends_with'] = filterId$endsWith;
            }

            if (filterId$nendsWith !== undefined) {
                localVarQueryParameter['filter.id.$nends_with'] = filterId$nendsWith;
            }

            if (filterId$in) {
                localVarQueryParameter['filter.id.$in'] = filterId$in;
            }

            if (filterId$nin) {
                localVarQueryParameter['filter.id.$nin'] = filterId$nin;
            }

            if (filterId$null !== undefined) {
                localVarQueryParameter['filter.id.$null'] = filterId$null;
            }

            if (filterId$nnull !== undefined) {
                localVarQueryParameter['filter.id.$nnull'] = filterId$nnull;
            }

            if (filterId$empty !== undefined) {
                localVarQueryParameter['filter.id.$empty'] = filterId$empty;
            }

            if (filterId$nempty !== undefined) {
                localVarQueryParameter['filter.id.$nempty'] = filterId$nempty;
            }

            if (filterId$like !== undefined) {
                localVarQueryParameter['filter.id.$like'] = filterId$like;
            }

            if (filterName$eq !== undefined) {
                localVarQueryParameter['filter.name.$eq'] = filterName$eq;
            }

            if (filterName$neq !== undefined) {
                localVarQueryParameter['filter.name.$neq'] = filterName$neq;
            }

            if (filterName$contains !== undefined) {
                localVarQueryParameter['filter.name.$contains'] = filterName$contains;
            }

            if (filterName$startsWith !== undefined) {
                localVarQueryParameter['filter.name.$starts_with'] = filterName$startsWith;
            }

            if (filterName$nstartsWith !== undefined) {
                localVarQueryParameter['filter.name.$nstarts_with'] = filterName$nstartsWith;
            }

            if (filterName$endsWith !== undefined) {
                localVarQueryParameter['filter.name.$ends_with'] = filterName$endsWith;
            }

            if (filterName$nendsWith !== undefined) {
                localVarQueryParameter['filter.name.$nends_with'] = filterName$nendsWith;
            }

            if (filterName$in) {
                localVarQueryParameter['filter.name.$in'] = filterName$in;
            }

            if (filterName$nin) {
                localVarQueryParameter['filter.name.$nin'] = filterName$nin;
            }

            if (filterName$null !== undefined) {
                localVarQueryParameter['filter.name.$null'] = filterName$null;
            }

            if (filterName$nnull !== undefined) {
                localVarQueryParameter['filter.name.$nnull'] = filterName$nnull;
            }

            if (filterName$empty !== undefined) {
                localVarQueryParameter['filter.name.$empty'] = filterName$empty;
            }

            if (filterName$nempty !== undefined) {
                localVarQueryParameter['filter.name.$nempty'] = filterName$nempty;
            }

            if (filterName$like !== undefined) {
                localVarQueryParameter['filter.name.$like'] = filterName$like;
            }

            if (filterCustomerId$eq !== undefined) {
                localVarQueryParameter['filter.customerId.$eq'] = filterCustomerId$eq;
            }

            if (filterCustomerId$neq !== undefined) {
                localVarQueryParameter['filter.customerId.$neq'] = filterCustomerId$neq;
            }

            if (filterCustomerId$contains !== undefined) {
                localVarQueryParameter['filter.customerId.$contains'] = filterCustomerId$contains;
            }

            if (filterCustomerId$startsWith !== undefined) {
                localVarQueryParameter['filter.customerId.$starts_with'] = filterCustomerId$startsWith;
            }

            if (filterCustomerId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.customerId.$nstarts_with'] = filterCustomerId$nstartsWith;
            }

            if (filterCustomerId$endsWith !== undefined) {
                localVarQueryParameter['filter.customerId.$ends_with'] = filterCustomerId$endsWith;
            }

            if (filterCustomerId$nendsWith !== undefined) {
                localVarQueryParameter['filter.customerId.$nends_with'] = filterCustomerId$nendsWith;
            }

            if (filterCustomerId$in) {
                localVarQueryParameter['filter.customerId.$in'] = filterCustomerId$in;
            }

            if (filterCustomerId$nin) {
                localVarQueryParameter['filter.customerId.$nin'] = filterCustomerId$nin;
            }

            if (filterCustomerId$null !== undefined) {
                localVarQueryParameter['filter.customerId.$null'] = filterCustomerId$null;
            }

            if (filterCustomerId$nnull !== undefined) {
                localVarQueryParameter['filter.customerId.$nnull'] = filterCustomerId$nnull;
            }

            if (filterCustomerId$empty !== undefined) {
                localVarQueryParameter['filter.customerId.$empty'] = filterCustomerId$empty;
            }

            if (filterCustomerId$nempty !== undefined) {
                localVarQueryParameter['filter.customerId.$nempty'] = filterCustomerId$nempty;
            }

            if (filterCustomerId$like !== undefined) {
                localVarQueryParameter['filter.customerId.$like'] = filterCustomerId$like;
            }

            if (afterPageToken !== undefined) {
                localVarQueryParameter['afterPageToken'] = afterPageToken;
            }

            if (beforePageToken !== undefined) {
                localVarQueryParameter['beforePageToken'] = beforePageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1ListOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myOrderServiceListMyOrder2: async (body: V1ListOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('myOrderServiceListMyOrder2', 'body', body)
            const localVarPath = `/v1/order/my/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orderId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myOrderServiceRefundMyOrder: async (orderId: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('myOrderServiceRefundMyOrder', 'orderId', orderId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('myOrderServiceRefundMyOrder', 'body', body)
            const localVarPath = `/v1/order/my/{orderId}/refund`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MyOrderServiceApi - functional programming interface
 * @export
 */
export const MyOrderServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MyOrderServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myOrderServiceGetMyOrder(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myOrderServiceGetMyOrder(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MyOrderServiceApi.myOrderServiceGetMyOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {string} [filterCustomerId$eq] 
         * @param {string} [filterCustomerId$neq] 
         * @param {string} [filterCustomerId$contains] 
         * @param {string} [filterCustomerId$startsWith] 
         * @param {string} [filterCustomerId$nstartsWith] 
         * @param {string} [filterCustomerId$endsWith] 
         * @param {string} [filterCustomerId$nendsWith] 
         * @param {Array<string>} [filterCustomerId$in] 
         * @param {Array<string>} [filterCustomerId$nin] 
         * @param {boolean} [filterCustomerId$null] 
         * @param {boolean} [filterCustomerId$nnull] 
         * @param {boolean} [filterCustomerId$empty] 
         * @param {boolean} [filterCustomerId$nempty] 
         * @param {string} [filterCustomerId$like] 
         * @param {string} [afterPageToken] 
         * @param {string} [beforePageToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myOrderServiceListMyOrder(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, filterCustomerId$eq?: string, filterCustomerId$neq?: string, filterCustomerId$contains?: string, filterCustomerId$startsWith?: string, filterCustomerId$nstartsWith?: string, filterCustomerId$endsWith?: string, filterCustomerId$nendsWith?: string, filterCustomerId$in?: Array<string>, filterCustomerId$nin?: Array<string>, filterCustomerId$null?: boolean, filterCustomerId$nnull?: boolean, filterCustomerId$empty?: boolean, filterCustomerId$nempty?: boolean, filterCustomerId$like?: string, afterPageToken?: string, beforePageToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListOrderReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myOrderServiceListMyOrder(pageOffset, pageSize, search, sort, fields, filterId$eq, filterId$neq, filterId$contains, filterId$startsWith, filterId$nstartsWith, filterId$endsWith, filterId$nendsWith, filterId$in, filterId$nin, filterId$null, filterId$nnull, filterId$empty, filterId$nempty, filterId$like, filterName$eq, filterName$neq, filterName$contains, filterName$startsWith, filterName$nstartsWith, filterName$endsWith, filterName$nendsWith, filterName$in, filterName$nin, filterName$null, filterName$nnull, filterName$empty, filterName$nempty, filterName$like, filterCustomerId$eq, filterCustomerId$neq, filterCustomerId$contains, filterCustomerId$startsWith, filterCustomerId$nstartsWith, filterCustomerId$endsWith, filterCustomerId$nendsWith, filterCustomerId$in, filterCustomerId$nin, filterCustomerId$null, filterCustomerId$nnull, filterCustomerId$empty, filterCustomerId$nempty, filterCustomerId$like, afterPageToken, beforePageToken, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MyOrderServiceApi.myOrderServiceListMyOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {V1ListOrderRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myOrderServiceListMyOrder2(body: V1ListOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListOrderReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myOrderServiceListMyOrder2(body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MyOrderServiceApi.myOrderServiceListMyOrder2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {string} orderId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async myOrderServiceRefundMyOrder(orderId: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.myOrderServiceRefundMyOrder(orderId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MyOrderServiceApi.myOrderServiceRefundMyOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MyOrderServiceApi - factory interface
 * @export
 */
export const MyOrderServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MyOrderServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {MyOrderServiceApiMyOrderServiceGetMyOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myOrderServiceGetMyOrder(requestParameters: MyOrderServiceApiMyOrderServiceGetMyOrderRequest, options?: AxiosRequestConfig): AxiosPromise<V1Order> {
            return localVarFp.myOrderServiceGetMyOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MyOrderServiceApiMyOrderServiceListMyOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myOrderServiceListMyOrder(requestParameters: MyOrderServiceApiMyOrderServiceListMyOrderRequest = {}, options?: AxiosRequestConfig): AxiosPromise<V1ListOrderReply> {
            return localVarFp.myOrderServiceListMyOrder(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterName$eq, requestParameters.filterName$neq, requestParameters.filterName$contains, requestParameters.filterName$startsWith, requestParameters.filterName$nstartsWith, requestParameters.filterName$endsWith, requestParameters.filterName$nendsWith, requestParameters.filterName$in, requestParameters.filterName$nin, requestParameters.filterName$null, requestParameters.filterName$nnull, requestParameters.filterName$empty, requestParameters.filterName$nempty, requestParameters.filterName$like, requestParameters.filterCustomerId$eq, requestParameters.filterCustomerId$neq, requestParameters.filterCustomerId$contains, requestParameters.filterCustomerId$startsWith, requestParameters.filterCustomerId$nstartsWith, requestParameters.filterCustomerId$endsWith, requestParameters.filterCustomerId$nendsWith, requestParameters.filterCustomerId$in, requestParameters.filterCustomerId$nin, requestParameters.filterCustomerId$null, requestParameters.filterCustomerId$nnull, requestParameters.filterCustomerId$empty, requestParameters.filterCustomerId$nempty, requestParameters.filterCustomerId$like, requestParameters.afterPageToken, requestParameters.beforePageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MyOrderServiceApiMyOrderServiceListMyOrder2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myOrderServiceListMyOrder2(requestParameters: MyOrderServiceApiMyOrderServiceListMyOrder2Request, options?: AxiosRequestConfig): AxiosPromise<V1ListOrderReply> {
            return localVarFp.myOrderServiceListMyOrder2(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MyOrderServiceApiMyOrderServiceRefundMyOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myOrderServiceRefundMyOrder(requestParameters: MyOrderServiceApiMyOrderServiceRefundMyOrderRequest, options?: AxiosRequestConfig): AxiosPromise<V1Order> {
            return localVarFp.myOrderServiceRefundMyOrder(requestParameters.orderId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for myOrderServiceGetMyOrder operation in MyOrderServiceApi.
 * @export
 * @interface MyOrderServiceApiMyOrderServiceGetMyOrderRequest
 */
export interface MyOrderServiceApiMyOrderServiceGetMyOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceGetMyOrder
     */
    readonly id: string
}

/**
 * Request parameters for myOrderServiceListMyOrder operation in MyOrderServiceApi.
 * @export
 * @interface MyOrderServiceApiMyOrderServiceListMyOrderRequest
 */
export interface MyOrderServiceApiMyOrderServiceListMyOrderRequest {
    /**
     * 
     * @type {number}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly pageOffset?: number

    /**
     * 
     * @type {number}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly fields?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterId$like?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$eq?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$neq?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$contains?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterName$like?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly filterCustomerId$like?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly afterPageToken?: string

    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder
     */
    readonly beforePageToken?: string
}

/**
 * Request parameters for myOrderServiceListMyOrder2 operation in MyOrderServiceApi.
 * @export
 * @interface MyOrderServiceApiMyOrderServiceListMyOrder2Request
 */
export interface MyOrderServiceApiMyOrderServiceListMyOrder2Request {
    /**
     * 
     * @type {V1ListOrderRequest}
     * @memberof MyOrderServiceApiMyOrderServiceListMyOrder2
     */
    readonly body: V1ListOrderRequest
}

/**
 * Request parameters for myOrderServiceRefundMyOrder operation in MyOrderServiceApi.
 * @export
 * @interface MyOrderServiceApiMyOrderServiceRefundMyOrderRequest
 */
export interface MyOrderServiceApiMyOrderServiceRefundMyOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof MyOrderServiceApiMyOrderServiceRefundMyOrder
     */
    readonly orderId: string

    /**
     * 
     * @type {object}
     * @memberof MyOrderServiceApiMyOrderServiceRefundMyOrder
     */
    readonly body: object
}

/**
 * MyOrderServiceApi - object-oriented interface
 * @export
 * @class MyOrderServiceApi
 * @extends {BaseAPI}
 */
export class MyOrderServiceApi extends BaseAPI {
    /**
     * 
     * @param {MyOrderServiceApiMyOrderServiceGetMyOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyOrderServiceApi
     */
    public myOrderServiceGetMyOrder(requestParameters: MyOrderServiceApiMyOrderServiceGetMyOrderRequest, options?: AxiosRequestConfig) {
        return MyOrderServiceApiFp(this.configuration).myOrderServiceGetMyOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MyOrderServiceApiMyOrderServiceListMyOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyOrderServiceApi
     */
    public myOrderServiceListMyOrder(requestParameters: MyOrderServiceApiMyOrderServiceListMyOrderRequest = {}, options?: AxiosRequestConfig) {
        return MyOrderServiceApiFp(this.configuration).myOrderServiceListMyOrder(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterName$eq, requestParameters.filterName$neq, requestParameters.filterName$contains, requestParameters.filterName$startsWith, requestParameters.filterName$nstartsWith, requestParameters.filterName$endsWith, requestParameters.filterName$nendsWith, requestParameters.filterName$in, requestParameters.filterName$nin, requestParameters.filterName$null, requestParameters.filterName$nnull, requestParameters.filterName$empty, requestParameters.filterName$nempty, requestParameters.filterName$like, requestParameters.filterCustomerId$eq, requestParameters.filterCustomerId$neq, requestParameters.filterCustomerId$contains, requestParameters.filterCustomerId$startsWith, requestParameters.filterCustomerId$nstartsWith, requestParameters.filterCustomerId$endsWith, requestParameters.filterCustomerId$nendsWith, requestParameters.filterCustomerId$in, requestParameters.filterCustomerId$nin, requestParameters.filterCustomerId$null, requestParameters.filterCustomerId$nnull, requestParameters.filterCustomerId$empty, requestParameters.filterCustomerId$nempty, requestParameters.filterCustomerId$like, requestParameters.afterPageToken, requestParameters.beforePageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MyOrderServiceApiMyOrderServiceListMyOrder2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyOrderServiceApi
     */
    public myOrderServiceListMyOrder2(requestParameters: MyOrderServiceApiMyOrderServiceListMyOrder2Request, options?: AxiosRequestConfig) {
        return MyOrderServiceApiFp(this.configuration).myOrderServiceListMyOrder2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MyOrderServiceApiMyOrderServiceRefundMyOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MyOrderServiceApi
     */
    public myOrderServiceRefundMyOrder(requestParameters: MyOrderServiceApiMyOrderServiceRefundMyOrderRequest, options?: AxiosRequestConfig) {
        return MyOrderServiceApiFp(this.configuration).myOrderServiceRefundMyOrder(requestParameters.orderId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

