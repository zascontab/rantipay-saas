// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: saas/api/tenant/v1/tenant.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantRequestMultiError, or nil if none found.
func (m *CreateTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateTenantRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateTenantRequest_Name_Pattern.MatchString(m.GetName()) {
		err := CreateTenantRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9](?:[A-Za-z0-9\\\\-]{1,61}[A-Za-z0-9])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DisplayName

	// no validation rules for Region

	// no validation rules for Logo

	// no validation rules for SeparateDb

	if m.AdminEmail != nil {

		if err := m._validateEmail(m.GetAdminEmail()); err != nil {
			err = CreateTenantRequestValidationError{
				field:  "AdminEmail",
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.AdminUsername != nil {
		// no validation rules for AdminUsername
	}

	if m.AdminPassword != nil {
		// no validation rules for AdminPassword
	}

	if m.AdminUserId != nil {
		// no validation rules for AdminUserId
	}

	if len(errors) > 0 {
		return CreateTenantRequestMultiError(errors)
	}

	return nil
}

func (m *CreateTenantRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateTenantRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateTenantRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantRequestMultiError) AllErrors() []error { return m }

// CreateTenantRequestValidationError is the validation error returned by
// CreateTenantRequest.Validate if the designated constraints aren't met.
type CreateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantRequestValidationError) ErrorName() string {
	return "CreateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantRequestValidationError{}

var _CreateTenantRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9](?:[A-Za-z0-9\\-]{1,61}[A-Za-z0-9])?$")

// Validate checks the field values on UpdateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTenantRequestMultiError, or nil if none found.
func (m *UpdateTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTenant() == nil {
		err := UpdateTenantRequestValidationError{
			field:  "Tenant",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTenantRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTenantRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTenantRequestValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTenantRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTenantRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTenantRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTenantRequestMultiError(errors)
	}

	return nil
}

// UpdateTenantRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTenantRequestMultiError) AllErrors() []error { return m }

// UpdateTenantRequestValidationError is the validation error returned by
// UpdateTenantRequest.Validate if the designated constraints aren't met.
type UpdateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantRequestValidationError) ErrorName() string {
	return "UpdateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantRequestValidationError{}

// Validate checks the field values on UpdateTenant with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateTenant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTenant with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateTenantMultiError, or
// nil if none found.
func (m *UpdateTenant) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTenant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateTenantValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateTenantValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateTenant_Name_Pattern.MatchString(m.GetName()) {
		err := UpdateTenantValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9](?:[A-Za-z0-9\\\\-]{1,61}[A-Za-z0-9])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DisplayName

	for idx, item := range m.GetConn() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateTenantValidationError{
						field:  fmt.Sprintf("Conn[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateTenantValidationError{
						field:  fmt.Sprintf("Conn[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTenantValidationError{
					field:  fmt.Sprintf("Conn[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFeatures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateTenantValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateTenantValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateTenantValidationError{
					field:  fmt.Sprintf("Features[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Logo

	if len(errors) > 0 {
		return UpdateTenantMultiError(errors)
	}

	return nil
}

// UpdateTenantMultiError is an error wrapping multiple validation errors
// returned by UpdateTenant.ValidateAll() if the designated constraints aren't met.
type UpdateTenantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTenantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTenantMultiError) AllErrors() []error { return m }

// UpdateTenantValidationError is the validation error returned by
// UpdateTenant.Validate if the designated constraints aren't met.
type UpdateTenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTenantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTenantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTenantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTenantValidationError) ErrorName() string { return "UpdateTenantValidationError" }

// Error satisfies the builtin error interface
func (e UpdateTenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTenantValidationError{}

var _UpdateTenant_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9](?:[A-Za-z0-9\\-]{1,61}[A-Za-z0-9])?$")

// Validate checks the field values on DeleteTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTenantRequestMultiError, or nil if none found.
func (m *DeleteTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTenantRequestMultiError(errors)
	}

	return nil
}

// DeleteTenantRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTenantRequestMultiError) AllErrors() []error { return m }

// DeleteTenantRequestValidationError is the validation error returned by
// DeleteTenantRequest.Validate if the designated constraints aren't met.
type DeleteTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantRequestValidationError) ErrorName() string {
	return "DeleteTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantRequestValidationError{}

// Validate checks the field values on DeleteTenantReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTenantReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTenantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTenantReplyMultiError, or nil if none found.
func (m *DeleteTenantReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTenantReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTenantReplyMultiError(errors)
	}

	return nil
}

// DeleteTenantReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteTenantReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteTenantReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTenantReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTenantReplyMultiError) AllErrors() []error { return m }

// DeleteTenantReplyValidationError is the validation error returned by
// DeleteTenantReply.Validate if the designated constraints aren't met.
type DeleteTenantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantReplyValidationError) ErrorName() string {
	return "DeleteTenantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantReplyValidationError{}

// Validate checks the field values on GetTenantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantRequestMultiError, or nil if none found.
func (m *GetTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdOrName

	if len(errors) > 0 {
		return GetTenantRequestMultiError(errors)
	}

	return nil
}

// GetTenantRequestMultiError is an error wrapping multiple validation errors
// returned by GetTenantRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantRequestMultiError) AllErrors() []error { return m }

// GetTenantRequestValidationError is the validation error returned by
// GetTenantRequest.Validate if the designated constraints aren't met.
type GetTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantRequestValidationError) ErrorName() string { return "GetTenantRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantRequestValidationError{}

// Validate checks the field values on GetTenantPublicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTenantPublicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTenantPublicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTenantPublicRequestMultiError, or nil if none found.
func (m *GetTenantPublicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTenantPublicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdOrName

	if len(errors) > 0 {
		return GetTenantPublicRequestMultiError(errors)
	}

	return nil
}

// GetTenantPublicRequestMultiError is an error wrapping multiple validation
// errors returned by GetTenantPublicRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTenantPublicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTenantPublicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTenantPublicRequestMultiError) AllErrors() []error { return m }

// GetTenantPublicRequestValidationError is the validation error returned by
// GetTenantPublicRequest.Validate if the designated constraints aren't met.
type GetTenantPublicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTenantPublicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTenantPublicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTenantPublicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTenantPublicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTenantPublicRequestValidationError) ErrorName() string {
	return "GetTenantPublicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTenantPublicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTenantPublicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTenantPublicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTenantPublicRequestValidationError{}

// Validate checks the field values on TenantFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TenantFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TenantFilterMultiError, or
// nil if none found.
func (m *TenantFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantFilterValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantFilterValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantFilterValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantFilterValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantFilterValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantFilterValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantFilterValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantFilterValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantFilterValidationError{
				field:  "Region",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantFilterMultiError(errors)
	}

	return nil
}

// TenantFilterMultiError is an error wrapping multiple validation errors
// returned by TenantFilter.ValidateAll() if the designated constraints aren't met.
type TenantFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantFilterMultiError) AllErrors() []error { return m }

// TenantFilterValidationError is the validation error returned by
// TenantFilter.Validate if the designated constraints aren't met.
type TenantFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantFilterValidationError) ErrorName() string { return "TenantFilterValidationError" }

// Error satisfies the builtin error interface
func (e TenantFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantFilterValidationError{}

// Validate checks the field values on ListTenantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantRequestMultiError, or nil if none found.
func (m *ListTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageOffset

	// no validation rules for PageSize

	// no validation rules for Search

	if all {
		switch v := interface{}(m.GetFields()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTenantRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTenantRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTenantRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTenantRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTenantRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTenantRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListTenantRequestMultiError(errors)
	}

	return nil
}

// ListTenantRequestMultiError is an error wrapping multiple validation errors
// returned by ListTenantRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantRequestMultiError) AllErrors() []error { return m }

// ListTenantRequestValidationError is the validation error returned by
// ListTenantRequest.Validate if the designated constraints aren't met.
type ListTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantRequestValidationError) ErrorName() string {
	return "ListTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantRequestValidationError{}

// Validate checks the field values on ListTenantReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTenantReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantReplyMultiError, or nil if none found.
func (m *ListTenantReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalSize

	// no validation rules for FilterSize

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTenantReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTenantReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTenantReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTenantReplyMultiError(errors)
	}

	return nil
}

// ListTenantReplyMultiError is an error wrapping multiple validation errors
// returned by ListTenantReply.ValidateAll() if the designated constraints
// aren't met.
type ListTenantReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantReplyMultiError) AllErrors() []error { return m }

// ListTenantReplyValidationError is the validation error returned by
// ListTenantReply.Validate if the designated constraints aren't met.
type ListTenantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantReplyValidationError) ErrorName() string { return "ListTenantReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListTenantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantReplyValidationError{}

// Validate checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tenant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TenantMultiError, or nil if none found.
func (m *Tenant) ValidateAll() error {
	return m.validate(true)
}

func (m *Tenant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Region

	for idx, item := range m.GetConn() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TenantValidationError{
						field:  fmt.Sprintf("Conn[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TenantValidationError{
						field:  fmt.Sprintf("Conn[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantValidationError{
					field:  fmt.Sprintf("Conn[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFeatures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TenantValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TenantValidationError{
						field:  fmt.Sprintf("Features[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantValidationError{
					field:  fmt.Sprintf("Features[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetLogo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "Logo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "Logo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "Logo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SeparateDb

	// no validation rules for Host

	if all {
		switch v := interface{}(m.GetPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantValidationError{
				field:  "Plan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TenantValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TenantValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TenantValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TenantValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TenantValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.PlanKey != nil {
		// no validation rules for PlanKey
	}

	if len(errors) > 0 {
		return TenantMultiError(errors)
	}

	return nil
}

// TenantMultiError is an error wrapping multiple validation errors returned by
// Tenant.ValidateAll() if the designated constraints aren't met.
type TenantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantMultiError) AllErrors() []error { return m }

// TenantValidationError is the validation error returned by Tenant.Validate if
// the designated constraints aren't met.
type TenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantValidationError) ErrorName() string { return "TenantValidationError" }

// Error satisfies the builtin error interface
func (e TenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantValidationError{}

// Validate checks the field values on TenantConnectionString with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TenantConnectionString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantConnectionString with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TenantConnectionStringMultiError, or nil if none found.
func (m *TenantConnectionString) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantConnectionString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return TenantConnectionStringMultiError(errors)
	}

	return nil
}

// TenantConnectionStringMultiError is an error wrapping multiple validation
// errors returned by TenantConnectionString.ValidateAll() if the designated
// constraints aren't met.
type TenantConnectionStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantConnectionStringMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantConnectionStringMultiError) AllErrors() []error { return m }

// TenantConnectionStringValidationError is the validation error returned by
// TenantConnectionString.Validate if the designated constraints aren't met.
type TenantConnectionStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantConnectionStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantConnectionStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantConnectionStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantConnectionStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantConnectionStringValidationError) ErrorName() string {
	return "TenantConnectionStringValidationError"
}

// Error satisfies the builtin error interface
func (e TenantConnectionStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantConnectionString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantConnectionStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantConnectionStringValidationError{}

// Validate checks the field values on TenantFeature with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TenantFeature) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantFeature with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TenantFeatureMultiError, or
// nil if none found.
func (m *TenantFeature) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantFeature) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantFeatureValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantFeatureValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantFeatureValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantFeatureMultiError(errors)
	}

	return nil
}

// TenantFeatureMultiError is an error wrapping multiple validation errors
// returned by TenantFeature.ValidateAll() if the designated constraints
// aren't met.
type TenantFeatureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantFeatureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantFeatureMultiError) AllErrors() []error { return m }

// TenantFeatureValidationError is the validation error returned by
// TenantFeature.Validate if the designated constraints aren't met.
type TenantFeatureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantFeatureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantFeatureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantFeatureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantFeatureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantFeatureValidationError) ErrorName() string { return "TenantFeatureValidationError" }

// Error satisfies the builtin error interface
func (e TenantFeatureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantFeature.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantFeatureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantFeatureValidationError{}

// Validate checks the field values on TenantInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TenantInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TenantInfoMultiError, or
// nil if none found.
func (m *TenantInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Region

	if all {
		switch v := interface{}(m.GetLogo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantInfoValidationError{
					field:  "Logo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantInfoValidationError{
					field:  "Logo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantInfoValidationError{
				field:  "Logo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Host

	if all {
		switch v := interface{}(m.GetPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantInfoValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantInfoValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantInfoValidationError{
				field:  "Plan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.PlanKey != nil {
		// no validation rules for PlanKey
	}

	if len(errors) > 0 {
		return TenantInfoMultiError(errors)
	}

	return nil
}

// TenantInfoMultiError is an error wrapping multiple validation errors
// returned by TenantInfo.ValidateAll() if the designated constraints aren't met.
type TenantInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantInfoMultiError) AllErrors() []error { return m }

// TenantInfoValidationError is the validation error returned by
// TenantInfo.Validate if the designated constraints aren't met.
type TenantInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantInfoValidationError) ErrorName() string { return "TenantInfoValidationError" }

// Error satisfies the builtin error interface
func (e TenantInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantInfoValidationError{}

// Validate checks the field values on GetCurrentTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentTenantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentTenantRequestMultiError, or nil if none found.
func (m *GetCurrentTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentTenantRequestMultiError(errors)
	}

	return nil
}

// GetCurrentTenantRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentTenantRequestMultiError) AllErrors() []error { return m }

// GetCurrentTenantRequestValidationError is the validation error returned by
// GetCurrentTenantRequest.Validate if the designated constraints aren't met.
type GetCurrentTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentTenantRequestValidationError) ErrorName() string {
	return "GetCurrentTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentTenantRequestValidationError{}

// Validate checks the field values on GetCurrentTenantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentTenantReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentTenantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentTenantReplyMultiError, or nil if none found.
func (m *GetCurrentTenantReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentTenantReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentTenantReplyValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentTenantReplyValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentTenantReplyValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsHost

	if len(errors) > 0 {
		return GetCurrentTenantReplyMultiError(errors)
	}

	return nil
}

// GetCurrentTenantReplyMultiError is an error wrapping multiple validation
// errors returned by GetCurrentTenantReply.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentTenantReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentTenantReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentTenantReplyMultiError) AllErrors() []error { return m }

// GetCurrentTenantReplyValidationError is the validation error returned by
// GetCurrentTenantReply.Validate if the designated constraints aren't met.
type GetCurrentTenantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentTenantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentTenantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentTenantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentTenantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentTenantReplyValidationError) ErrorName() string {
	return "GetCurrentTenantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentTenantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentTenantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentTenantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentTenantReplyValidationError{}

// Validate checks the field values on ChangeTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeTenantRequestMultiError, or nil if none found.
func (m *ChangeTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdOrName

	if len(errors) > 0 {
		return ChangeTenantRequestMultiError(errors)
	}

	return nil
}

// ChangeTenantRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeTenantRequestMultiError) AllErrors() []error { return m }

// ChangeTenantRequestValidationError is the validation error returned by
// ChangeTenantRequest.Validate if the designated constraints aren't met.
type ChangeTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeTenantRequestValidationError) ErrorName() string {
	return "ChangeTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeTenantRequestValidationError{}

// Validate checks the field values on ChangeTenantReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ChangeTenantReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeTenantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeTenantReplyMultiError, or nil if none found.
func (m *ChangeTenantReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeTenantReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangeTenantReplyValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangeTenantReplyValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeTenantReplyValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsHost

	if len(errors) > 0 {
		return ChangeTenantReplyMultiError(errors)
	}

	return nil
}

// ChangeTenantReplyMultiError is an error wrapping multiple validation errors
// returned by ChangeTenantReply.ValidateAll() if the designated constraints
// aren't met.
type ChangeTenantReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeTenantReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeTenantReplyMultiError) AllErrors() []error { return m }

// ChangeTenantReplyValidationError is the validation error returned by
// ChangeTenantReply.Validate if the designated constraints aren't met.
type ChangeTenantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeTenantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeTenantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeTenantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeTenantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeTenantReplyValidationError) ErrorName() string {
	return "ChangeTenantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeTenantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeTenantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeTenantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeTenantReplyValidationError{}

// Validate checks the field values on UserCreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserCreateTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreateTenantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCreateTenantRequestMultiError, or nil if none found.
func (m *UserCreateTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreateTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UserCreateTenantRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UserCreateTenantRequest_Name_Pattern.MatchString(m.GetName()) {
		err := UserCreateTenantRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[A-Za-z0-9](?:[A-Za-z0-9\\\\-]{1,61}[A-Za-z0-9])?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DisplayName

	// no validation rules for Region

	// no validation rules for Logo

	if len(errors) > 0 {
		return UserCreateTenantRequestMultiError(errors)
	}

	return nil
}

// UserCreateTenantRequestMultiError is an error wrapping multiple validation
// errors returned by UserCreateTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type UserCreateTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateTenantRequestMultiError) AllErrors() []error { return m }

// UserCreateTenantRequestValidationError is the validation error returned by
// UserCreateTenantRequest.Validate if the designated constraints aren't met.
type UserCreateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateTenantRequestValidationError) ErrorName() string {
	return "UserCreateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserCreateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateTenantRequestValidationError{}

var _UserCreateTenantRequest_Name_Pattern = regexp.MustCompile("^[A-Za-z0-9](?:[A-Za-z0-9\\-]{1,61}[A-Za-z0-9])?$")

// Validate checks the field values on UserCreateTenantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserCreateTenantReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCreateTenantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCreateTenantReplyMultiError, or nil if none found.
func (m *UserCreateTenantReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCreateTenantReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserCreateTenantReplyValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserCreateTenantReplyValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserCreateTenantReplyValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserCreateTenantReplyMultiError(errors)
	}

	return nil
}

// UserCreateTenantReplyMultiError is an error wrapping multiple validation
// errors returned by UserCreateTenantReply.ValidateAll() if the designated
// constraints aren't met.
type UserCreateTenantReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCreateTenantReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCreateTenantReplyMultiError) AllErrors() []error { return m }

// UserCreateTenantReplyValidationError is the validation error returned by
// UserCreateTenantReply.Validate if the designated constraints aren't met.
type UserCreateTenantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCreateTenantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCreateTenantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCreateTenantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCreateTenantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCreateTenantReplyValidationError) ErrorName() string {
	return "UserCreateTenantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserCreateTenantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCreateTenantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCreateTenantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCreateTenantReplyValidationError{}
