// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sys/api/locale/v1/locale.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMessageRequestMultiError, or nil if none found.
func (m *ListMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMessageRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMessageRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMessageRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListMessageRequestMultiError(errors)
	}

	return nil
}

// ListMessageRequestMultiError is an error wrapping multiple validation errors
// returned by ListMessageRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMessageRequestMultiError) AllErrors() []error { return m }

// ListMessageRequestValidationError is the validation error returned by
// ListMessageRequest.Validate if the designated constraints aren't met.
type ListMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMessageRequestValidationError) ErrorName() string {
	return "ListMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMessageRequestValidationError{}

// Validate checks the field values on MessageFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageFilterMultiError, or
// nil if none found.
func (m *MessageFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MessageFilterMultiError(errors)
	}

	return nil
}

// MessageFilterMultiError is an error wrapping multiple validation errors
// returned by MessageFilter.ValidateAll() if the designated constraints
// aren't met.
type MessageFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageFilterMultiError) AllErrors() []error { return m }

// MessageFilterValidationError is the validation error returned by
// MessageFilter.Validate if the designated constraints aren't met.
type MessageFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageFilterValidationError) ErrorName() string { return "MessageFilterValidationError" }

// Error satisfies the builtin error interface
func (e MessageFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageFilterValidationError{}

// Validate checks the field values on ListMessageReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMessageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMessageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMessageReplyMultiError, or nil if none found.
func (m *ListMessageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMessageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMessageReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMessageReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMessageReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMessageReplyMultiError(errors)
	}

	return nil
}

// ListMessageReplyMultiError is an error wrapping multiple validation errors
// returned by ListMessageReply.ValidateAll() if the designated constraints
// aren't met.
type ListMessageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMessageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMessageReplyMultiError) AllErrors() []error { return m }

// ListMessageReplyValidationError is the validation error returned by
// ListMessageReply.Validate if the designated constraints aren't met.
type ListMessageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMessageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMessageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMessageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMessageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMessageReplyValidationError) ErrorName() string { return "ListMessageReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListMessageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMessageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMessageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMessageReplyValidationError{}

// Validate checks the field values on LocaleLanguage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LocaleLanguage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocaleLanguage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocaleLanguageMultiError,
// or nil if none found.
func (m *LocaleLanguage) ValidateAll() error {
	return m.validate(true)
}

func (m *LocaleLanguage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetMsg() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LocaleLanguageValidationError{
						field:  fmt.Sprintf("Msg[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LocaleLanguageValidationError{
						field:  fmt.Sprintf("Msg[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LocaleLanguageValidationError{
					field:  fmt.Sprintf("Msg[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LocaleLanguageMultiError(errors)
	}

	return nil
}

// LocaleLanguageMultiError is an error wrapping multiple validation errors
// returned by LocaleLanguage.ValidateAll() if the designated constraints
// aren't met.
type LocaleLanguageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocaleLanguageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocaleLanguageMultiError) AllErrors() []error { return m }

// LocaleLanguageValidationError is the validation error returned by
// LocaleLanguage.Validate if the designated constraints aren't met.
type LocaleLanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocaleLanguageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocaleLanguageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocaleLanguageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocaleLanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocaleLanguageValidationError) ErrorName() string { return "LocaleLanguageValidationError" }

// Error satisfies the builtin error interface
func (e LocaleLanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocaleLanguage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocaleLanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocaleLanguageValidationError{}

// Validate checks the field values on LocaleMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LocaleMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocaleMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocaleMessageMultiError, or
// nil if none found.
func (m *LocaleMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *LocaleMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Other

	if len(errors) > 0 {
		return LocaleMessageMultiError(errors)
	}

	return nil
}

// LocaleMessageMultiError is an error wrapping multiple validation errors
// returned by LocaleMessage.ValidateAll() if the designated constraints
// aren't met.
type LocaleMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocaleMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocaleMessageMultiError) AllErrors() []error { return m }

// LocaleMessageValidationError is the validation error returned by
// LocaleMessage.Validate if the designated constraints aren't met.
type LocaleMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocaleMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocaleMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocaleMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocaleMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocaleMessageValidationError) ErrorName() string { return "LocaleMessageValidationError" }

// Error satisfies the builtin error interface
func (e LocaleMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocaleMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocaleMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocaleMessageValidationError{}
