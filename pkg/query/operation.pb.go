// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: query/operation.proto

package query

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StringFilterOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq          *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=eq,json=$eq,proto3,oneof" json:"eq,omitempty"`
	Neq         *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=neq,json=$neq,proto3,oneof" json:"neq,omitempty"`
	Contains    *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=contains,json=$contains,proto3,oneof" json:"contains,omitempty"`
	StartsWith  *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=starts_with,json=$starts_with,proto3,oneof" json:"starts_with,omitempty"`
	NstartsWith *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=nstarts_with,json=$nstarts_with,proto3,oneof" json:"nstarts_with,omitempty"`
	EndsWith    *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=ends_with,json=$ends_with,proto3,oneof" json:"ends_with,omitempty"`
	NendsWith   *wrapperspb.StringValue   `protobuf:"bytes,7,opt,name=nends_with,json=$nends_with,proto3,oneof" json:"nends_with,omitempty"`
	In          []*wrapperspb.StringValue `protobuf:"bytes,8,rep,name=in,json=$in,proto3" json:"in,omitempty"`
	Nin         []*wrapperspb.StringValue `protobuf:"bytes,9,rep,name=nin,json=$nin,proto3" json:"nin,omitempty"`
	Null        *wrapperspb.BoolValue     `protobuf:"bytes,10,opt,name=null,json=$null,proto3,oneof" json:"null,omitempty"`
	Nnull       *wrapperspb.BoolValue     `protobuf:"bytes,11,opt,name=nnull,json=$nnull,proto3,oneof" json:"nnull,omitempty"`
	Empty       *wrapperspb.BoolValue     `protobuf:"bytes,12,opt,name=empty,json=$empty,proto3,oneof" json:"empty,omitempty"`
	Nempty      *wrapperspb.BoolValue     `protobuf:"bytes,13,opt,name=nempty,json=$nempty,proto3,oneof" json:"nempty,omitempty"`
	Like        *wrapperspb.StringValue   `protobuf:"bytes,14,opt,name=like,json=$like,proto3,oneof" json:"like,omitempty"`
}

func (x *StringFilterOperation) Reset() {
	*x = StringFilterOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_operation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringFilterOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringFilterOperation) ProtoMessage() {}

func (x *StringFilterOperation) ProtoReflect() protoreflect.Message {
	mi := &file_query_operation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringFilterOperation.ProtoReflect.Descriptor instead.
func (*StringFilterOperation) Descriptor() ([]byte, []int) {
	return file_query_operation_proto_rawDescGZIP(), []int{0}
}

func (x *StringFilterOperation) GetEq() *wrapperspb.StringValue {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *StringFilterOperation) GetNeq() *wrapperspb.StringValue {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *StringFilterOperation) GetContains() *wrapperspb.StringValue {
	if x != nil {
		return x.Contains
	}
	return nil
}

func (x *StringFilterOperation) GetStartsWith() *wrapperspb.StringValue {
	if x != nil {
		return x.StartsWith
	}
	return nil
}

func (x *StringFilterOperation) GetNstartsWith() *wrapperspb.StringValue {
	if x != nil {
		return x.NstartsWith
	}
	return nil
}

func (x *StringFilterOperation) GetEndsWith() *wrapperspb.StringValue {
	if x != nil {
		return x.EndsWith
	}
	return nil
}

func (x *StringFilterOperation) GetNendsWith() *wrapperspb.StringValue {
	if x != nil {
		return x.NendsWith
	}
	return nil
}

func (x *StringFilterOperation) GetIn() []*wrapperspb.StringValue {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *StringFilterOperation) GetNin() []*wrapperspb.StringValue {
	if x != nil {
		return x.Nin
	}
	return nil
}

func (x *StringFilterOperation) GetNull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Null
	}
	return nil
}

func (x *StringFilterOperation) GetNnull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Nnull
	}
	return nil
}

func (x *StringFilterOperation) GetEmpty() *wrapperspb.BoolValue {
	if x != nil {
		return x.Empty
	}
	return nil
}

func (x *StringFilterOperation) GetNempty() *wrapperspb.BoolValue {
	if x != nil {
		return x.Nempty
	}
	return nil
}

func (x *StringFilterOperation) GetLike() *wrapperspb.StringValue {
	if x != nil {
		return x.Like
	}
	return nil
}

type BooleanFilterOperators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=eq,json=$eq,proto3,oneof" json:"eq,omitempty"`
	Neq   *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=neq,json=$neq,proto3,oneof" json:"neq,omitempty"`
	Null  *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=null,json=$null,proto3,oneof" json:"null,omitempty"`
	Nnull *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=nnull,json=$nnull,proto3,oneof" json:"nnull,omitempty"`
}

func (x *BooleanFilterOperators) Reset() {
	*x = BooleanFilterOperators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_operation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanFilterOperators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanFilterOperators) ProtoMessage() {}

func (x *BooleanFilterOperators) ProtoReflect() protoreflect.Message {
	mi := &file_query_operation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanFilterOperators.ProtoReflect.Descriptor instead.
func (*BooleanFilterOperators) Descriptor() ([]byte, []int) {
	return file_query_operation_proto_rawDescGZIP(), []int{1}
}

func (x *BooleanFilterOperators) GetEq() *wrapperspb.BoolValue {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *BooleanFilterOperators) GetNeq() *wrapperspb.BoolValue {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *BooleanFilterOperators) GetNull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Null
	}
	return nil
}

func (x *BooleanFilterOperators) GetNnull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Nnull
	}
	return nil
}

type NullFilterOperators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Null  *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=null,json=$null,proto3,oneof" json:"null,omitempty"`
	Nnull *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=nnull,json=$nnull,proto3,oneof" json:"nnull,omitempty"`
}

func (x *NullFilterOperators) Reset() {
	*x = NullFilterOperators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_operation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullFilterOperators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullFilterOperators) ProtoMessage() {}

func (x *NullFilterOperators) ProtoReflect() protoreflect.Message {
	mi := &file_query_operation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullFilterOperators.ProtoReflect.Descriptor instead.
func (*NullFilterOperators) Descriptor() ([]byte, []int) {
	return file_query_operation_proto_rawDescGZIP(), []int{2}
}

func (x *NullFilterOperators) GetNull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Null
	}
	return nil
}

func (x *NullFilterOperators) GetNnull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Nnull
	}
	return nil
}

type DateFilterOperators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=eq,json=$eq,proto3,oneof" json:"eq,omitempty"`
	Neq   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=neq,json=$neq,proto3,oneof" json:"neq,omitempty"`
	Gt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=gt,json=$gt,proto3,oneof" json:"gt,omitempty"`
	Gte   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=gte,json=$gte,proto3,oneof" json:"gte,omitempty"`
	Lt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=lt,json=$lt,proto3,oneof" json:"lt,omitempty"`
	Lte   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=lte,json=$lte,proto3,oneof" json:"lte,omitempty"`
	Null  *wrapperspb.BoolValue  `protobuf:"bytes,7,opt,name=null,json=$null,proto3,oneof" json:"null,omitempty"`
	Nnull *wrapperspb.BoolValue  `protobuf:"bytes,8,opt,name=nnull,json=$nnull,proto3,oneof" json:"nnull,omitempty"`
}

func (x *DateFilterOperators) Reset() {
	*x = DateFilterOperators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_operation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateFilterOperators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateFilterOperators) ProtoMessage() {}

func (x *DateFilterOperators) ProtoReflect() protoreflect.Message {
	mi := &file_query_operation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateFilterOperators.ProtoReflect.Descriptor instead.
func (*DateFilterOperators) Descriptor() ([]byte, []int) {
	return file_query_operation_proto_rawDescGZIP(), []int{3}
}

func (x *DateFilterOperators) GetEq() *timestamppb.Timestamp {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *DateFilterOperators) GetNeq() *timestamppb.Timestamp {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *DateFilterOperators) GetGt() *timestamppb.Timestamp {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *DateFilterOperators) GetGte() *timestamppb.Timestamp {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *DateFilterOperators) GetLt() *timestamppb.Timestamp {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *DateFilterOperators) GetLte() *timestamppb.Timestamp {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *DateFilterOperators) GetNull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Null
	}
	return nil
}

func (x *DateFilterOperators) GetNnull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Nnull
	}
	return nil
}

type DoubleFilterOperators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *wrapperspb.DoubleValue   `protobuf:"bytes,1,opt,name=eq,json=$eq,proto3,oneof" json:"eq,omitempty"`
	Neq   *wrapperspb.DoubleValue   `protobuf:"bytes,2,opt,name=neq,json=$neq,proto3,oneof" json:"neq,omitempty"`
	In    []*wrapperspb.DoubleValue `protobuf:"bytes,3,rep,name=in,json=$in,proto3" json:"in,omitempty"`
	Nin   []*wrapperspb.DoubleValue `protobuf:"bytes,4,rep,name=nin,json=$nin,proto3" json:"nin,omitempty"`
	Gt    *wrapperspb.DoubleValue   `protobuf:"bytes,5,opt,name=gt,json=$gt,proto3,oneof" json:"gt,omitempty"`
	Gte   *wrapperspb.DoubleValue   `protobuf:"bytes,6,opt,name=gte,json=$gte,proto3,oneof" json:"gte,omitempty"`
	Lt    *wrapperspb.DoubleValue   `protobuf:"bytes,7,opt,name=lt,json=$lt,proto3,oneof" json:"lt,omitempty"`
	Lte   *wrapperspb.DoubleValue   `protobuf:"bytes,8,opt,name=lte,json=$lte,proto3,oneof" json:"lte,omitempty"`
	Null  *wrapperspb.BoolValue     `protobuf:"bytes,9,opt,name=null,json=$null,proto3,oneof" json:"null,omitempty"`
	Nnull *wrapperspb.BoolValue     `protobuf:"bytes,10,opt,name=nnull,json=$nnull,proto3,oneof" json:"nnull,omitempty"`
}

func (x *DoubleFilterOperators) Reset() {
	*x = DoubleFilterOperators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_operation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleFilterOperators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleFilterOperators) ProtoMessage() {}

func (x *DoubleFilterOperators) ProtoReflect() protoreflect.Message {
	mi := &file_query_operation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleFilterOperators.ProtoReflect.Descriptor instead.
func (*DoubleFilterOperators) Descriptor() ([]byte, []int) {
	return file_query_operation_proto_rawDescGZIP(), []int{4}
}

func (x *DoubleFilterOperators) GetEq() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *DoubleFilterOperators) GetNeq() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *DoubleFilterOperators) GetIn() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *DoubleFilterOperators) GetNin() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.Nin
	}
	return nil
}

func (x *DoubleFilterOperators) GetGt() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *DoubleFilterOperators) GetGte() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *DoubleFilterOperators) GetLt() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *DoubleFilterOperators) GetLte() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *DoubleFilterOperators) GetNull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Null
	}
	return nil
}

func (x *DoubleFilterOperators) GetNnull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Nnull
	}
	return nil
}

type FloatFilterOperators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *wrapperspb.FloatValue   `protobuf:"bytes,1,opt,name=eq,json=$eq,proto3,oneof" json:"eq,omitempty"`
	Neq   *wrapperspb.FloatValue   `protobuf:"bytes,2,opt,name=neq,json=$neq,proto3,oneof" json:"neq,omitempty"`
	In    []*wrapperspb.FloatValue `protobuf:"bytes,3,rep,name=in,json=$in,proto3" json:"in,omitempty"`
	Nin   []*wrapperspb.FloatValue `protobuf:"bytes,4,rep,name=nin,json=$nin,proto3" json:"nin,omitempty"`
	Gt    *wrapperspb.FloatValue   `protobuf:"bytes,5,opt,name=gt,json=$gt,proto3,oneof" json:"gt,omitempty"`
	Gte   *wrapperspb.FloatValue   `protobuf:"bytes,6,opt,name=gte,json=$gte,proto3,oneof" json:"gte,omitempty"`
	Lt    *wrapperspb.FloatValue   `protobuf:"bytes,7,opt,name=lt,json=$lt,proto3,oneof" json:"lt,omitempty"`
	Lte   *wrapperspb.FloatValue   `protobuf:"bytes,8,opt,name=lte,json=$lte,proto3,oneof" json:"lte,omitempty"`
	Null  *wrapperspb.BoolValue    `protobuf:"bytes,9,opt,name=null,json=$null,proto3,oneof" json:"null,omitempty"`
	Nnull *wrapperspb.BoolValue    `protobuf:"bytes,10,opt,name=nnull,json=$nnull,proto3,oneof" json:"nnull,omitempty"`
}

func (x *FloatFilterOperators) Reset() {
	*x = FloatFilterOperators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_operation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatFilterOperators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatFilterOperators) ProtoMessage() {}

func (x *FloatFilterOperators) ProtoReflect() protoreflect.Message {
	mi := &file_query_operation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatFilterOperators.ProtoReflect.Descriptor instead.
func (*FloatFilterOperators) Descriptor() ([]byte, []int) {
	return file_query_operation_proto_rawDescGZIP(), []int{5}
}

func (x *FloatFilterOperators) GetEq() *wrapperspb.FloatValue {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *FloatFilterOperators) GetNeq() *wrapperspb.FloatValue {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *FloatFilterOperators) GetIn() []*wrapperspb.FloatValue {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *FloatFilterOperators) GetNin() []*wrapperspb.FloatValue {
	if x != nil {
		return x.Nin
	}
	return nil
}

func (x *FloatFilterOperators) GetGt() *wrapperspb.FloatValue {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *FloatFilterOperators) GetGte() *wrapperspb.FloatValue {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *FloatFilterOperators) GetLt() *wrapperspb.FloatValue {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *FloatFilterOperators) GetLte() *wrapperspb.FloatValue {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *FloatFilterOperators) GetNull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Null
	}
	return nil
}

func (x *FloatFilterOperators) GetNnull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Nnull
	}
	return nil
}

type Int64FilterOperators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *wrapperspb.Int64Value   `protobuf:"bytes,1,opt,name=eq,json=$eq,proto3,oneof" json:"eq,omitempty"`
	Neq   *wrapperspb.Int64Value   `protobuf:"bytes,2,opt,name=neq,json=$neq,proto3,oneof" json:"neq,omitempty"`
	In    []*wrapperspb.Int64Value `protobuf:"bytes,3,rep,name=in,json=$in,proto3" json:"in,omitempty"`
	Nin   []*wrapperspb.Int64Value `protobuf:"bytes,4,rep,name=nin,json=$nin,proto3" json:"nin,omitempty"`
	Gt    *wrapperspb.Int64Value   `protobuf:"bytes,5,opt,name=gt,json=$gt,proto3,oneof" json:"gt,omitempty"`
	Gte   *wrapperspb.Int64Value   `protobuf:"bytes,6,opt,name=gte,json=$gte,proto3,oneof" json:"gte,omitempty"`
	Lt    *wrapperspb.Int64Value   `protobuf:"bytes,7,opt,name=lt,json=$lt,proto3,oneof" json:"lt,omitempty"`
	Lte   *wrapperspb.Int64Value   `protobuf:"bytes,8,opt,name=lte,json=$lte,proto3,oneof" json:"lte,omitempty"`
	Null  *wrapperspb.BoolValue    `protobuf:"bytes,9,opt,name=null,json=$null,proto3,oneof" json:"null,omitempty"`
	Nnull *wrapperspb.BoolValue    `protobuf:"bytes,10,opt,name=nnull,json=$nnull,proto3,oneof" json:"nnull,omitempty"`
}

func (x *Int64FilterOperators) Reset() {
	*x = Int64FilterOperators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_operation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64FilterOperators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64FilterOperators) ProtoMessage() {}

func (x *Int64FilterOperators) ProtoReflect() protoreflect.Message {
	mi := &file_query_operation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64FilterOperators.ProtoReflect.Descriptor instead.
func (*Int64FilterOperators) Descriptor() ([]byte, []int) {
	return file_query_operation_proto_rawDescGZIP(), []int{6}
}

func (x *Int64FilterOperators) GetEq() *wrapperspb.Int64Value {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *Int64FilterOperators) GetNeq() *wrapperspb.Int64Value {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *Int64FilterOperators) GetIn() []*wrapperspb.Int64Value {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Int64FilterOperators) GetNin() []*wrapperspb.Int64Value {
	if x != nil {
		return x.Nin
	}
	return nil
}

func (x *Int64FilterOperators) GetGt() *wrapperspb.Int64Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *Int64FilterOperators) GetGte() *wrapperspb.Int64Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *Int64FilterOperators) GetLt() *wrapperspb.Int64Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *Int64FilterOperators) GetLte() *wrapperspb.Int64Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *Int64FilterOperators) GetNull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Null
	}
	return nil
}

func (x *Int64FilterOperators) GetNnull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Nnull
	}
	return nil
}

//message UInt64FilterOperators{
//  optional google.protobuf.UInt64Value    eq =1 [json_name="$eq"];
//  optional google.protobuf.UInt64Value    neq=2 [json_name="$neq"];
//  repeated google.protobuf.UInt64Value    in=3 [json_name="$in"];
//  repeated google.protobuf.UInt64Value    nin=4 [json_name="$nin"];
//  optional google.protobuf.UInt64Value    gt =5 [json_name="$gt"];
//  optional google.protobuf.UInt64Value    gte =6 [json_name="$gte"];
//  optional google.protobuf.UInt64Value    lt =7 [json_name="$lt"];
//  optional google.protobuf.UInt64Value    lte =8 [json_name="$lte"];
//
//  optional google.protobuf.BoolValue  null=9 [json_name="$null"];
//  optional google.protobuf.BoolValue nnull=10 [json_name="$nnull"];
//
//}
type Int32FilterOperators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *wrapperspb.Int32Value   `protobuf:"bytes,1,opt,name=eq,json=$eq,proto3,oneof" json:"eq,omitempty"`
	Neq   *wrapperspb.Int32Value   `protobuf:"bytes,2,opt,name=neq,json=$neq,proto3,oneof" json:"neq,omitempty"`
	In    []*wrapperspb.Int32Value `protobuf:"bytes,3,rep,name=in,json=$in,proto3" json:"in,omitempty"`
	Nin   []*wrapperspb.Int32Value `protobuf:"bytes,4,rep,name=nin,json=$nin,proto3" json:"nin,omitempty"`
	Gt    *wrapperspb.Int32Value   `protobuf:"bytes,5,opt,name=gt,json=$gt,proto3,oneof" json:"gt,omitempty"`
	Gte   *wrapperspb.Int32Value   `protobuf:"bytes,6,opt,name=gte,json=$gte,proto3,oneof" json:"gte,omitempty"`
	Lt    *wrapperspb.Int32Value   `protobuf:"bytes,7,opt,name=lt,json=$lt,proto3,oneof" json:"lt,omitempty"`
	Lte   *wrapperspb.Int32Value   `protobuf:"bytes,8,opt,name=lte,json=$lte,proto3,oneof" json:"lte,omitempty"`
	Null  *wrapperspb.BoolValue    `protobuf:"bytes,9,opt,name=null,json=$null,proto3,oneof" json:"null,omitempty"`
	Nnull *wrapperspb.BoolValue    `protobuf:"bytes,10,opt,name=nnull,json=$nnull,proto3,oneof" json:"nnull,omitempty"`
}

func (x *Int32FilterOperators) Reset() {
	*x = Int32FilterOperators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_operation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32FilterOperators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32FilterOperators) ProtoMessage() {}

func (x *Int32FilterOperators) ProtoReflect() protoreflect.Message {
	mi := &file_query_operation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32FilterOperators.ProtoReflect.Descriptor instead.
func (*Int32FilterOperators) Descriptor() ([]byte, []int) {
	return file_query_operation_proto_rawDescGZIP(), []int{7}
}

func (x *Int32FilterOperators) GetEq() *wrapperspb.Int32Value {
	if x != nil {
		return x.Eq
	}
	return nil
}

func (x *Int32FilterOperators) GetNeq() *wrapperspb.Int32Value {
	if x != nil {
		return x.Neq
	}
	return nil
}

func (x *Int32FilterOperators) GetIn() []*wrapperspb.Int32Value {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Int32FilterOperators) GetNin() []*wrapperspb.Int32Value {
	if x != nil {
		return x.Nin
	}
	return nil
}

func (x *Int32FilterOperators) GetGt() *wrapperspb.Int32Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *Int32FilterOperators) GetGte() *wrapperspb.Int32Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *Int32FilterOperators) GetLt() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *Int32FilterOperators) GetLte() *wrapperspb.Int32Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *Int32FilterOperators) GetNull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Null
	}
	return nil
}

func (x *Int32FilterOperators) GetNnull() *wrapperspb.BoolValue {
	if x != nil {
		return x.Nnull
	}
	return nil
}

var File_query_operation_proto protoreflect.FileDescriptor

var file_query_operation_proto_rawDesc = []byte{
	0x0a, 0x15, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x07, 0x0a, 0x15, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x24, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x03, 0x6e, 0x65, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x01, 0x52, 0x04, 0x24, 0x6e, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52,
	0x09, 0x24, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x03, 0x52, 0x0c, 0x24, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x6e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x04, 0x52, 0x0d, 0x24, 0x6e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x05, 0x52, 0x0a,
	0x24, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a,
	0x0a, 0x6e, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x06, 0x52, 0x0b, 0x24, 0x6e, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x24, 0x69, 0x6e,
	0x12, 0x2f, 0x0a, 0x03, 0x6e, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x24, 0x6e, 0x69,
	0x6e, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x07, 0x52, 0x05, 0x24,
	0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x6e, 0x75, 0x6c, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x08, 0x52, 0x06, 0x24, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x09, 0x52, 0x06, 0x24, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x6e, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x0a, 0x52, 0x07, 0x24, 0x6e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x0b, 0x52,
	0x05, 0x24, 0x6c, 0x69, 0x6b, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x65, 0x71, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x73, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x6e, 0x64, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x65, 0x6e, 0x64, 0x73, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6c, 0x69, 0x6b, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x16, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x30, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x24, 0x65, 0x71, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x03, 0x6e, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x04, 0x24, 0x6e,
	0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x02, 0x52, 0x05, 0x24, 0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x6e,
	0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x06, 0x24, 0x6e, 0x6e, 0x75, 0x6c, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e,
	0x65, 0x71, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0x96, 0x01, 0x0a, 0x13, 0x4e, 0x75, 0x6c, 0x6c, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a,
	0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x24, 0x6e, 0x75, 0x6c, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01,
	0x52, 0x06, 0x24, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0xf5,
	0x03, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x03, 0x24, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x03, 0x6e, 0x65, 0x71, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x01, 0x52, 0x04, 0x24, 0x6e, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x02,
	0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x03, 0x24, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x04, 0x24, 0x67, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x03, 0x24, 0x6c,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52,
	0x04, 0x24, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x06, 0x52, 0x05, 0x24, 0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x05, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x07, 0x52, 0x06, 0x24, 0x6e, 0x6e,
	0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6e, 0x65, 0x71, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x67, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6c, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0xe3, 0x04, 0x0a, 0x15, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x32, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x24, 0x65,
	0x71, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x03, 0x6e, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x01, 0x52, 0x04, 0x24, 0x6e, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x24, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x6e, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x24, 0x6e, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x02, 0x67, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x03, 0x24, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x04, 0x24, 0x67, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x04,
	0x52, 0x03, 0x24, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x05, 0x52, 0x04, 0x24, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x06, 0x52, 0x05, 0x24, 0x6e, 0x75, 0x6c,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x07, 0x52, 0x06, 0x24, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x65, 0x71, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x65, 0x71, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0xda, 0x04, 0x0a,
	0x14, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x03, 0x24, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x6e, 0x65, 0x71, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x01, 0x52, 0x04, 0x24, 0x6e, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x02, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x24, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x6e,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x24, 0x6e, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x02, 0x67,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x02, 0x52, 0x03, 0x24, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x04, 0x24, 0x67, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x04, 0x52, 0x03,
	0x24, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x05, 0x52, 0x04, 0x24, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x6e,
	0x75, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x06, 0x52, 0x05, 0x24, 0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x07, 0x52, 0x06,
	0x24, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e, 0x65, 0x71, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0xda, 0x04, 0x0a, 0x14, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x31, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x24,
	0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x6e, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x01, 0x52, 0x04, 0x24, 0x6e, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x24, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x6e, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x24, 0x6e, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x02, 0x52, 0x03, 0x24, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x67,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x03, 0x52, 0x04, 0x24, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x04, 0x52, 0x03, 0x24, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x05, 0x52,
	0x04, 0x24, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x06, 0x52, 0x05, 0x24, 0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x05, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x07, 0x52, 0x06, 0x24, 0x6e, 0x6e,
	0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6e, 0x65, 0x71, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x67, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6c, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6e, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0xda, 0x04, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x31, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x03, 0x24, 0x65, 0x71, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x6e, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x04,
	0x24, 0x6e, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x24, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x6e, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x24, 0x6e, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02,
	0x52, 0x03, 0x24, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x03, 0x52, 0x04, 0x24, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x02, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x04, 0x52, 0x03, 0x24, 0x6c, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x05, 0x52, 0x04, 0x24, 0x6c,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x06, 0x52, 0x05, 0x24, 0x6e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x6e,
	0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x07, 0x52, 0x06, 0x24, 0x6e, 0x6e, 0x75, 0x6c, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6e,
	0x65, 0x71, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6e,
	0x75, 0x6c, 0x6c, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x61, 0x61, 0x73, 0x2f, 0x6b, 0x69, 0x74, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_query_operation_proto_rawDescOnce sync.Once
	file_query_operation_proto_rawDescData = file_query_operation_proto_rawDesc
)

func file_query_operation_proto_rawDescGZIP() []byte {
	file_query_operation_proto_rawDescOnce.Do(func() {
		file_query_operation_proto_rawDescData = protoimpl.X.CompressGZIP(file_query_operation_proto_rawDescData)
	})
	return file_query_operation_proto_rawDescData
}

var file_query_operation_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_query_operation_proto_goTypes = []interface{}{
	(*StringFilterOperation)(nil),  // 0: query.operation.StringFilterOperation
	(*BooleanFilterOperators)(nil), // 1: query.operation.BooleanFilterOperators
	(*NullFilterOperators)(nil),    // 2: query.operation.NullFilterOperators
	(*DateFilterOperators)(nil),    // 3: query.operation.DateFilterOperators
	(*DoubleFilterOperators)(nil),  // 4: query.operation.DoubleFilterOperators
	(*FloatFilterOperators)(nil),   // 5: query.operation.FloatFilterOperators
	(*Int64FilterOperators)(nil),   // 6: query.operation.Int64FilterOperators
	(*Int32FilterOperators)(nil),   // 7: query.operation.Int32FilterOperators
	(*wrapperspb.StringValue)(nil), // 8: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),   // 9: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),  // 10: google.protobuf.Timestamp
	(*wrapperspb.DoubleValue)(nil), // 11: google.protobuf.DoubleValue
	(*wrapperspb.FloatValue)(nil),  // 12: google.protobuf.FloatValue
	(*wrapperspb.Int64Value)(nil),  // 13: google.protobuf.Int64Value
	(*wrapperspb.Int32Value)(nil),  // 14: google.protobuf.Int32Value
}
var file_query_operation_proto_depIdxs = []int32{
	8,  // 0: query.operation.StringFilterOperation.eq:type_name -> google.protobuf.StringValue
	8,  // 1: query.operation.StringFilterOperation.neq:type_name -> google.protobuf.StringValue
	8,  // 2: query.operation.StringFilterOperation.contains:type_name -> google.protobuf.StringValue
	8,  // 3: query.operation.StringFilterOperation.starts_with:type_name -> google.protobuf.StringValue
	8,  // 4: query.operation.StringFilterOperation.nstarts_with:type_name -> google.protobuf.StringValue
	8,  // 5: query.operation.StringFilterOperation.ends_with:type_name -> google.protobuf.StringValue
	8,  // 6: query.operation.StringFilterOperation.nends_with:type_name -> google.protobuf.StringValue
	8,  // 7: query.operation.StringFilterOperation.in:type_name -> google.protobuf.StringValue
	8,  // 8: query.operation.StringFilterOperation.nin:type_name -> google.protobuf.StringValue
	9,  // 9: query.operation.StringFilterOperation.null:type_name -> google.protobuf.BoolValue
	9,  // 10: query.operation.StringFilterOperation.nnull:type_name -> google.protobuf.BoolValue
	9,  // 11: query.operation.StringFilterOperation.empty:type_name -> google.protobuf.BoolValue
	9,  // 12: query.operation.StringFilterOperation.nempty:type_name -> google.protobuf.BoolValue
	8,  // 13: query.operation.StringFilterOperation.like:type_name -> google.protobuf.StringValue
	9,  // 14: query.operation.BooleanFilterOperators.eq:type_name -> google.protobuf.BoolValue
	9,  // 15: query.operation.BooleanFilterOperators.neq:type_name -> google.protobuf.BoolValue
	9,  // 16: query.operation.BooleanFilterOperators.null:type_name -> google.protobuf.BoolValue
	9,  // 17: query.operation.BooleanFilterOperators.nnull:type_name -> google.protobuf.BoolValue
	9,  // 18: query.operation.NullFilterOperators.null:type_name -> google.protobuf.BoolValue
	9,  // 19: query.operation.NullFilterOperators.nnull:type_name -> google.protobuf.BoolValue
	10, // 20: query.operation.DateFilterOperators.eq:type_name -> google.protobuf.Timestamp
	10, // 21: query.operation.DateFilterOperators.neq:type_name -> google.protobuf.Timestamp
	10, // 22: query.operation.DateFilterOperators.gt:type_name -> google.protobuf.Timestamp
	10, // 23: query.operation.DateFilterOperators.gte:type_name -> google.protobuf.Timestamp
	10, // 24: query.operation.DateFilterOperators.lt:type_name -> google.protobuf.Timestamp
	10, // 25: query.operation.DateFilterOperators.lte:type_name -> google.protobuf.Timestamp
	9,  // 26: query.operation.DateFilterOperators.null:type_name -> google.protobuf.BoolValue
	9,  // 27: query.operation.DateFilterOperators.nnull:type_name -> google.protobuf.BoolValue
	11, // 28: query.operation.DoubleFilterOperators.eq:type_name -> google.protobuf.DoubleValue
	11, // 29: query.operation.DoubleFilterOperators.neq:type_name -> google.protobuf.DoubleValue
	11, // 30: query.operation.DoubleFilterOperators.in:type_name -> google.protobuf.DoubleValue
	11, // 31: query.operation.DoubleFilterOperators.nin:type_name -> google.protobuf.DoubleValue
	11, // 32: query.operation.DoubleFilterOperators.gt:type_name -> google.protobuf.DoubleValue
	11, // 33: query.operation.DoubleFilterOperators.gte:type_name -> google.protobuf.DoubleValue
	11, // 34: query.operation.DoubleFilterOperators.lt:type_name -> google.protobuf.DoubleValue
	11, // 35: query.operation.DoubleFilterOperators.lte:type_name -> google.protobuf.DoubleValue
	9,  // 36: query.operation.DoubleFilterOperators.null:type_name -> google.protobuf.BoolValue
	9,  // 37: query.operation.DoubleFilterOperators.nnull:type_name -> google.protobuf.BoolValue
	12, // 38: query.operation.FloatFilterOperators.eq:type_name -> google.protobuf.FloatValue
	12, // 39: query.operation.FloatFilterOperators.neq:type_name -> google.protobuf.FloatValue
	12, // 40: query.operation.FloatFilterOperators.in:type_name -> google.protobuf.FloatValue
	12, // 41: query.operation.FloatFilterOperators.nin:type_name -> google.protobuf.FloatValue
	12, // 42: query.operation.FloatFilterOperators.gt:type_name -> google.protobuf.FloatValue
	12, // 43: query.operation.FloatFilterOperators.gte:type_name -> google.protobuf.FloatValue
	12, // 44: query.operation.FloatFilterOperators.lt:type_name -> google.protobuf.FloatValue
	12, // 45: query.operation.FloatFilterOperators.lte:type_name -> google.protobuf.FloatValue
	9,  // 46: query.operation.FloatFilterOperators.null:type_name -> google.protobuf.BoolValue
	9,  // 47: query.operation.FloatFilterOperators.nnull:type_name -> google.protobuf.BoolValue
	13, // 48: query.operation.Int64FilterOperators.eq:type_name -> google.protobuf.Int64Value
	13, // 49: query.operation.Int64FilterOperators.neq:type_name -> google.protobuf.Int64Value
	13, // 50: query.operation.Int64FilterOperators.in:type_name -> google.protobuf.Int64Value
	13, // 51: query.operation.Int64FilterOperators.nin:type_name -> google.protobuf.Int64Value
	13, // 52: query.operation.Int64FilterOperators.gt:type_name -> google.protobuf.Int64Value
	13, // 53: query.operation.Int64FilterOperators.gte:type_name -> google.protobuf.Int64Value
	13, // 54: query.operation.Int64FilterOperators.lt:type_name -> google.protobuf.Int64Value
	13, // 55: query.operation.Int64FilterOperators.lte:type_name -> google.protobuf.Int64Value
	9,  // 56: query.operation.Int64FilterOperators.null:type_name -> google.protobuf.BoolValue
	9,  // 57: query.operation.Int64FilterOperators.nnull:type_name -> google.protobuf.BoolValue
	14, // 58: query.operation.Int32FilterOperators.eq:type_name -> google.protobuf.Int32Value
	14, // 59: query.operation.Int32FilterOperators.neq:type_name -> google.protobuf.Int32Value
	14, // 60: query.operation.Int32FilterOperators.in:type_name -> google.protobuf.Int32Value
	14, // 61: query.operation.Int32FilterOperators.nin:type_name -> google.protobuf.Int32Value
	14, // 62: query.operation.Int32FilterOperators.gt:type_name -> google.protobuf.Int32Value
	14, // 63: query.operation.Int32FilterOperators.gte:type_name -> google.protobuf.Int32Value
	14, // 64: query.operation.Int32FilterOperators.lt:type_name -> google.protobuf.Int32Value
	14, // 65: query.operation.Int32FilterOperators.lte:type_name -> google.protobuf.Int32Value
	9,  // 66: query.operation.Int32FilterOperators.null:type_name -> google.protobuf.BoolValue
	9,  // 67: query.operation.Int32FilterOperators.nnull:type_name -> google.protobuf.BoolValue
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_query_operation_proto_init() }
func file_query_operation_proto_init() {
	if File_query_operation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_query_operation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringFilterOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_operation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanFilterOperators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_operation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullFilterOperators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_operation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateFilterOperators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_operation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleFilterOperators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_operation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatFilterOperators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_operation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int64FilterOperators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_operation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32FilterOperators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_query_operation_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_query_operation_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_query_operation_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_query_operation_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_query_operation_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_query_operation_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_query_operation_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_query_operation_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_query_operation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_query_operation_proto_goTypes,
		DependencyIndexes: file_query_operation_proto_depIdxs,
		MessageInfos:      file_query_operation_proto_msgTypes,
	}.Build()
	File_query_operation_proto = out.File
	file_query_operation_proto_rawDesc = nil
	file_query_operation_proto_goTypes = nil
	file_query_operation_proto_depIdxs = nil
}
