// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: product/api/price/v1/price.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	price "github.com/go-saas/kit/pkg/price"
	query "github.com/go-saas/kit/pkg/query"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TenantId  string                 `protobuf:"bytes,6,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// product/product_sku
	OwnerType         string                  `protobuf:"bytes,50,opt,name=owner_type,json=ownerType,proto3" json:"owner_type,omitempty"`
	OwnerId           string                  `protobuf:"bytes,51,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	ProductId         string                  `protobuf:"bytes,52,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CurrencyCode      string                  `protobuf:"bytes,99,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	Default           *price.PricePb          `protobuf:"bytes,100,opt,name=default,proto3" json:"default,omitempty"`
	Discounted        *price.PricePb          `protobuf:"bytes,101,opt,name=discounted,proto3" json:"discounted,omitempty"`
	DiscountText      string                  `protobuf:"bytes,102,opt,name=discount_text,json=discountText,proto3" json:"discount_text,omitempty"`
	DenyMoreDiscounts bool                    `protobuf:"varint,103,opt,name=deny_more_discounts,json=denyMoreDiscounts,proto3" json:"deny_more_discounts,omitempty"`
	BillingScheme     string                  `protobuf:"bytes,104,opt,name=billing_scheme,json=billingScheme,proto3" json:"billing_scheme,omitempty"`
	CurrencyOptions   []*PriceCurrencyOption  `protobuf:"bytes,300,rep,name=currency_options,json=currencyOptions,proto3" json:"currency_options,omitempty"`
	Recurring         *PriceRecurring         `protobuf:"bytes,301,opt,name=recurring,proto3" json:"recurring,omitempty"`
	Tiers             []*PriceTier            `protobuf:"bytes,302,rep,name=tiers,proto3" json:"tiers,omitempty"`
	TiersMode         string                  `protobuf:"bytes,310,opt,name=tiers_mode,json=tiersMode,proto3" json:"tiers_mode,omitempty"`
	TransformQuantity *PriceTransformQuantity `protobuf:"bytes,311,opt,name=transform_quantity,json=transformQuantity,proto3" json:"transform_quantity,omitempty"`
	Type              string                  `protobuf:"bytes,312,opt,name=type,proto3" json:"type,omitempty"`
	StripePriceId     *string                 `protobuf:"bytes,1000,opt,name=stripe_price_id,json=stripePriceId,proto3,oneof" json:"stripe_price_id,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_api_price_v1_price_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_product_api_price_v1_price_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_product_api_price_v1_price_proto_rawDescGZIP(), []int{0}
}

func (x *Price) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Price) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Price) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Price) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Price) GetOwnerType() string {
	if x != nil {
		return x.OwnerType
	}
	return ""
}

func (x *Price) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Price) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Price) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Price) GetDefault() *price.PricePb {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *Price) GetDiscounted() *price.PricePb {
	if x != nil {
		return x.Discounted
	}
	return nil
}

func (x *Price) GetDiscountText() string {
	if x != nil {
		return x.DiscountText
	}
	return ""
}

func (x *Price) GetDenyMoreDiscounts() bool {
	if x != nil {
		return x.DenyMoreDiscounts
	}
	return false
}

func (x *Price) GetBillingScheme() string {
	if x != nil {
		return x.BillingScheme
	}
	return ""
}

func (x *Price) GetCurrencyOptions() []*PriceCurrencyOption {
	if x != nil {
		return x.CurrencyOptions
	}
	return nil
}

func (x *Price) GetRecurring() *PriceRecurring {
	if x != nil {
		return x.Recurring
	}
	return nil
}

func (x *Price) GetTiers() []*PriceTier {
	if x != nil {
		return x.Tiers
	}
	return nil
}

func (x *Price) GetTiersMode() string {
	if x != nil {
		return x.TiersMode
	}
	return ""
}

func (x *Price) GetTransformQuantity() *PriceTransformQuantity {
	if x != nil {
		return x.TransformQuantity
	}
	return nil
}

func (x *Price) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Price) GetStripePriceId() string {
	if x != nil && x.StripePriceId != nil {
		return *x.StripePriceId
	}
	return ""
}

type PriceCurrencyOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode      string                     `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	Default           *price.PricePb             `protobuf:"bytes,100,opt,name=default,proto3" json:"default,omitempty"`
	Discounted        *price.PricePb             `protobuf:"bytes,101,opt,name=discounted,proto3" json:"discounted,omitempty"`
	DiscountText      string                     `protobuf:"bytes,102,opt,name=discount_text,json=discountText,proto3" json:"discount_text,omitempty"`
	DenyMoreDiscounts bool                       `protobuf:"varint,103,opt,name=deny_more_discounts,json=denyMoreDiscounts,proto3" json:"deny_more_discounts,omitempty"`
	Tiers             []*PriceCurrencyOptionTier `protobuf:"bytes,200,rep,name=tiers,proto3" json:"tiers,omitempty"`
}

func (x *PriceCurrencyOption) Reset() {
	*x = PriceCurrencyOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_api_price_v1_price_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceCurrencyOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceCurrencyOption) ProtoMessage() {}

func (x *PriceCurrencyOption) ProtoReflect() protoreflect.Message {
	mi := &file_product_api_price_v1_price_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceCurrencyOption.ProtoReflect.Descriptor instead.
func (*PriceCurrencyOption) Descriptor() ([]byte, []int) {
	return file_product_api_price_v1_price_proto_rawDescGZIP(), []int{1}
}

func (x *PriceCurrencyOption) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *PriceCurrencyOption) GetDefault() *price.PricePb {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *PriceCurrencyOption) GetDiscounted() *price.PricePb {
	if x != nil {
		return x.Discounted
	}
	return nil
}

func (x *PriceCurrencyOption) GetDiscountText() string {
	if x != nil {
		return x.DiscountText
	}
	return ""
}

func (x *PriceCurrencyOption) GetDenyMoreDiscounts() bool {
	if x != nil {
		return x.DenyMoreDiscounts
	}
	return false
}

func (x *PriceCurrencyOption) GetTiers() []*PriceCurrencyOptionTier {
	if x != nil {
		return x.Tiers
	}
	return nil
}

type PriceCurrencyOptionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode            string                           `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	DefaultAmountDecimal    string                           `protobuf:"bytes,100,opt,name=default_amount_decimal,json=defaultAmountDecimal,proto3" json:"default_amount_decimal,omitempty"`
	DiscountedAmountDecimal *string                          `protobuf:"bytes,101,opt,name=discounted_amount_decimal,json=discountedAmountDecimal,proto3,oneof" json:"discounted_amount_decimal,omitempty"`
	DiscountText            string                           `protobuf:"bytes,102,opt,name=discount_text,json=discountText,proto3" json:"discount_text,omitempty"`
	DenyMoreDiscounts       bool                             `protobuf:"varint,103,opt,name=deny_more_discounts,json=denyMoreDiscounts,proto3" json:"deny_more_discounts,omitempty"`
	Tiers                   []*PriceCurrencyOptionTierParams `protobuf:"bytes,200,rep,name=tiers,proto3" json:"tiers,omitempty"`
}

func (x *PriceCurrencyOptionParams) Reset() {
	*x = PriceCurrencyOptionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_api_price_v1_price_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceCurrencyOptionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceCurrencyOptionParams) ProtoMessage() {}

func (x *PriceCurrencyOptionParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_api_price_v1_price_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceCurrencyOptionParams.ProtoReflect.Descriptor instead.
func (*PriceCurrencyOptionParams) Descriptor() ([]byte, []int) {
	return file_product_api_price_v1_price_proto_rawDescGZIP(), []int{2}
}

func (x *PriceCurrencyOptionParams) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *PriceCurrencyOptionParams) GetDefaultAmountDecimal() string {
	if x != nil {
		return x.DefaultAmountDecimal
	}
	return ""
}

func (x *PriceCurrencyOptionParams) GetDiscountedAmountDecimal() string {
	if x != nil && x.DiscountedAmountDecimal != nil {
		return *x.DiscountedAmountDecimal
	}
	return ""
}

func (x *PriceCurrencyOptionParams) GetDiscountText() string {
	if x != nil {
		return x.DiscountText
	}
	return ""
}

func (x *PriceCurrencyOptionParams) GetDenyMoreDiscounts() bool {
	if x != nil {
		return x.DenyMoreDiscounts
	}
	return false
}

func (x *PriceCurrencyOptionParams) GetTiers() []*PriceCurrencyOptionTierParams {
	if x != nil {
		return x.Tiers
	}
	return nil
}

type PriceCurrencyOptionTier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flat *price.PricePb `protobuf:"bytes,1,opt,name=flat,proto3" json:"flat,omitempty"`
	Unit *price.PricePb `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	UpTo int64          `protobuf:"varint,3,opt,name=up_to,json=upTo,proto3" json:"up_to,omitempty"`
}

func (x *PriceCurrencyOptionTier) Reset() {
	*x = PriceCurrencyOptionTier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_api_price_v1_price_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceCurrencyOptionTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceCurrencyOptionTier) ProtoMessage() {}

func (x *PriceCurrencyOptionTier) ProtoReflect() protoreflect.Message {
	mi := &file_product_api_price_v1_price_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceCurrencyOptionTier.ProtoReflect.Descriptor instead.
func (*PriceCurrencyOptionTier) Descriptor() ([]byte, []int) {
	return file_product_api_price_v1_price_proto_rawDescGZIP(), []int{3}
}

func (x *PriceCurrencyOptionTier) GetFlat() *price.PricePb {
	if x != nil {
		return x.Flat
	}
	return nil
}

func (x *PriceCurrencyOptionTier) GetUnit() *price.PricePb {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *PriceCurrencyOptionTier) GetUpTo() int64 {
	if x != nil {
		return x.UpTo
	}
	return 0
}

type PriceCurrencyOptionTierParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlatAmountDecimal string `protobuf:"bytes,1,opt,name=flat_amount_decimal,json=flatAmountDecimal,proto3" json:"flat_amount_decimal,omitempty"`
	UnitAmountDecimal string `protobuf:"bytes,2,opt,name=unit_amount_decimal,json=unitAmountDecimal,proto3" json:"unit_amount_decimal,omitempty"`
	UpTo              int64  `protobuf:"varint,3,opt,name=up_to,json=upTo,proto3" json:"up_to,omitempty"`
}

func (x *PriceCurrencyOptionTierParams) Reset() {
	*x = PriceCurrencyOptionTierParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_api_price_v1_price_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceCurrencyOptionTierParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceCurrencyOptionTierParams) ProtoMessage() {}

func (x *PriceCurrencyOptionTierParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_api_price_v1_price_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceCurrencyOptionTierParams.ProtoReflect.Descriptor instead.
func (*PriceCurrencyOptionTierParams) Descriptor() ([]byte, []int) {
	return file_product_api_price_v1_price_proto_rawDescGZIP(), []int{4}
}

func (x *PriceCurrencyOptionTierParams) GetFlatAmountDecimal() string {
	if x != nil {
		return x.FlatAmountDecimal
	}
	return ""
}

func (x *PriceCurrencyOptionTierParams) GetUnitAmountDecimal() string {
	if x != nil {
		return x.UnitAmountDecimal
	}
	return ""
}

func (x *PriceCurrencyOptionTierParams) GetUpTo() int64 {
	if x != nil {
		return x.UpTo
	}
	return 0
}

type PriceRecurring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval        string `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	IntervalCount   int64  `protobuf:"varint,2,opt,name=interval_count,json=intervalCount,proto3" json:"interval_count,omitempty"`
	TrialPeriodDays int64  `protobuf:"varint,3,opt,name=trial_period_days,json=trialPeriodDays,proto3" json:"trial_period_days,omitempty"`
	AggregateUsage  string `protobuf:"bytes,4,opt,name=aggregate_usage,json=aggregateUsage,proto3" json:"aggregate_usage,omitempty"`
	UsageType       string `protobuf:"bytes,5,opt,name=usage_type,json=usageType,proto3" json:"usage_type,omitempty"`
}

func (x *PriceRecurring) Reset() {
	*x = PriceRecurring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_api_price_v1_price_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceRecurring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceRecurring) ProtoMessage() {}

func (x *PriceRecurring) ProtoReflect() protoreflect.Message {
	mi := &file_product_api_price_v1_price_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceRecurring.ProtoReflect.Descriptor instead.
func (*PriceRecurring) Descriptor() ([]byte, []int) {
	return file_product_api_price_v1_price_proto_rawDescGZIP(), []int{5}
}

func (x *PriceRecurring) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *PriceRecurring) GetIntervalCount() int64 {
	if x != nil {
		return x.IntervalCount
	}
	return 0
}

func (x *PriceRecurring) GetTrialPeriodDays() int64 {
	if x != nil {
		return x.TrialPeriodDays
	}
	return 0
}

func (x *PriceRecurring) GetAggregateUsage() string {
	if x != nil {
		return x.AggregateUsage
	}
	return ""
}

func (x *PriceRecurring) GetUsageType() string {
	if x != nil {
		return x.UsageType
	}
	return ""
}

type PriceTier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flat *price.PricePb `protobuf:"bytes,1,opt,name=flat,proto3" json:"flat,omitempty"`
	Unit *price.PricePb `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	UpTo int64          `protobuf:"varint,3,opt,name=up_to,json=upTo,proto3" json:"up_to,omitempty"`
}

func (x *PriceTier) Reset() {
	*x = PriceTier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_api_price_v1_price_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTier) ProtoMessage() {}

func (x *PriceTier) ProtoReflect() protoreflect.Message {
	mi := &file_product_api_price_v1_price_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTier.ProtoReflect.Descriptor instead.
func (*PriceTier) Descriptor() ([]byte, []int) {
	return file_product_api_price_v1_price_proto_rawDescGZIP(), []int{6}
}

func (x *PriceTier) GetFlat() *price.PricePb {
	if x != nil {
		return x.Flat
	}
	return nil
}

func (x *PriceTier) GetUnit() *price.PricePb {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *PriceTier) GetUpTo() int64 {
	if x != nil {
		return x.UpTo
	}
	return 0
}

type PriceTierParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlatAmountDecimal string `protobuf:"bytes,1,opt,name=flat_amount_decimal,json=flatAmountDecimal,proto3" json:"flat_amount_decimal,omitempty"`
	UnitAmountDecimal string `protobuf:"bytes,2,opt,name=unit_amount_decimal,json=unitAmountDecimal,proto3" json:"unit_amount_decimal,omitempty"`
	UpTo              int64  `protobuf:"varint,3,opt,name=up_to,json=upTo,proto3" json:"up_to,omitempty"`
}

func (x *PriceTierParams) Reset() {
	*x = PriceTierParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_api_price_v1_price_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTierParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTierParams) ProtoMessage() {}

func (x *PriceTierParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_api_price_v1_price_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTierParams.ProtoReflect.Descriptor instead.
func (*PriceTierParams) Descriptor() ([]byte, []int) {
	return file_product_api_price_v1_price_proto_rawDescGZIP(), []int{7}
}

func (x *PriceTierParams) GetFlatAmountDecimal() string {
	if x != nil {
		return x.FlatAmountDecimal
	}
	return ""
}

func (x *PriceTierParams) GetUnitAmountDecimal() string {
	if x != nil {
		return x.UnitAmountDecimal
	}
	return ""
}

func (x *PriceTierParams) GetUpTo() int64 {
	if x != nil {
		return x.UpTo
	}
	return 0
}

type PriceTransformQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DivideBy int64  `protobuf:"varint,1,opt,name=divide_by,json=divideBy,proto3" json:"divide_by,omitempty"`
	Round    string `protobuf:"bytes,2,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *PriceTransformQuantity) Reset() {
	*x = PriceTransformQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_api_price_v1_price_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTransformQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTransformQuantity) ProtoMessage() {}

func (x *PriceTransformQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_product_api_price_v1_price_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTransformQuantity.ProtoReflect.Descriptor instead.
func (*PriceTransformQuantity) Descriptor() ([]byte, []int) {
	return file_product_api_price_v1_price_proto_rawDescGZIP(), []int{8}
}

func (x *PriceTransformQuantity) GetDivideBy() int64 {
	if x != nil {
		return x.DivideBy
	}
	return 0
}

func (x *PriceTransformQuantity) GetRound() string {
	if x != nil {
		return x.Round
	}
	return ""
}

type PriceParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CurrencyCode            string                       `protobuf:"bytes,99,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	DefaultAmountDecimal    string                       `protobuf:"bytes,100,opt,name=default_amount_decimal,json=defaultAmountDecimal,proto3" json:"default_amount_decimal,omitempty"`
	DiscountedAmountDecimal *string                      `protobuf:"bytes,101,opt,name=discounted_amount_decimal,json=discountedAmountDecimal,proto3,oneof" json:"discounted_amount_decimal,omitempty"`
	DiscountText            string                       `protobuf:"bytes,102,opt,name=discount_text,json=discountText,proto3" json:"discount_text,omitempty"`
	DenyMoreDiscounts       bool                         `protobuf:"varint,103,opt,name=deny_more_discounts,json=denyMoreDiscounts,proto3" json:"deny_more_discounts,omitempty"`
	BillingScheme           string                       `protobuf:"bytes,104,opt,name=billing_scheme,json=billingScheme,proto3" json:"billing_scheme,omitempty"`
	CurrencyOptions         []*PriceCurrencyOptionParams `protobuf:"bytes,300,rep,name=currency_options,json=currencyOptions,proto3" json:"currency_options,omitempty"`
	Recurring               *PriceRecurring              `protobuf:"bytes,301,opt,name=recurring,proto3" json:"recurring,omitempty"`
	Tiers                   []*PriceTierParams           `protobuf:"bytes,302,rep,name=tiers,proto3" json:"tiers,omitempty"`
	TiersMode               string                       `protobuf:"bytes,310,opt,name=tiers_mode,json=tiersMode,proto3" json:"tiers_mode,omitempty"`
	TransformQuantity       *PriceTransformQuantity      `protobuf:"bytes,311,opt,name=transform_quantity,json=transformQuantity,proto3" json:"transform_quantity,omitempty"`
	Type                    string                       `protobuf:"bytes,312,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PriceParams) Reset() {
	*x = PriceParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_api_price_v1_price_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceParams) ProtoMessage() {}

func (x *PriceParams) ProtoReflect() protoreflect.Message {
	mi := &file_product_api_price_v1_price_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceParams.ProtoReflect.Descriptor instead.
func (*PriceParams) Descriptor() ([]byte, []int) {
	return file_product_api_price_v1_price_proto_rawDescGZIP(), []int{9}
}

func (x *PriceParams) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PriceParams) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *PriceParams) GetDefaultAmountDecimal() string {
	if x != nil {
		return x.DefaultAmountDecimal
	}
	return ""
}

func (x *PriceParams) GetDiscountedAmountDecimal() string {
	if x != nil && x.DiscountedAmountDecimal != nil {
		return *x.DiscountedAmountDecimal
	}
	return ""
}

func (x *PriceParams) GetDiscountText() string {
	if x != nil {
		return x.DiscountText
	}
	return ""
}

func (x *PriceParams) GetDenyMoreDiscounts() bool {
	if x != nil {
		return x.DenyMoreDiscounts
	}
	return false
}

func (x *PriceParams) GetBillingScheme() string {
	if x != nil {
		return x.BillingScheme
	}
	return ""
}

func (x *PriceParams) GetCurrencyOptions() []*PriceCurrencyOptionParams {
	if x != nil {
		return x.CurrencyOptions
	}
	return nil
}

func (x *PriceParams) GetRecurring() *PriceRecurring {
	if x != nil {
		return x.Recurring
	}
	return nil
}

func (x *PriceParams) GetTiers() []*PriceTierParams {
	if x != nil {
		return x.Tiers
	}
	return nil
}

func (x *PriceParams) GetTiersMode() string {
	if x != nil {
		return x.TiersMode
	}
	return ""
}

func (x *PriceParams) GetTransformQuantity() *PriceTransformQuantity {
	if x != nil {
		return x.TransformQuantity
	}
	return nil
}

func (x *PriceParams) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type UpdatePriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price      *PriceParams           `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdatePriceRequest) Reset() {
	*x = UpdatePriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_api_price_v1_price_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePriceRequest) ProtoMessage() {}

func (x *UpdatePriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_api_price_v1_price_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePriceRequest.ProtoReflect.Descriptor instead.
func (*UpdatePriceRequest) Descriptor() ([]byte, []int) {
	return file_product_api_price_v1_price_proto_rawDescGZIP(), []int{10}
}

func (x *UpdatePriceRequest) GetPrice() *PriceParams {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *UpdatePriceRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type ListPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageOffset int32                  `protobuf:"varint,1,opt,name=page_offset,json=pageOffset,proto3" json:"page_offset,omitempty"`
	PageSize   int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Search     string                 `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	Sort       []string               `protobuf:"bytes,4,rep,name=sort,proto3" json:"sort,omitempty"`
	Fields     *fieldmaskpb.FieldMask `protobuf:"bytes,5,opt,name=fields,proto3" json:"fields,omitempty"`
	Filter     *PriceFilter           `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListPriceRequest) Reset() {
	*x = ListPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_api_price_v1_price_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPriceRequest) ProtoMessage() {}

func (x *ListPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_api_price_v1_price_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPriceRequest.ProtoReflect.Descriptor instead.
func (*ListPriceRequest) Descriptor() ([]byte, []int) {
	return file_product_api_price_v1_price_proto_rawDescGZIP(), []int{11}
}

func (x *ListPriceRequest) GetPageOffset() int32 {
	if x != nil {
		return x.PageOffset
	}
	return 0
}

func (x *ListPriceRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPriceRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListPriceRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListPriceRequest) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ListPriceRequest) GetFilter() *PriceFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type PriceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerType *query.StringFilterOperation `protobuf:"bytes,50,opt,name=owner_type,json=ownerType,proto3" json:"owner_type,omitempty"`
	OwnerId   *query.StringFilterOperation `protobuf:"bytes,51,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *PriceFilter) Reset() {
	*x = PriceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_api_price_v1_price_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceFilter) ProtoMessage() {}

func (x *PriceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_product_api_price_v1_price_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceFilter.ProtoReflect.Descriptor instead.
func (*PriceFilter) Descriptor() ([]byte, []int) {
	return file_product_api_price_v1_price_proto_rawDescGZIP(), []int{12}
}

func (x *PriceFilter) GetOwnerType() *query.StringFilterOperation {
	if x != nil {
		return x.OwnerType
	}
	return nil
}

func (x *PriceFilter) GetOwnerId() *query.StringFilterOperation {
	if x != nil {
		return x.OwnerId
	}
	return nil
}

var File_product_api_price_v1_price_proto protoreflect.FileDescriptor

var file_product_api_price_v1_price_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x07, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x62, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x2e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x50, 0x62, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x6d, 0x6f,
	0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x64, 0x65, 0x6e, 0x79, 0x4d, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x10,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xac, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x05, 0x74, 0x69, 0x65, 0x72,
	0x73, 0x18, 0xae, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x52, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xb6,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x5c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0xb7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x13,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xaf, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x50, 0x62, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x0a,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x62,
	0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x64, 0x65, 0x6e, 0x79, 0x4d, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x44, 0x0a, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72,
	0x52, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x22, 0xf6, 0x02, 0x0a, 0x19, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x12, 0x3f, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x17, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x6d,
	0x6f, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x65, 0x6e, 0x79, 0x4d, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73, 0x18,
	0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05, 0x74, 0x69, 0x65,
	0x72, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x22, 0x76, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x66,
	0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x62, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x12,
	0x22, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x62, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x75, 0x70, 0x54, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6c,
	0x61, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6c, 0x61, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x75, 0x70,
	0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x75, 0x70, 0x54, 0x6f, 0x22,
	0xc9, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x1a, 0x72, 0x18, 0x52, 0x03,
	0x64, 0x61, 0x79, 0x52, 0x04, 0x77, 0x65, 0x65, 0x6b, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x2e, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20,
	0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x33, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x22, 0x02, 0x28, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x44, 0x61, 0x79, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0xfa, 0x42, 0x2d, 0x72, 0x2b, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x65, 0x76, 0x65, 0x72, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x52, 0x00,
	0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x52, 0x08, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x64, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x00,
	0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x09, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x50, 0x62, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x74, 0x12, 0x22, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x62, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x05, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x04, 0x75, 0x70, 0x54, 0x6f, 0x22, 0x8f,
	0x01, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x6c, 0x61, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x66, 0x6c, 0x61, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x75, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x05, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x04, 0x75, 0x70, 0x54, 0x6f,
	0x22, 0x5f, 0x0a, 0x16, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x65, 0x42, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x0c, 0x72, 0x0a,
	0x52, 0x02, 0x75, 0x70, 0x52, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x22, 0x9d, 0x06, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x19,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x17, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x64, 0x65, 0x6e, 0x79, 0x4d, 0x6f, 0x72, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x14, 0x72, 0x12, 0x52, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x06,
	0x74, 0x69, 0x65, 0x72, 0x65, 0x64, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xac, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x05, 0x74, 0x69, 0x65, 0x72, 0x73,
	0x18, 0xae, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05,
	0x74, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x69, 0x65, 0x72, 0x73, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xfa, 0x42, 0x17, 0x72,
	0x15, 0x52, 0x09, 0x67, 0x72, 0x61, 0x64, 0x75, 0x61, 0x74, 0x65, 0x64, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x00, 0x52, 0x09, 0x74, 0x69, 0x65, 0x72, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x5c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0xb7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0xe0, 0x41, 0x02, 0xfa, 0x42, 0x17, 0x72, 0x15, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x22, 0x97, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xeb, 0x01, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x39,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x0b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x41, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x61, 0x61, 0x73, 0x2f, 0x6b, 0x69, 0x74, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_product_api_price_v1_price_proto_rawDescOnce sync.Once
	file_product_api_price_v1_price_proto_rawDescData = file_product_api_price_v1_price_proto_rawDesc
)

func file_product_api_price_v1_price_proto_rawDescGZIP() []byte {
	file_product_api_price_v1_price_proto_rawDescOnce.Do(func() {
		file_product_api_price_v1_price_proto_rawDescData = protoimpl.X.CompressGZIP(file_product_api_price_v1_price_proto_rawDescData)
	})
	return file_product_api_price_v1_price_proto_rawDescData
}

var file_product_api_price_v1_price_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_product_api_price_v1_price_proto_goTypes = []interface{}{
	(*Price)(nil),                         // 0: product.api.price.v1.Price
	(*PriceCurrencyOption)(nil),           // 1: product.api.price.v1.PriceCurrencyOption
	(*PriceCurrencyOptionParams)(nil),     // 2: product.api.price.v1.PriceCurrencyOptionParams
	(*PriceCurrencyOptionTier)(nil),       // 3: product.api.price.v1.PriceCurrencyOptionTier
	(*PriceCurrencyOptionTierParams)(nil), // 4: product.api.price.v1.PriceCurrencyOptionTierParams
	(*PriceRecurring)(nil),                // 5: product.api.price.v1.PriceRecurring
	(*PriceTier)(nil),                     // 6: product.api.price.v1.PriceTier
	(*PriceTierParams)(nil),               // 7: product.api.price.v1.PriceTierParams
	(*PriceTransformQuantity)(nil),        // 8: product.api.price.v1.PriceTransformQuantity
	(*PriceParams)(nil),                   // 9: product.api.price.v1.PriceParams
	(*UpdatePriceRequest)(nil),            // 10: product.api.price.v1.UpdatePriceRequest
	(*ListPriceRequest)(nil),              // 11: product.api.price.v1.ListPriceRequest
	(*PriceFilter)(nil),                   // 12: product.api.price.v1.PriceFilter
	(*timestamppb.Timestamp)(nil),         // 13: google.protobuf.Timestamp
	(*price.PricePb)(nil),                 // 14: price.PricePb
	(*fieldmaskpb.FieldMask)(nil),         // 15: google.protobuf.FieldMask
	(*query.StringFilterOperation)(nil),   // 16: query.operation.StringFilterOperation
}
var file_product_api_price_v1_price_proto_depIdxs = []int32{
	13, // 0: product.api.price.v1.Price.created_at:type_name -> google.protobuf.Timestamp
	13, // 1: product.api.price.v1.Price.updated_at:type_name -> google.protobuf.Timestamp
	14, // 2: product.api.price.v1.Price.default:type_name -> price.PricePb
	14, // 3: product.api.price.v1.Price.discounted:type_name -> price.PricePb
	1,  // 4: product.api.price.v1.Price.currency_options:type_name -> product.api.price.v1.PriceCurrencyOption
	5,  // 5: product.api.price.v1.Price.recurring:type_name -> product.api.price.v1.PriceRecurring
	6,  // 6: product.api.price.v1.Price.tiers:type_name -> product.api.price.v1.PriceTier
	8,  // 7: product.api.price.v1.Price.transform_quantity:type_name -> product.api.price.v1.PriceTransformQuantity
	14, // 8: product.api.price.v1.PriceCurrencyOption.default:type_name -> price.PricePb
	14, // 9: product.api.price.v1.PriceCurrencyOption.discounted:type_name -> price.PricePb
	3,  // 10: product.api.price.v1.PriceCurrencyOption.tiers:type_name -> product.api.price.v1.PriceCurrencyOptionTier
	4,  // 11: product.api.price.v1.PriceCurrencyOptionParams.tiers:type_name -> product.api.price.v1.PriceCurrencyOptionTierParams
	14, // 12: product.api.price.v1.PriceCurrencyOptionTier.flat:type_name -> price.PricePb
	14, // 13: product.api.price.v1.PriceCurrencyOptionTier.unit:type_name -> price.PricePb
	14, // 14: product.api.price.v1.PriceTier.flat:type_name -> price.PricePb
	14, // 15: product.api.price.v1.PriceTier.unit:type_name -> price.PricePb
	2,  // 16: product.api.price.v1.PriceParams.currency_options:type_name -> product.api.price.v1.PriceCurrencyOptionParams
	5,  // 17: product.api.price.v1.PriceParams.recurring:type_name -> product.api.price.v1.PriceRecurring
	7,  // 18: product.api.price.v1.PriceParams.tiers:type_name -> product.api.price.v1.PriceTierParams
	8,  // 19: product.api.price.v1.PriceParams.transform_quantity:type_name -> product.api.price.v1.PriceTransformQuantity
	9,  // 20: product.api.price.v1.UpdatePriceRequest.price:type_name -> product.api.price.v1.PriceParams
	15, // 21: product.api.price.v1.UpdatePriceRequest.update_mask:type_name -> google.protobuf.FieldMask
	15, // 22: product.api.price.v1.ListPriceRequest.fields:type_name -> google.protobuf.FieldMask
	12, // 23: product.api.price.v1.ListPriceRequest.filter:type_name -> product.api.price.v1.PriceFilter
	16, // 24: product.api.price.v1.PriceFilter.owner_type:type_name -> query.operation.StringFilterOperation
	16, // 25: product.api.price.v1.PriceFilter.owner_id:type_name -> query.operation.StringFilterOperation
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_product_api_price_v1_price_proto_init() }
func file_product_api_price_v1_price_proto_init() {
	if File_product_api_price_v1_price_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_product_api_price_v1_price_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_api_price_v1_price_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceCurrencyOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_api_price_v1_price_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceCurrencyOptionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_api_price_v1_price_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceCurrencyOptionTier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_api_price_v1_price_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceCurrencyOptionTierParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_api_price_v1_price_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceRecurring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_api_price_v1_price_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_api_price_v1_price_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTierParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_api_price_v1_price_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTransformQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_api_price_v1_price_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_api_price_v1_price_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_api_price_v1_price_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_api_price_v1_price_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_product_api_price_v1_price_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_product_api_price_v1_price_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_product_api_price_v1_price_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_product_api_price_v1_price_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_product_api_price_v1_price_proto_goTypes,
		DependencyIndexes: file_product_api_price_v1_price_proto_depIdxs,
		MessageInfos:      file_product_api_price_v1_price_proto_msgTypes,
	}.Build()
	File_product_api_price_v1_price_proto = out.File
	file_product_api_price_v1_price_proto_rawDesc = nil
	file_product_api_price_v1_price_proto_goTypes = nil
	file_product_api_price_v1_price_proto_depIdxs = nil
}
